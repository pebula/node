"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[7739],{2892:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>d,default:()=>c,frontMatter:()=>o,toc:()=>i});var t=r(4848),s=r(8453);const o={},d=void 0,i=[{value:"ModelExtensions.bulkWrite() method",id:"modelextensionsbulkwrite-method",level:2},{value:"Parameters",id:"parameters",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"./index.md",children:"Home"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.md",children:"@pebula/goosetyped"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.modelextensions.md",children:"ModelExtensions"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.modelextensions.bulkwrite.md",children:"bulkWrite"})]}),"\n",(0,t.jsx)(n.h2,{id:"modelextensionsbulkwrite-method",children:"ModelExtensions.bulkWrite() method"}),"\n",(0,t.jsxs)(n.p,{children:["Sends multiple ",(0,t.jsx)(n.code,{children:"insertOne"}),", ",(0,t.jsx)(n.code,{children:"updateOne"}),", ",(0,t.jsx)(n.code,{children:"updateMany"}),", ",(0,t.jsx)(n.code,{children:"replaceOne"}),", ",(0,t.jsx)(n.code,{children:"deleteOne"}),", and/or ",(0,t.jsx)(n.code,{children:"deleteMany"})," operations to the MongoDB server in one command. This is faster than sending multiple independent operations (e.g. if you use ",(0,t.jsx)(n.code,{children:"create()"}),") because with ",(0,t.jsx)(n.code,{children:"bulkWrite()"})," there is only one network round trip to the MongoDB server."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"bulkWrite<T>(this: Ctor<T>, writes: Array<M.AnyBulkWriteOperation<T extends M.Document ? any : (T extends {} ? T : any)>>, options: M.MongooseBulkWriteOptions & {\r\n        ordered: false;\r\n    }): Promise<mongodb.BulkWriteResult & {\r\n        mongoose?: {\r\n            validationErrors: Error[];\r\n        };\r\n    }>;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Parameter"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Type"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Description"})})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"this"})}),(0,t.jsx)("td",{children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"./goosetyped.ctor.md",children:"Ctor"}),"<T>"]})}),(0,t.jsx)("td",{})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"writes"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"Array<M.AnyBulkWriteOperation<T extends M.Document ? any : (T extends {} ? T : any)>>"})}),(0,t.jsx)("td",{})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"options"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"M.MongooseBulkWriteOptions & { ordered: false; }"})}),(0,t.jsx)("td",{})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsx)(n.p,{children:"Promise<mongodb.BulkWriteResult & { mongoose?: { validationErrors: Error[]; }; }>"})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>i});var t=r(6540);const s={},o=t.createContext(s);function d(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);