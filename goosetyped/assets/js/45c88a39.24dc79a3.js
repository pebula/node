"use strict";(self.webpackChunkdocs_goosetyped=self.webpackChunkdocs_goosetyped||[]).push([[2030],{4282:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>l,frontMatter:()=>c,metadata:()=>r,toc:()=>i});var s=o(6870),n=o(5569);const c={},d=void 0,r={id:"api-docs/goosetyped.stripdoc",title:"goosetyped.stripdoc",description:"Home &gt; @pebula/goosetyped &gt; StripDoc",source:"@site/docs/api-docs/goosetyped.stripdoc.md",sourceDirName:"api-docs",slug:"/api-docs/goosetyped.stripdoc",permalink:"/node/goosetyped/docs/api-docs/goosetyped.stripdoc",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/goosetyped/docs/docs/api-docs/goosetyped.stripdoc.md",tags:[],version:"current",frontMatter:{}},p={},i=[{value:"StripDoc type",id:"stripdoc-type",level:2},{value:"Example",id:"example",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/node/goosetyped/docs/api-docs/",children:"Home"})," > ",(0,s.jsx)(t.a,{href:"/node/goosetyped/docs/api-docs/goosetyped",children:"@pebula/goosetyped"})," > ",(0,s.jsx)(t.a,{href:"/node/goosetyped/docs/api-docs/goosetyped.stripdoc",children:"StripDoc"})]}),"\n",(0,s.jsx)(t.h2,{id:"stripdoc-type",children:"StripDoc type"}),"\n",(0,s.jsx)(t.p,{children:"A type helper that strips away all members of the mongoose Document instance from the type"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Signature:"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export type StripDoc<T extends Document, TExcept extends keyof Document = never> = Subtract<T, Omit<Document, TExcept>>;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'export class Message extends GtModel() {\r\n id: string;\r\n text: string;\r\n myMethod(): void { }\r\n}\r\n\r\nconst msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model)\r\nconst m: StripDoc<Message>; // now m has only "myMethod" & "text" but not "id"\r\n\r\n// Since "id" also exists in Document, to include it we need to exclude it from the strip.\r\nconst m: StripDoc<Message, \'id\'>; // now m has "id", "myMethod" & "text"\n'})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5569:(e,t,o)=>{o.d(t,{R:()=>d,x:()=>r});var s=o(6326);const n={},c=s.createContext(n);function d(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);