(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{244:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return c}));var a=n(3),d=n(8),o=(n(0),n(277)),r={},i={unversionedId:"api/goosetyped.model",id:"api/goosetyped.model",isDocsHomePage:!1,title:"goosetyped.model",description:"Home &gt; @pebula/goosetyped &gt; Model",source:"@site/docs/api/goosetyped.model.md",slug:"/api/goosetyped.model",permalink:"/node/goosetyped/docs/api/goosetyped.model",editUrl:"https://github.com/pebula/node/tree/master/apps/dpcs/touchstone/docs/docs/api/goosetyped.model.md",version:"current"},l=[{value:"Model interface",id:"model-interface",children:[]},{value:"Properties",id:"properties",children:[]},{value:"Methods",id:"methods",children:[]}],b={toc:l};function c(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/node/goosetyped/docs/api/index"},"Home")," ",">"," ",Object(o.b)("a",{parentName:"p",href:"/node/goosetyped/docs/api/goosetyped"},"@pebula/goosetyped")," ",">"," ",Object(o.b)("a",{parentName:"p",href:"/node/goosetyped/docs/api/goosetyped.model"},"Model")),Object(o.b)("h2",{id:"model-interface"},"Model interface"),Object(o.b)("b",null,"Signature:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-typescript"},"export interface Model<QueryHelpers = {}> extends MongooseModel<Document<any>, QueryHelpers> \n")),Object(o.b)("b",null,"Extends:")," MongooseModel<Document<any>, QueryHelpers>",Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Property"),Object(o.b)("th",{parentName:"tr",align:null},"Type"),Object(o.b)("th",{parentName:"tr",align:null},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model._gt_document_"},"[","GT","_","DOCUMENT","]")),Object(o.b)("td",{parentName:"tr",align:null},"boolean"),Object(o.b)("td",{parentName:"tr",align:null})))),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Method"),Object(o.b)("th",{parentName:"tr",align:null},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model._where"},"$where(this, argument)")),Object(o.b)("td",{parentName:"tr",align:null},"Creates a Query and specifies a $where condition.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.create"},"create(this, docs, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Shortcut for saving one or more documents to the database. MyModel.create(docs) does new MyModel(doc).save() for every doc in docs. Triggers the save() hook.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.create_1"},"create(this, docs, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.create_2"},"create(this, docs)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.create_3"},"create(this, docsWithCallback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.ctor"},"ctor(this, doc)")),Object(o.b)("td",{parentName:"tr",align:null},"Like ",Object(o.b)("code",null,"create()")," but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.find"},"find(this, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Finds documents.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.find_1"},"find(this, conditions, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.find_2"},"find(this, conditions, projection, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.find_3"},"find(this, conditions, projection, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyid"},"findById(this, id, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Finds a single document by its ","_","id field. findById(id) is almost","*"," equivalent to findOne(","{ ","_","id: id }","). findById() triggers findOne hooks.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyid_1"},"findById(this, id, projection, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyid_2"},"findById(this, id, projection, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidanddelete"},"findByIdAndDelete(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issue a mongodb findOneAndDelete command by a document's ","_","id field. findByIdAndDelete(id, ...) is equivalent to findByIdAndDelete(","{ ","_","id: id }",", ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned.","Note: same signatures as findByIdAndRemove")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidanddelete_1"},"findByIdAndDelete(this, id, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidanddelete_2"},"findByIdAndDelete(this, id, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidanddelete_3"},"findByIdAndDelete(this, id, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandremove"},"findByIdAndRemove(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issue a mongodb findAndModify remove command by a document's ","_","id field. findByIdAndRemove(id, ...) is equivalent to findOneAndRemove(","{ ","_","id: id }",", ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned.","If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). ",Object(o.b)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api.html%5C#mongoose%5C_Mongoose-set"},"https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set"),"Note: same signatures as findByIdAndDelete")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandremove_1"},"findByIdAndRemove(this, id, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandremove_2"},"findByIdAndRemove(this, id, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandremove_3"},"findByIdAndRemove(this, id, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate"},"findByIdAndUpdate(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issues a mongodb findAndModify update command by a document's ","_","id field. findByIdAndUpdate(id, ...) is equivalent to findOneAndUpdate(","{ ","_","id: id }",", ...).","If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). ",Object(o.b)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api.html%5C#mongoose%5C_Mongoose-set"},"https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate_1"},"findByIdAndUpdate(this, id, update, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate_2"},"findByIdAndUpdate(this, id, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate_3"},"findByIdAndUpdate(this, id, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate_4"},"findByIdAndUpdate(this, id, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findbyidandupdate_5"},"findByIdAndUpdate(this, id, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findone"},"findOne(this, conditions, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Finds one document. The conditions are cast to their respective SchemaTypes before the command is sent.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findone_1"},"findOne(this, conditions, projection, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findone_2"},"findOne(this, conditions, projection, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneanddelete"},"findOneAndDelete(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issues a mongodb findOneAndDelete command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed.","Note: same signatures as findOneAndRemove")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneanddelete_1"},"findOneAndDelete(this, conditions, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneanddelete_2"},"findOneAndDelete(this, conditions, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneanddelete_3"},"findOneAndDelete(this, conditions, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandremove"},"findOneAndRemove(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issue a mongodb findAndModify remove command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed else a Query object is returned.","If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). ",Object(o.b)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api.html%5C#mongoose%5C_Mongoose-set"},"https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set"),"Note: same signatures as findOneAndDelete")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandremove_1"},"findOneAndRemove(this, conditions, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandremove_2"},"findOneAndRemove(this, conditions, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandremove_3"},"findOneAndRemove(this, conditions, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate"},"findOneAndUpdate(this)")),Object(o.b)("td",{parentName:"tr",align:null},"Issues a mongodb findAndModify update command. Finds a matching document, updates it according to the update arg, passing any options, and returns the found document (if any) to the callback. The query executes immediately if callback is passed else a Query object is returned.","+ If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than the deprecated findAndModify(). + ",Object(o.b)("a",{parentName:"td",href:"https://mongoosejs.com/docs/api.html%5C#mongoose%5C_Mongoose-set"},"https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate_1"},"findOneAndUpdate(this, conditions, update, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate_2"},"findOneAndUpdate(this, conditions, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate_3"},"findOneAndUpdate(this, conditions, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate_4"},"findOneAndUpdate(this, conditions, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.findoneandupdate_5"},"findOneAndUpdate(this, conditions, update, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.geosearch"},"geoSearch(this, conditions, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Implements $geoSearch functionality for Mongoose")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.hydrate"},"hydrate(this, obj)")),Object(o.b)("td",{parentName:"tr",align:null},"Shortcut for creating a new Document from existing raw data, pre-saved in the DB. The document returned has no paths marked as modified initially.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.init"},"init(this, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Performs any async initialization of this model against MongoDB. This function is called automatically, so you don't need to call it. This function is also idempotent, so you may call it to get back a promise that will resolve when your indexes are finished building as an alternative to ",Object(o.b)("code",null,"MyModel.on('index')"))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.insertmany"},"insertMany(this, docs, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Shortcut for validating an array of documents and inserting them into MongoDB if they're all valid. This function is faster than .create() because it only sends one operation to the server, rather than one for each document. This function does not trigger save middleware.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.insertmany_1"},"insertMany(this, docs, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.insertmany_2"},"insertMany(this, doc, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.insertmany_3"},"insertMany(this, doc, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.mapreduce"},"mapReduce(this, o, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Executes a mapReduce command.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.populate"},"populate(this, docs, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null},"Populates document references.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("a",{parentName:"td",href:"/node/goosetyped/docs/api/goosetyped.model.populate_1"},"populate(docs, options, callback)")),Object(o.b)("td",{parentName:"tr",align:null})))))}c.isMDXComponent=!0},277:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return g}));var a=n(0),d=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,d=function(e,t){if(null==e)return{};var n,a,d={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(d[n]=e[n]);return d}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(d[n]=e[n])}return d}var b=d.a.createContext({}),c=function(e){var t=d.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return d.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return d.a.createElement(d.a.Fragment,{},t)}},m=d.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,g=p["".concat(r,".").concat(m)]||p[m]||s[m]||o;return n?d.a.createElement(g,i(i({ref:t},b),{},{components:n})):d.a.createElement(g,i({ref:t},b))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var b=2;b<o;b++)r[b]=n[b];return d.a.createElement.apply(null,r)}return d.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);