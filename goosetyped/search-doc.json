[{"title":"Async Model Compilation","type":0,"sectionRef":"#","url":"docs/advanced/async-model-compilation","content":"","keywords":""},{"title":"Sync VS Async","type":1,"pageTitle":"Async Model Compilation","url":"docs/advanced/async-model-compilation#sync-vs-async","content":"What does it means anyway? Since decorators are not (yet) part of the JS spec, TypeScript converts them into simple functions that invoke along with the creation of the class. First, all of the member level decorators fire (i.e those on properties and methods) and at the end the class decorators fire (e.g. @GtDocument). Once @GtDocument fires it will check if there is a connectionId defined, if not it will compile the model before the module itself finish to initialize and export the model class. This is a synchronous run which fits the default connection as it is also set immediately in mongoose. "},{"title":"Async Compilation","type":1,"pageTitle":"Async Model Compilation","url":"docs/advanced/async-model-compilation#async-compilation","content":"The same process occurs in an async compilation except that now @GtDocument fires and detects that connectionId is defined. import mongoose from 'mongoose'; import { GtDocument, GtModel, GtColumn, addConnection } from '@pebula/goosetyped'; @GtDocument({ connectionId: 'myConnection', }) export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Copy At this point it will wait to see if the user has added this connection. When no connection is found, nothing is done and the model will \"wait\" for the connection to be added. If the connection exists, the compilation will run at one of two options (user defined): immediate [default] - Compile the model once a reference to the connection is obtained.connected - Compile the model once the connection state changes to connected. warning Do not use the model before it is compiled using a connection. Now, let's register the connection so our model can compile: const connection = mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () => connection, { compileAt: 'immediate' }); await ready; Copy Once ready resolves we have a guarantee that all models are compiled and bound to the connection. The factory function (() => connection) return the connection or it can return a Promise for the connection. Once the factory function resolves (including promise, if returned) then the models compile and the process ends. If we set compileAt to connected the model will wait for the connection state to change to connected and only then all models will compile and the process will end. caution It is best to compile as early as possible, think before you use connected Watch out from the Promise Like connection object returned from mongoose.createConnection, when returned from the factory function like done above it will actually treat it as a promise and will resolve the factory once the connection is connected. Fix: const connection = await mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () => connection, { compileAt: 'immediate' }); await ready; Copy GtConnectOptions "},{"title":"Discriminators","type":0,"sectionRef":"#","url":"docs/advanced/discriminators","content":"","keywords":""},{"title":"Creating Discriminators","type":1,"pageTitle":"Discriminators","url":"docs/advanced/discriminators#creating-discriminators","content":"/* module: person.ts */ import { GtDocument, GtModel, GtColumn, GtDiscriminator } from '@pebula/goosetyped'; @GtDocument() export class Person<T extends string> extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtDiscriminator() type: T; } Copy import { GtDocument, GtModel, GtColumn } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class BusinessMan extends Person<'BusinessMan'> { @GtColumn() businessTrips: number; } @GtDocument() export class Soldier extends Person<'Soldier'> { @GtColumn() releaseDate: Date; } @GtDocument() export class Athlete extends Person<'Athlete'> { @GtColumn() medals: number; } Copy tip Sub Documents are also valid discriminators. "},{"title":"Discriminators as Sub Documents","type":1,"pageTitle":"Discriminators","url":"docs/advanced/discriminators#discriminators-as-sub-documents","content":"import { GtDocument, GtModel, GtColumn } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class SalesLead extends GtModel() { @GtColumn() receivedAt: Date; @GtColumn({ type: () => Person }) person: BusinessMan | Soldier | Athlete; } Copy import { GtDocument, GtModel, GtColumn, DocumentArray } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class Course extends GtModel() { @GtColumn() name: string; @GtColumn() startDate: Date; @GtColumn({ type: () => Person }) students: DocumentArray<BusinessMan | Soldier | Athlete>; } Copy "},{"title":"Indexes","type":0,"sectionRef":"#","url":"docs/advanced/indexes","content":"","keywords":""},{"title":"Single Index","type":1,"pageTitle":"Indexes","url":"docs/advanced/indexes#single-index","content":"import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtIndex({ sort: 'asc' }) @GtColumn() name: string; @GtIndex({ sort: 'desc' }) @GtColumn() age: number; @GtIndex() // defaults to 'asc' @GtColumn() nickname: string; Copy Metadata: GtSingleIndexMetadataArgs "},{"title":"Compound Index","type":1,"pageTitle":"Indexes","url":"docs/advanced/indexes#compound-index","content":"import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtIndex({ indices: { name: 'asc'; nickname: 'desc'; }, options: { test: true, } }) @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtColumn() nickname: string; Copy Metadta: GtCompoundIndexMetadataArgs "},{"title":"Local Columns","type":0,"sectionRef":"#","url":"docs/advanced/local-column","content":"","keywords":""},{"title":"Sub Documents & Embedded Documents","type":1,"pageTitle":"Local Columns","url":"docs/advanced/local-column#sub-documents--embedded-documents","content":"SubDocuments are a bit different. When mongoose detects a column that is an embedded document it will treat it differently. It will not use the class defined for it but instead will use a new class it creates for every column that is an embedded document which mimic the behavior of the original class. This how mongoose works for all embedded documents, including simple nested schema, complex discriminators and Array/Map of them. import { GtSubDocument, GtResource, GtDocument, GtModel, GtColumn, } from '@pebula/goosetyped'; @GtSubDocument({ noId: true }) export class Address extends GtResource() { @GtColumn() street: string; @GtColumn() country: string; } @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtColumn() address: Address; // <- Embedded Column } Copy info Address is an embedded column, not because it is wrapped by @GtSubDocument, it is an embedded column because it is nested within the root document In the example above, Customer.address will point to class SingleNested but it does not really matter because GooseTyped takes care to synchronize and run what's needed. It will make sure that the original constructor ran and will also adapt the class to support instanceOf so the expression person.address instanceOf Address is true. The only issue we have is with local columns / properties.GooseTyped maintains a sync between the original class and the new mongoose class but it can't track the members which are not declared. To solve this issue you can use the @GtLocalProp decorator which will make the property so it will be synced. caution Using local column or private properties in general is not recommended, avoid them to prevent unfortunate bugs and errors. "},{"title":"Middleware (Hooks)","type":0,"sectionRef":"#","url":"docs/advanced/hooks","content":"","keywords":""},{"title":"Document Hooks","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#document-hooks","content":""},{"title":"Init Hook","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#init-hook","content":"Supports pre/postMust be an instance methodDoes not support async operation import { GtDocument, GtModel, GtInitHook } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtInitHook('pre') preInitHook() { /* Do stuff... */ } @GtInitHook('post') postInitHook() { /* Do stuff... */ } } Copy "},{"title":"Validate, Save, Remove, DeleteOne, UpdateOne Hooks","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#validate-save-remove-deleteone-updateone-hooks","content":"Supports pre/postMust be an instance methodSupport async operation import { GtDocument, GtModel, GtValidateHook, GtSaveHook, GtRemoveHook, GtDeleteOneHook, GtUpdateOneHook, } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtValidateHook('pre') async preValidateHook() { /* Do stuff... */ } @GtValidateHook('post') postValidateHook() { /* Do stuff... */ } @GtSaveHook('pre') preSaveHook() { /* Do stuff... */ } @GtSaveHook('post') async postSaveHook() { /* Do stuff... */ } @GtRemoveHook('pre') async preRemoveHook() { /* Do stuff... */ } @GtRemoveHook('post') postRemoveHook() { /* Do stuff... */ } @GtDeleteOneHook('pre') async preDeleteOneHook() { /* Do stuff... */ } @GtDeleteOneHook('post') postDeleteOneHook() { /* Do stuff... */ } @GtUpdateOneHook('pre') preUpdateOneHook() { /* Do stuff... */ } @GtUpdateOneHook('post') async postUpdateOneHook() { /* Do stuff... */ } } Copy "},{"title":"Model Hooks","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#model-hooks","content":""},{"title":"InsertMany Hook","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#insertmany-hook","content":"Supports pre/post (different signatures)Must be a static methodSupport async operation import { GtDocument, GtModel, GtInsertManyHook } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtInsertManyHook('pre') static preInsertManyHook() { /* Do stuff... */ } @GtInsertManyHook('post') static postInsertManyHook(instances: Person[]) { /* Do stuff... */ } } Copy "},{"title":"Aggregation Hooks","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#aggregation-hooks","content":"TBD "},{"title":"Query Hooks","type":1,"pageTitle":"Middleware (Hooks)","url":"docs/advanced/hooks#query-hooks","content":"TBD "},{"title":"Plugins","type":0,"sectionRef":"#","url":"docs/advanced/plugins","content":"The way to declare and bind mongoose plugins to GooseTyped models. import * as mongooseAutopopulate from 'mongoose-autopopulate'; import { GtDocument, GtModel, GtColumn, GtPlugin } from '@pebula/goosetyped'; @GtDocument() @GtPlugin({ plugin: mongooseAutopopulate }) export class Person<T extends string> extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Copy","keywords":""},{"title":"goosetyped","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped","content":"","keywords":""},{"title":"goosetyped package","type":1,"pageTitle":"goosetyped","url":"docs/api-docs/goosetyped#goosetyped-package","content":""},{"title":"Classes","type":1,"pageTitle":"goosetyped","url":"docs/api-docs/goosetyped#classes","content":"Class\tDescriptionDocumentArray ObjectId\t "},{"title":"Functions","type":1,"pageTitle":"goosetyped","url":"docs/api-docs/goosetyped#functions","content":"Function\tDescriptionaddConnection(connectionId, connectionFactory, connectOptions)\tRegisters a connection with GooseTyped to be used to compile Models registered under the same connection Id. findModels()\tReturn all Models / Resources registered in GooseTyped getDiscriminatorKeyFor(modelClass)\tReturns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value. getDiscriminatorKeysOf(modelClass)\tReturns the discriminator keys for the provided Model / Resource. getEnum(cls, path)\tReturns the list of enums registered for a path in a Model / Resource. getSchemaOf(modelClass)\tReturns the mongoose schema for the provided Model / Resource GtColumn(metadata) GtDeleteOneHook(stage) GtDiscriminator() GtDocument(metadata) GtIndex(metadata) GtIndex(metadata) GtInitHook(stage) GtInsertManyHook(stage) GtInsertManyHook(stage) GtLocalProp() GtMethod() GtModel() GtModel(m1) GtModel(m1, m2) GtModel(m1, m2, m3) GtModel(m1, m2, m3, m4) GtModel(m1, m2, m3, m4, m5) GtPlugin(metadata) GtQuery(QH) GtQuery(Q1, Q2) GtQuery(Q1, Q2, Q3) GtQuery(Q1, Q2, Q3, Q4) GtRemoveHook(stage) GtResource() GtResource(m1) GtResource(m1, m2) GtResource(m1, m2, m3) GtResource(m1, m2, m3, m4) GtResource(m1, m2, m3, m4, m5) GtSaveHook(stage) GtSchemaType(metadata) GtSkipVersioning() GtSubDocument(metadata) GtTimestampCreated() GtTimestampUpdated() GtToJSON(config)\tA decorator for toJSON with a prototype bound implementation for the transform function.Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toJSON. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toJSON GtToObject(config)\tA decorator for toObject with a prototype bound implementation for the transform function.Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toObject. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toObject GtUpdateOneHook(stage) GtValidateHook(stage) GtVersionKey() mapSchemaType(runtimeType, metadata)\t "},{"title":"Interfaces","type":1,"pageTitle":"goosetyped","url":"docs/api-docs/goosetyped#interfaces","content":"Interface\tDescriptionCtor GtBeforeCompileModelHandler GtColumnMetadataArgs GtCompoundIndexMetadataArgs GtConnectOptions GtDocumentMetadataArgs GtIndexOptions GtPluginMetadataArgs GtSingleIndexMetadataArgs GtSubDocumentMetadataArgs Model Resource SubDocument ValidatorMessageContext ValidatorOpts\t "},{"title":"Type Aliases","type":1,"pageTitle":"goosetyped","url":"docs/api-docs/goosetyped#type-aliases","content":"Type Alias\tDescriptionClassDecoratorOf ColumnRequired GtIndexSortOrder GtSchemaTypeMetadataArgs MethodDecoratorOf PropertyDecoratorOf StaticMethodDecoratorOf StripDoc\tA type helper that strips away all members of the mongoose Document instance from the type StripDoColumns\tA type helper that strips away all members of the mongoose Document instance from the type as well as all methods. Type Validator\thttps://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate ValidatorFn\t "},{"title":"Query Methods / Helpers","type":0,"sectionRef":"#","url":"docs/advanced/query-methods","content":"WIP# Query methods (also called Query Helpers) is a simple but powerful mechanism to compose custom queries. All query methods are added to the mongoose Query class and not the Model so they don't effect the type directly however the Query type is used on the Model so there is an indirect effect which is why we register query methods is a different way. Let's define some query methods: import { Document, DocumentQuery } from 'mongoose'; import { GtDocument, GtModel, GtColumn, GtQuery } from '@pebula/goosetyped'; export class MyQueries { byName<T extends Document & { name: string }>(this: DocumentQuery<T[], T, MyQueries> & MyQueries, name: string): DocumentQuery<T[], T, MyQueries> & MyQueries { return this.where({ name: new RegExp(name, 'i') }); } byAge<T extends Document & { age: number }>(this: DocumentQuery<T[], T, MyQueries> & MyQueries, age: number): DocumentQuery<T[], T, MyQueries> & MyQueries { return this.where({ age: age }); } } Copy @GtDocument() export class Person extends GtQuery(MyQueries)(GtModel()) { @GtColumn() name: string; @GtColumn() age: number; } Copy Person.find().byName('test').byAge(15); Copy The declaration might look a bit cumbersome but it enables use to apply the additional query methods type members on the Query object returned by the Model's find() method. info Note that you can still add mixins through GtModel()","keywords":""},{"title":"goosetyped.addconnection","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.addconnection","content":"","keywords":""},{"title":"addConnection() function","type":1,"pageTitle":"goosetyped.addconnection","url":"docs/api-docs/goosetyped.addconnection#addconnection-function","content":"Registers a connection with GooseTyped to be used to compile Models registered under the same connection Id. Signature: export declare function addConnection(connectionId: string, connectionFactory: () => (mongoose.Connection | Promise<mongoose.Connection>), connectOptions?: GtConnectOptions): Promise<unknown>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.addconnection","url":"docs/api-docs/goosetyped.addconnection#parameters","content":"Parameter\tType\tDescriptionconnectionId\tstring\tA unique id for this connection, will be used to find models with matching connectionId's. connectionFactory\t() => (mongoose.Connection | Promise<mongoose.Connection>)\tA function that returns a mongoose connection or a Promise for a mongoose connection. The connection does not have to be alive. connectOptions\tGtConnectOptions\t Returns: Promise<unknown> "},{"title":"goosetyped.classdecoratorof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.classdecoratorof","content":"","keywords":""},{"title":"ClassDecoratorOf type","type":1,"pageTitle":"goosetyped.classdecoratorof","url":"docs/api-docs/goosetyped.classdecoratorof#classdecoratorof-type","content":"Signature: export declare type ClassDecoratorOf<TInstance, TStatic = any> = (target: Type<TInstance, TStatic>) => any; Copy References: [Type](/node/goosetyped/docs/api-docs/goosetyped.type) "},{"title":"goosetyped.columnrequired","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.columnrequired","content":"","keywords":""},{"title":"ColumnRequired type","type":1,"pageTitle":"goosetyped.columnrequired","url":"docs/api-docs/goosetyped.columnrequired#columnrequired-type","content":"Signature: export declare type ColumnRequired = boolean | string | (() => boolean) | [() => boolean, string]; Copy "},{"title":"goosetyped.ctor","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.ctor","content":"","keywords":""},{"title":"Ctor interface","type":1,"pageTitle":"goosetyped.ctor","url":"docs/api-docs/goosetyped.ctor#ctor-interface","content":"Signature: export interface Ctor<T> extends Function Copy Extends: Function "},{"title":"Methods","type":1,"pageTitle":"goosetyped.ctor","url":"docs/api-docs/goosetyped.ctor#methods","content":"Method\tDescription(new)(args)\t "},{"title":"goosetyped.ctor._new_","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.ctor._new_","content":"","keywords":""},{"title":"Ctor.(new)","type":1,"pageTitle":"goosetyped.ctor._new_","url":"docs/api-docs/goosetyped.ctor._new_#ctornew","content":"Signature: new (...args: any[]): T; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.ctor._new_","url":"docs/api-docs/goosetyped.ctor._new_#parameters","content":"Parameter\tType\tDescriptionargs\tany[]\t Returns: T "},{"title":"goosetyped.documentarray","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.documentarray","content":"","keywords":""},{"title":"DocumentArray class","type":1,"pageTitle":"goosetyped.documentarray","url":"docs/api-docs/goosetyped.documentarray#documentarray-class","content":"Signature: export declare class DocumentArray<T extends Document> extends Types.DocumentArray<T> Copy Extends: Types.DocumentArray<T> "},{"title":"goosetyped.findmodels","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.findmodels","content":"","keywords":""},{"title":"findModels() function","type":1,"pageTitle":"goosetyped.findmodels","url":"docs/api-docs/goosetyped.findmodels#findmodels-function","content":"Return all Models / Resources registered in GooseTyped Signature: export declare function findModels(): Array<Model | Resource>; Copy Returns: Array<Model | Resource> "},{"title":"goosetyped.getdiscriminatorkeyfor","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.getdiscriminatorkeyfor","content":"","keywords":""},{"title":"getDiscriminatorKeyFor() function","type":1,"pageTitle":"goosetyped.getdiscriminatorkeyfor","url":"docs/api-docs/goosetyped.getdiscriminatorkeyfor#getdiscriminatorkeyfor-function","content":"Returns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value. Signature: export declare function getDiscriminatorKeyFor(modelClass: Ctor<any>): string | undefined; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.getdiscriminatorkeyfor","url":"docs/api-docs/goosetyped.getdiscriminatorkeyfor#parameters","content":"Parameter\tType\tDescriptionmodelClass\tCtor<any>\t Returns: string | undefined "},{"title":"goosetyped.getenum","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.getenum","content":"","keywords":""},{"title":"getEnum() function","type":1,"pageTitle":"goosetyped.getenum","url":"docs/api-docs/goosetyped.getenum#getenum-function","content":"Returns the list of enums registered for a path in a Model / Resource. Signature: export declare function getEnum<T>(cls: Ctor<T>, path: keyof T): string[]; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.getenum","url":"docs/api-docs/goosetyped.getenum#parameters","content":"Parameter\tType\tDescriptioncls\tCtor<T> path\tkeyof T\t Returns: string[] "},{"title":"goosetyped.getdiscriminatorkeysof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.getdiscriminatorkeysof","content":"","keywords":""},{"title":"getDiscriminatorKeysOf() function","type":1,"pageTitle":"goosetyped.getdiscriminatorkeysof","url":"docs/api-docs/goosetyped.getdiscriminatorkeysof#getdiscriminatorkeysof-function","content":"Returns the discriminator keys for the provided Model / Resource. Signature: export declare function getDiscriminatorKeysOf(modelClass: Ctor<any>): string[]; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.getdiscriminatorkeysof","url":"docs/api-docs/goosetyped.getdiscriminatorkeysof#parameters","content":"Parameter\tType\tDescriptionmodelClass\tCtor<any>\t Returns: string[] "},{"title":"goosetyped.gtbeforecompilemodelhandler","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler","content":"","keywords":""},{"title":"GtBeforeCompileModelHandler interface","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler#gtbeforecompilemodelhandler-interface","content":"Signature: export interface GtBeforeCompileModelHandler Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler#properties","content":"Property\tType\tDescriptionschema\tmongoose.Schema target\tCtor<any>\t "},{"title":"goosetyped.getschemaof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.getschemaof","content":"","keywords":""},{"title":"getSchemaOf() function","type":1,"pageTitle":"goosetyped.getschemaof","url":"docs/api-docs/goosetyped.getschemaof#getschemaof-function","content":"Returns the mongoose schema for the provided Model / Resource Signature: export declare function getSchemaOf<T>(modelClass: Ctor<T>): Schema | undefined; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.getschemaof","url":"docs/api-docs/goosetyped.getschemaof#parameters","content":"Parameter\tType\tDescriptionmodelClass\tCtor<T>\t Returns: Schema | undefined "},{"title":"goosetyped.gtbeforecompilemodelhandler.target","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler.target","content":"","keywords":""},{"title":"GtBeforeCompileModelHandler.target property","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler.target","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler.target#gtbeforecompilemodelhandlertarget-property","content":"Signature: target: Ctor<any>; Copy "},{"title":"goosetyped.gtbeforecompilemodelhandler.schema","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler.schema","content":"","keywords":""},{"title":"GtBeforeCompileModelHandler.schema property","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler.schema","url":"docs/api-docs/goosetyped.gtbeforecompilemodelhandler.schema#gtbeforecompilemodelhandlerschema-property","content":"Signature: schema: mongoose.Schema; Copy "},{"title":"goosetyped.gtcolumnmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs","content":"","keywords":""},{"title":"GtColumnMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs#gtcolumnmetadataargs-interface","content":"Signature: export interface GtColumnMetadataArgs<T> Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs#properties","content":"Property\tType\tDescriptiondefault\tT | ((...args: any[]) => T)\tSets a default value or value for the path. If the value is a function, the return value of the function is used as the default. https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-default enum\tstring[] | number[] | object immutable\tboolean\tDefines this path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-immutable required\tColumnRequired\tIf true adds a required validator for this property https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-required select\tboolean\tSet to true if this path should always be included in the results, false if it should be excluded by default. This setting can be overridden at the query level. https://mongoosejs.com/docs/api/schematype.html\\#schematype\\_SchemaType-select skipVersioning\tboolean\tAllows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For sub-documents, include this on the parent document using the fully qualified path.You can also use the dedicated decorator @SkipVersioning() https://mongoosejs.com/docs/4.x/docs/guide.html\\#skipVersioning type\tSchema | typeof SchemaType | (() => Type<any, any>)\tSet's the type used by this column. validate\tValidator\tAdds validator(s) for this document path. Validators always receive the value to validate as their first argument and must return Boolean. Returning false means validation failed. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate "},{"title":"goosetyped.gtcolumn","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumn","content":"","keywords":""},{"title":"GtColumn() function","type":1,"pageTitle":"goosetyped.gtcolumn","url":"docs/api-docs/goosetyped.gtcolumn#gtcolumn-function","content":"Signature: export declare function GtColumn<T = any>(metadata?: GtColumnMetadataArgs<T>): PropertyDecoratorOf<any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtcolumn","url":"docs/api-docs/goosetyped.gtcolumn#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtColumnMetadataArgs<T>\t Returns: PropertyDecoratorOf<any> "},{"title":"goosetyped.gtcolumnmetadataargs.default","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.default","content":"","keywords":""},{"title":"GtColumnMetadataArgs.default property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.default","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.default#gtcolumnmetadataargsdefault-property","content":"Sets a default value or value for the path. If the value is a function, the return value of the function is used as the default. https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-default Signature: default?: T | ((...args: any[]) => T); Copy "},{"title":"goosetyped.gtcolumnmetadataargs.immutable","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.immutable","content":"","keywords":""},{"title":"GtColumnMetadataArgs.immutable property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.immutable","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.immutable#gtcolumnmetadataargsimmutable-property","content":"Defines this path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-immutable Signature: immutable?: boolean; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.enum","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.enum","content":"","keywords":""},{"title":"GtColumnMetadataArgs.enum property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.enum","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.enum#gtcolumnmetadataargsenum-property","content":"Signature: enum?: string[] | number[] | object; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.required","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.required","content":"","keywords":""},{"title":"GtColumnMetadataArgs.required property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.required","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.required#gtcolumnmetadataargsrequired-property","content":"If true adds a required validator for this property https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-required Signature: required?: ColumnRequired; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.skipversioning","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.skipversioning","content":"","keywords":""},{"title":"GtColumnMetadataArgs.skipVersioning property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.skipversioning","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.skipversioning#gtcolumnmetadataargsskipversioning-property","content":"Allows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For sub-documents, include this on the parent document using the fully qualified path. You can also use the dedicated decorator @SkipVersioning() https://mongoosejs.com/docs/4.x/docs/guide.html\\#skipVersioning Signature: skipVersioning?: boolean; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.select","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.select","content":"","keywords":""},{"title":"GtColumnMetadataArgs.select property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.select","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.select#gtcolumnmetadataargsselect-property","content":"Set to true if this path should always be included in the results, false if it should be excluded by default. This setting can be overridden at the query level. https://mongoosejs.com/docs/api/schematype.html\\#schematype\\_SchemaType-select Signature: select?: boolean; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.validate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.validate","content":"","keywords":""},{"title":"GtColumnMetadataArgs.validate property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.validate","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.validate#gtcolumnmetadataargsvalidate-property","content":"Adds validator(s) for this document path. Validators always receive the value to validate as their first argument and must return Boolean. Returning false means validation failed. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate Signature: validate?: Validator; Copy "},{"title":"goosetyped.gtcolumnmetadataargs.type","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.type","content":"","keywords":""},{"title":"GtColumnMetadataArgs.type property","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.type","url":"docs/api-docs/goosetyped.gtcolumnmetadataargs.type#gtcolumnmetadataargstype-property","content":"Set's the type used by this column. Signature: type?: Schema | typeof SchemaType | (() => Type<any, any>); Copy "},{"title":"goosetyped.gtcompoundindexmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs","content":"","keywords":""},{"title":"GtCompoundIndexMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs#gtcompoundindexmetadataargs-interface","content":"Signature: export interface GtCompoundIndexMetadataArgs Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs#properties","content":"Property\tType\tDescriptionindices\t{ [indexName: string]: GtIndexSortOrder; } options\tGtIndexOptions\t "},{"title":"goosetyped.gtcompoundindexmetadataargs.options","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs.options","content":"","keywords":""},{"title":"GtCompoundIndexMetadataArgs.options property","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs.options","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs.options#gtcompoundindexmetadataargsoptions-property","content":"Signature: options?: GtIndexOptions; Copy "},{"title":"goosetyped.gtcompoundindexmetadataargs.indices","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs.indices","content":"","keywords":""},{"title":"GtCompoundIndexMetadataArgs.indices property","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs.indices","url":"docs/api-docs/goosetyped.gtcompoundindexmetadataargs.indices#gtcompoundindexmetadataargsindices-property","content":"Signature: indices: { [indexName: string]: GtIndexSortOrder; }; Copy "},{"title":"goosetyped.gtconnectoptions","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtconnectoptions","content":"","keywords":""},{"title":"GtConnectOptions interface","type":1,"pageTitle":"goosetyped.gtconnectoptions","url":"docs/api-docs/goosetyped.gtconnectoptions#gtconnectoptions-interface","content":"Signature: export interface GtConnectOptions Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtconnectoptions","url":"docs/api-docs/goosetyped.gtconnectoptions#properties","content":"Property\tType\tDescriptionbeforeCompile\t(handler: GtBeforeCompileModelHandler) => void\tA handler invoked before compiling the model, providing the schema so you can perform final adjustments. compileAt\t'immediate' | 'connected'\tWhen to compile the model.- immediate: When the connection object is resolved from the factory function (which does not necessarily mean it is connected) - connected: When the connection status changes to connected (if the connection is already connected this is equivalent to \"immediate\") "},{"title":"goosetyped.gtconnectoptions.compileat","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtconnectoptions.compileat","content":"","keywords":""},{"title":"GtConnectOptions.compileAt property","type":1,"pageTitle":"goosetyped.gtconnectoptions.compileat","url":"docs/api-docs/goosetyped.gtconnectoptions.compileat#gtconnectoptionscompileat-property","content":"When to compile the model. immediate: When the connection object is resolved from the factory function (which does not necessarily mean it is connected) - connected: When the connection status changes to connected (if the connection is already connected this is equivalent to \"immediate\") Signature: compileAt?: 'immediate' | 'connected'; Copy "},{"title":"goosetyped.gtconnectoptions.beforecompile","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtconnectoptions.beforecompile","content":"","keywords":""},{"title":"GtConnectOptions.beforeCompile property","type":1,"pageTitle":"goosetyped.gtconnectoptions.beforecompile","url":"docs/api-docs/goosetyped.gtconnectoptions.beforecompile#gtconnectoptionsbeforecompile-property","content":"A handler invoked before compiling the model, providing the schema so you can perform final adjustments. Signature: beforeCompile?: (handler: GtBeforeCompileModelHandler) => void; Copy "},{"title":"goosetyped.gtdiscriminator","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdiscriminator","content":"","keywords":""},{"title":"GtDiscriminator() function","type":1,"pageTitle":"goosetyped.gtdiscriminator","url":"docs/api-docs/goosetyped.gtdiscriminator#gtdiscriminator-function","content":"Signature: export declare function GtDiscriminator(): PropertyDecoratorOf<string>; Copy Returns: PropertyDecoratorOf<string> "},{"title":"goosetyped.gtdeleteonehook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdeleteonehook","content":"","keywords":""},{"title":"GtDeleteOneHook() function","type":1,"pageTitle":"goosetyped.gtdeleteonehook","url":"docs/api-docs/goosetyped.gtdeleteonehook#gtdeleteonehook-function","content":"Signature: export declare function GtDeleteOneHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtdeleteonehook","url":"docs/api-docs/goosetyped.gtdeleteonehook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, any> "},{"title":"goosetyped.gtdocument","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocument","content":"","keywords":""},{"title":"GtDocument() function","type":1,"pageTitle":"goosetyped.gtdocument","url":"docs/api-docs/goosetyped.gtdocument#gtdocument-function","content":"Signature: export declare function GtDocument(metadata?: GtDocumentMetadataArgs): ClassDecoratorOf<Document, Model>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtdocument","url":"docs/api-docs/goosetyped.gtdocument#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtDocumentMetadataArgs\t Returns: ClassDecoratorOf<Document, Model> "},{"title":"goosetyped.gtdocumentmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs","content":"","keywords":""},{"title":"GtDocumentMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs#gtdocumentmetadataargs-interface","content":"Signature: export interface GtDocumentMetadataArgs extends GtSchemaMetadataArgs Copy Extends: GtSchemaMetadataArgs "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs#properties","content":"Property\tType\tDescriptionautoCreate\tboolean\tSee https://mongoosejs.com/docs/guide.html\\#autoCreate autoIndex\tboolean\tSee https://mongoosejs.com/docs/guide.html\\#autoIndex bufferCommands\tboolean\tSee https://mongoosejs.com/docs/guide.html\\#bufferCommands capped\tboolean | number | { size?: number; max?: number; autoIndexId?: boolean; }\tSee https://mongoosejs.com/docs/guide.html\\#capped collation\tmongodb.CollationDocument\tSee https://mongoosejs.com/docs/guide.html\\#collation collection\tstring\tThe collection name in the database Optional: When not set, induced from model name connectionId\tstring\tThe connection id to use when registering the model. If a connection id is not defined (default behavior) then the model is registered using the default connection.Use addConnection to add a new connection to the connection pool available for models.If at the time of creating the model the connection does not exists, it will \"wait\" for the connection to be added. minimize\tboolean\tSee https://mongoosejs.com/docs/guide.html\\#minimize skipInit\tboolean\tWhether to skip initialization Optional: When not set, default's to falseNote that this refer to the skipInit from mongoose. "},{"title":"goosetyped.gtdocumentmetadataargs.autoindex","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.autoindex","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.autoIndex property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.autoindex","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.autoindex#gtdocumentmetadataargsautoindex-property","content":"See https://mongoosejs.com/docs/guide.html\\#autoIndex Signature: autoIndex?: boolean; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.buffercommands","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.buffercommands","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.bufferCommands property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.buffercommands","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.buffercommands#gtdocumentmetadataargsbuffercommands-property","content":"See https://mongoosejs.com/docs/guide.html\\#bufferCommands Signature: bufferCommands?: boolean; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.autocreate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.autocreate","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.autoCreate property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.autocreate","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.autocreate#gtdocumentmetadataargsautocreate-property","content":"See https://mongoosejs.com/docs/guide.html\\#autoCreate Signature: autoCreate?: boolean; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.collation","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.collation","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.collation property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.collation","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.collation#gtdocumentmetadataargscollation-property","content":"See https://mongoosejs.com/docs/guide.html\\#collation Signature: collation?: mongodb.CollationDocument; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.capped","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.capped","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.capped property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.capped","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.capped#gtdocumentmetadataargscapped-property","content":"See https://mongoosejs.com/docs/guide.html\\#capped Signature: capped?: boolean | number | { size?: number; max?: number; autoIndexId?: boolean; }; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.collection","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.collection","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.collection property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.collection","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.collection#gtdocumentmetadataargscollection-property","content":"The collection name in the database Optional: When not set, induced from model name Signature: collection?: string; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.connectionid","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.connectionid","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.connectionId property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.connectionid","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.connectionid#gtdocumentmetadataargsconnectionid-property","content":"The connection id to use when registering the model. If a connection id is not defined (default behavior) then the model is registered using the default connection. Use addConnection to add a new connection to the connection pool available for models. If at the time of creating the model the connection does not exists, it will \"wait\" for the connection to be added. Signature: connectionId?: string; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.minimize","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.minimize","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.minimize property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.minimize","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.minimize#gtdocumentmetadataargsminimize-property","content":"See https://mongoosejs.com/docs/guide.html\\#minimize Signature: minimize?: boolean; Copy "},{"title":"goosetyped.gtdocumentmetadataargs.skipinit","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.skipinit","content":"","keywords":""},{"title":"GtDocumentMetadataArgs.skipInit property","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.skipinit","url":"docs/api-docs/goosetyped.gtdocumentmetadataargs.skipinit#gtdocumentmetadataargsskipinit-property","content":"Whether to skip initialization Optional: When not set, default's to false Note that this refer to the skipInit from mongoose. Signature: skipInit?: boolean; Copy "},{"title":"goosetyped.gtindex_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindex_1","content":"","keywords":""},{"title":"GtIndex() function","type":1,"pageTitle":"goosetyped.gtindex_1","url":"docs/api-docs/goosetyped.gtindex_1#gtindex-function","content":"Signature: export declare function GtIndex(metadata: GtCompoundIndexMetadataArgs): ClassDecorator; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtindex_1","url":"docs/api-docs/goosetyped.gtindex_1#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtCompoundIndexMetadataArgs\t Returns: ClassDecorator "},{"title":"goosetyped.gtindex","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindex","content":"","keywords":""},{"title":"GtIndex() function","type":1,"pageTitle":"goosetyped.gtindex","url":"docs/api-docs/goosetyped.gtindex#gtindex-function","content":"Signature: export declare function GtIndex(metadata?: GtSingleIndexMetadataArgs): PropertyDecorator; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtindex","url":"docs/api-docs/goosetyped.gtindex#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtSingleIndexMetadataArgs\t Returns: PropertyDecorator "},{"title":"goosetyped.gtindexoptions","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexoptions","content":"","keywords":""},{"title":"GtIndexOptions interface","type":1,"pageTitle":"goosetyped.gtindexoptions","url":"docs/api-docs/goosetyped.gtindexoptions#gtindexoptions-interface","content":"Signature: export interface GtIndexOptions Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtindexoptions","url":"docs/api-docs/goosetyped.gtindexoptions#properties","content":"Property\tType\tDescriptionbackground\tboolean\tWether to run the indexing process in the background or not true sparse\tboolean | any\tDeclares a sparse index. text\tboolean | any\tDeclares a full text index. unique\tboolean | any\tDeclares an unique index. "},{"title":"goosetyped.gtindexoptions.background","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexoptions.background","content":"","keywords":""},{"title":"GtIndexOptions.background property","type":1,"pageTitle":"goosetyped.gtindexoptions.background","url":"docs/api-docs/goosetyped.gtindexoptions.background#gtindexoptionsbackground-property","content":"Wether to run the indexing process in the background or not true Signature: background?: boolean; Copy "},{"title":"goosetyped.gtindexoptions.sparse","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexoptions.sparse","content":"","keywords":""},{"title":"GtIndexOptions.sparse property","type":1,"pageTitle":"goosetyped.gtindexoptions.sparse","url":"docs/api-docs/goosetyped.gtindexoptions.sparse#gtindexoptionssparse-property","content":"Declares a sparse index. Signature: sparse?: boolean | any; Copy "},{"title":"goosetyped.gtindexoptions.text","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexoptions.text","content":"","keywords":""},{"title":"GtIndexOptions.text property","type":1,"pageTitle":"goosetyped.gtindexoptions.text","url":"docs/api-docs/goosetyped.gtindexoptions.text#gtindexoptionstext-property","content":"Declares a full text index. Signature: text?: boolean | any; Copy "},{"title":"goosetyped.gtindexsortorder","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexsortorder","content":"","keywords":""},{"title":"GtIndexSortOrder type","type":1,"pageTitle":"goosetyped.gtindexsortorder","url":"docs/api-docs/goosetyped.gtindexsortorder#gtindexsortorder-type","content":"Signature: export declare type GtIndexSortOrder = 'asc' | 'desc'; Copy "},{"title":"goosetyped.gtindexoptions.unique","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtindexoptions.unique","content":"","keywords":""},{"title":"GtIndexOptions.unique property","type":1,"pageTitle":"goosetyped.gtindexoptions.unique","url":"docs/api-docs/goosetyped.gtindexoptions.unique#gtindexoptionsunique-property","content":"Declares an unique index. Signature: unique?: boolean | any; Copy "},{"title":"goosetyped.gtinithook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtinithook","content":"","keywords":""},{"title":"GtInitHook() function","type":1,"pageTitle":"goosetyped.gtinithook","url":"docs/api-docs/goosetyped.gtinithook#gtinithook-function","content":"Signature: export declare function GtInitHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, void>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtinithook","url":"docs/api-docs/goosetyped.gtinithook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, void> "},{"title":"goosetyped.gtinsertmanyhook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtinsertmanyhook","content":"","keywords":""},{"title":"GtInsertManyHook() function","type":1,"pageTitle":"goosetyped.gtinsertmanyhook","url":"docs/api-docs/goosetyped.gtinsertmanyhook#gtinsertmanyhook-function","content":"Signature: export declare function GtInsertManyHook(stage: 'post'): StaticMethodDecoratorOf<[any[]], any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtinsertmanyhook","url":"docs/api-docs/goosetyped.gtinsertmanyhook#parameters","content":"Parameter\tType\tDescriptionstage\t'post'\t Returns: StaticMethodDecoratorOf<[any[]], any> "},{"title":"goosetyped.gtinsertmanyhook_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtinsertmanyhook_1","content":"","keywords":""},{"title":"GtInsertManyHook() function","type":1,"pageTitle":"goosetyped.gtinsertmanyhook_1","url":"docs/api-docs/goosetyped.gtinsertmanyhook_1#gtinsertmanyhook-function","content":"Signature: export declare function GtInsertManyHook(stage: 'pre'): StaticMethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtinsertmanyhook_1","url":"docs/api-docs/goosetyped.gtinsertmanyhook_1#parameters","content":"Parameter\tType\tDescriptionstage\t'pre'\t Returns: StaticMethodDecoratorOf<never, any> "},{"title":"goosetyped.gtlocalprop","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtlocalprop","content":"","keywords":""},{"title":"GtLocalProp() function","type":1,"pageTitle":"goosetyped.gtlocalprop","url":"docs/api-docs/goosetyped.gtlocalprop#gtlocalprop-function","content":"Signature: export declare function GtLocalProp(): PropertyDecorator; Copy Returns: PropertyDecorator "},{"title":"goosetyped.gtmethod","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmethod","content":"","keywords":""},{"title":"GtMethod() function","type":1,"pageTitle":"goosetyped.gtmethod","url":"docs/api-docs/goosetyped.gtmethod#gtmethod-function","content":"Signature: export declare function GtMethod(): MethodDecorator; Copy Returns: MethodDecorator "},{"title":"goosetyped.gtmodel","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel","url":"docs/api-docs/goosetyped.gtmodel#gtmodel-function","content":"Signature: export declare function GtModel(): Ctor<Document> & Model; Copy Returns: Ctor<Document> & Model "},{"title":"goosetyped.gtmodel_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel_1","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel_1","url":"docs/api-docs/goosetyped.gtmodel_1#gtmodel-function","content":"Signature: export declare function GtModel<T1, C1>(m1: C1 & Ctor<T1>): Ctor<Document & T1> & Model & C1; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtmodel_1","url":"docs/api-docs/goosetyped.gtmodel_1#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1>\t Returns: Ctor<Document & T1> & Model & C1 "},{"title":"goosetyped.gtmodel_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel_2","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel_2","url":"docs/api-docs/goosetyped.gtmodel_2#gtmodel-function","content":"Signature: export declare function GtModel<T1, C1, T2, C2>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>): Ctor<Document & T1 & T2> & Model & C1 & C2; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtmodel_2","url":"docs/api-docs/goosetyped.gtmodel_2#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2>\t Returns: Ctor<Document & T1 & T2> & Model & C1 & C2 "},{"title":"goosetyped.gtmodel_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel_3","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel_3","url":"docs/api-docs/goosetyped.gtmodel_3#gtmodel-function","content":"Signature: export declare function GtModel<T1, C1, T2, C2, T3, C3>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>): Ctor<Document & T1 & T2 & T3> & Model & C1 & C2 & C3; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtmodel_3","url":"docs/api-docs/goosetyped.gtmodel_3#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3>\t Returns: Ctor<Document & T1 & T2 & T3> & Model & C1 & C2 & C3 "},{"title":"goosetyped.gtmodel_4","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel_4","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel_4","url":"docs/api-docs/goosetyped.gtmodel_4#gtmodel-function","content":"Signature: export declare function GtModel<T1, C1, T2, C2, T3, C3, T4, C4>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>, m4: C4 & Ctor<T4>): Ctor<Document & T1 & T2 & T3 & T4> & Model & C1 & C2 & C3 & C4; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtmodel_4","url":"docs/api-docs/goosetyped.gtmodel_4#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3> m4\tC4 & Ctor<T4>\t Returns: Ctor<Document & T1 & T2 & T3 & T4> & Model & C1 & C2 & C3 & C4 "},{"title":"goosetyped.gtplugin","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtplugin","content":"","keywords":""},{"title":"GtPlugin() function","type":1,"pageTitle":"goosetyped.gtplugin","url":"docs/api-docs/goosetyped.gtplugin#gtplugin-function","content":"Signature: export declare function GtPlugin(metadata: GtPluginMetadataArgs): ClassDecorator; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtplugin","url":"docs/api-docs/goosetyped.gtplugin#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtPluginMetadataArgs\t Returns: ClassDecorator "},{"title":"goosetyped.gtpluginmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtpluginmetadataargs","content":"","keywords":""},{"title":"GtPluginMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"docs/api-docs/goosetyped.gtpluginmetadataargs#gtpluginmetadataargs-interface","content":"Signature: export interface GtPluginMetadataArgs<T = any> Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"docs/api-docs/goosetyped.gtpluginmetadataargs#properties","content":"Property\tType\tDescriptionoptions\tT\t "},{"title":"Methods","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"docs/api-docs/goosetyped.gtpluginmetadataargs#methods","content":"Method\tDescriptionplugin(schema, options) plugin(schema)\t "},{"title":"goosetyped.gtpluginmetadataargs.options","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.options","content":"","keywords":""},{"title":"GtPluginMetadataArgs.options property","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.options","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.options#gtpluginmetadataargsoptions-property","content":"Signature: options?: T; Copy "},{"title":"goosetyped.gtmodel_5","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtmodel_5","content":"","keywords":""},{"title":"GtModel() function","type":1,"pageTitle":"goosetyped.gtmodel_5","url":"docs/api-docs/goosetyped.gtmodel_5#gtmodel-function","content":"Signature: export declare function GtModel<T1, C1, T2, C2, T3, C3, T4, C4, T5, C5>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>, m4: C4 & Ctor<T4>, m5: C5 & Ctor<T5>): Ctor<Document & T1 & T2 & T3 & T4 & T5> & Model & C1 & C2 & C3 & C4 & C5; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtmodel_5","url":"docs/api-docs/goosetyped.gtmodel_5#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3> m4\tC4 & Ctor<T4> m5\tC5 & Ctor<T5>\t Returns: Ctor<Document & T1 & T2 & T3 & T4 & T5> & Model & C1 & C2 & C3 & C4 & C5 "},{"title":"goosetyped.gtpluginmetadataargs.plugin","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin","content":"","keywords":""},{"title":"GtPluginMetadataArgs.plugin() method","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin#gtpluginmetadataargsplugin-method","content":"Signature: plugin(schema: mongoose.Schema, options: T): void; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin#parameters","content":"Parameter\tType\tDescriptionschema\tmongoose.Schema options\tT\t Returns: void "},{"title":"goosetyped.gtpluginmetadataargs.plugin_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1","content":"","keywords":""},{"title":"GtPluginMetadataArgs.plugin() method","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin_1","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1#gtpluginmetadataargsplugin-method","content":"Signature: plugin(schema: mongoose.Schema): void; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin_1","url":"docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1#parameters","content":"Parameter\tType\tDescriptionschema\tmongoose.Schema\t Returns: void "},{"title":"goosetyped.gtquery","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtquery","content":"","keywords":""},{"title":"GtQuery() function","type":1,"pageTitle":"goosetyped.gtquery","url":"docs/api-docs/goosetyped.gtquery#gtquery-function","content":"Signature: export declare function GtQuery<Q1>(QH: Ctor<Q1>): <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtquery","url":"docs/api-docs/goosetyped.gtquery#parameters","content":"Parameter\tType\tDescriptionQH\tCtor<Q1>\t Returns: <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1> "},{"title":"goosetyped.gtquery_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtquery_1","content":"","keywords":""},{"title":"GtQuery() function","type":1,"pageTitle":"goosetyped.gtquery_1","url":"docs/api-docs/goosetyped.gtquery_1#gtquery-function","content":"Signature: export declare function GtQuery<Q1, Q2>(Q1: Ctor<Q1>, Q2: Ctor<Q2>): <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtquery_1","url":"docs/api-docs/goosetyped.gtquery_1#parameters","content":"Parameter\tType\tDescriptionQ1\tCtor<Q1> Q2\tCtor<Q2>\t Returns: <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2> "},{"title":"goosetyped.gtquery_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtquery_2","content":"","keywords":""},{"title":"GtQuery() function","type":1,"pageTitle":"goosetyped.gtquery_2","url":"docs/api-docs/goosetyped.gtquery_2#gtquery-function","content":"Signature: export declare function GtQuery<Q1, Q2, Q3>(Q1: Ctor<Q1>, Q2: Ctor<Q2>, Q3: Ctor<Q3>): <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2 & Q3>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtquery_2","url":"docs/api-docs/goosetyped.gtquery_2#parameters","content":"Parameter\tType\tDescriptionQ1\tCtor<Q1> Q2\tCtor<Q2> Q3\tCtor<Q3>\t Returns: <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2 & Q3> "},{"title":"goosetyped.gtremovehook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtremovehook","content":"","keywords":""},{"title":"GtRemoveHook() function","type":1,"pageTitle":"goosetyped.gtremovehook","url":"docs/api-docs/goosetyped.gtremovehook#gtremovehook-function","content":"Signature: export declare function GtRemoveHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtremovehook","url":"docs/api-docs/goosetyped.gtremovehook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, any> "},{"title":"goosetyped.gtquery_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtquery_3","content":"","keywords":""},{"title":"GtQuery() function","type":1,"pageTitle":"goosetyped.gtquery_3","url":"docs/api-docs/goosetyped.gtquery_3#gtquery-function","content":"Signature: export declare function GtQuery<Q1, Q2, Q3, Q4>(Q1: Ctor<Q1>, Q2: Ctor<Q2>, Q3: Ctor<Q3>, Q4: Ctor<Q4>): <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2 & Q3 & Q4>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtquery_3","url":"docs/api-docs/goosetyped.gtquery_3#parameters","content":"Parameter\tType\tDescriptionQ1\tCtor<Q1> Q2\tCtor<Q2> Q3\tCtor<Q3> Q4\tCtor<Q4>\t Returns: <T, C>(Cls: Ctor<Document & T> & Model & C) => Ctor<Document & T> & C & Model<Q1 & Q2 & Q3 & Q4> "},{"title":"goosetyped.gtresource","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource","url":"docs/api-docs/goosetyped.gtresource#gtresource-function","content":"Signature: export declare function GtResource(): Ctor<SubDocument> & Resource; Copy Returns: Ctor<SubDocument> & Resource "},{"title":"goosetyped.gtresource_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource_2","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource_2","url":"docs/api-docs/goosetyped.gtresource_2#gtresource-function","content":"Signature: export declare function GtResource<T1, C1, T2, C2>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>): Ctor<SubDocument & T1 & T2> & Resource & C1 & C2; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtresource_2","url":"docs/api-docs/goosetyped.gtresource_2#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2>\t Returns: Ctor<SubDocument & T1 & T2> & Resource & C1 & C2 "},{"title":"goosetyped.gtresource_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource_3","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource_3","url":"docs/api-docs/goosetyped.gtresource_3#gtresource-function","content":"Signature: export declare function GtResource<T1, C1, T2, C2, T3, C3>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>): Ctor<SubDocument & T1 & T2 & T3> & Resource & C1 & C2 & C3; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtresource_3","url":"docs/api-docs/goosetyped.gtresource_3#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3>\t Returns: Ctor<SubDocument & T1 & T2 & T3> & Resource & C1 & C2 & C3 "},{"title":"goosetyped.gtresource_4","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource_4","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource_4","url":"docs/api-docs/goosetyped.gtresource_4#gtresource-function","content":"Signature: export declare function GtResource<T1, C1, T2, C2, T3, C3, T4, C4>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>, m4: C4 & Ctor<T4>): Ctor<SubDocument & T1 & T2 & T3 & T4> & Resource & C1 & C2 & C3 & C4; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtresource_4","url":"docs/api-docs/goosetyped.gtresource_4#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3> m4\tC4 & Ctor<T4>\t Returns: Ctor<SubDocument & T1 & T2 & T3 & T4> & Resource & C1 & C2 & C3 & C4 "},{"title":"goosetyped.gtresource_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource_1","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource_1","url":"docs/api-docs/goosetyped.gtresource_1#gtresource-function","content":"Signature: export declare function GtResource<T1, C1>(m1: C1 & Ctor<T1>): Ctor<SubDocument & T1> & Resource & C1; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtresource_1","url":"docs/api-docs/goosetyped.gtresource_1#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1>\t Returns: Ctor<SubDocument & T1> & Resource & C1 "},{"title":"goosetyped.gtresource_5","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtresource_5","content":"","keywords":""},{"title":"GtResource() function","type":1,"pageTitle":"goosetyped.gtresource_5","url":"docs/api-docs/goosetyped.gtresource_5#gtresource-function","content":"Signature: export declare function GtResource<T1, C1, T2, C2, T3, C3, T4, C4, T5, C5>(m1: C1 & Ctor<T1>, m2: C2 & Ctor<T2>, m3: C3 & Ctor<T3>, m4: C4 & Ctor<T4>, m5: C5 & Ctor<T5>): Ctor<SubDocument & T1 & T2 & T3 & T4 & T5> & Resource & C1 & C2 & C3 & C4 & C5; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtresource_5","url":"docs/api-docs/goosetyped.gtresource_5#parameters","content":"Parameter\tType\tDescriptionm1\tC1 & Ctor<T1> m2\tC2 & Ctor<T2> m3\tC3 & Ctor<T3> m4\tC4 & Ctor<T4> m5\tC5 & Ctor<T5>\t Returns: Ctor<SubDocument & T1 & T2 & T3 & T4 & T5> & Resource & C1 & C2 & C3 & C4 & C5 "},{"title":"goosetyped.gtschematype","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtschematype","content":"","keywords":""},{"title":"GtSchemaType() function","type":1,"pageTitle":"goosetyped.gtschematype","url":"docs/api-docs/goosetyped.gtschematype#gtschematype-function","content":"Signature: export declare function GtSchemaType(metadata: GtSchemaTypeMetadataArgs): ClassDecorator; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtschematype","url":"docs/api-docs/goosetyped.gtschematype#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtSchemaTypeMetadataArgs\t Returns: ClassDecorator "},{"title":"goosetyped.gtsavehook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsavehook","content":"","keywords":""},{"title":"GtSaveHook() function","type":1,"pageTitle":"goosetyped.gtsavehook","url":"docs/api-docs/goosetyped.gtsavehook#gtsavehook-function","content":"Signature: export declare function GtSaveHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtsavehook","url":"docs/api-docs/goosetyped.gtsavehook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, any> "},{"title":"goosetyped.gtschematypemetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtschematypemetadataargs","content":"","keywords":""},{"title":"GtSchemaTypeMetadataArgs type","type":1,"pageTitle":"goosetyped.gtschematypemetadataargs","url":"docs/api-docs/goosetyped.gtschematypemetadataargs#gtschematypemetadataargs-type","content":"Signature: export declare type GtSchemaTypeMetadataArgs = GtSchemaTypeSingleMetadataArgs | GtSchemaTypeContainerMetadataArgs; Copy "},{"title":"goosetyped.gtsingleindexmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs","content":"","keywords":""},{"title":"GtSingleIndexMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs#gtsingleindexmetadataargs-interface","content":"Signature: export interface GtSingleIndexMetadataArgs Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs#properties","content":"Property\tType\tDescriptionoptions\tGtIndexOptions sort\tGtIndexSortOrder\t "},{"title":"goosetyped.gtsingleindexmetadataargs.options","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs.options","content":"","keywords":""},{"title":"GtSingleIndexMetadataArgs.options property","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs.options","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs.options#gtsingleindexmetadataargsoptions-property","content":"Signature: options?: GtIndexOptions; Copy "},{"title":"goosetyped.gtskipversioning","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtskipversioning","content":"","keywords":""},{"title":"GtSkipVersioning() function","type":1,"pageTitle":"goosetyped.gtskipversioning","url":"docs/api-docs/goosetyped.gtskipversioning#gtskipversioning-function","content":"Signature: export declare function GtSkipVersioning(): PropertyDecorator; Copy Returns: PropertyDecorator "},{"title":"goosetyped.gtsingleindexmetadataargs.sort","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs.sort","content":"","keywords":""},{"title":"GtSingleIndexMetadataArgs.sort property","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs.sort","url":"docs/api-docs/goosetyped.gtsingleindexmetadataargs.sort#gtsingleindexmetadataargssort-property","content":"Signature: sort: GtIndexSortOrder; Copy "},{"title":"goosetyped.gtsubdocument","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsubdocument","content":"","keywords":""},{"title":"GtSubDocument() function","type":1,"pageTitle":"goosetyped.gtsubdocument","url":"docs/api-docs/goosetyped.gtsubdocument#gtsubdocument-function","content":"Signature: export declare function GtSubDocument(metadata?: GtSubDocumentMetadataArgs): ClassDecoratorOf<any, Resource>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtsubdocument","url":"docs/api-docs/goosetyped.gtsubdocument#parameters","content":"Parameter\tType\tDescriptionmetadata\tGtSubDocumentMetadataArgs\t Returns: ClassDecoratorOf<any, Resource> "},{"title":"goosetyped.gtsubdocumentmetadataargs.noid","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsubdocumentmetadataargs.noid","content":"","keywords":""},{"title":"GtSubDocumentMetadataArgs.noId property","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs.noid","url":"docs/api-docs/goosetyped.gtsubdocumentmetadataargs.noid#gtsubdocumentmetadataargsnoid-property","content":"When true, will not create and _id when creating a new object This is equivalent to setting the _id property to false in the Schema options. https://mongoosejs.com/docs/guide.html\\#\\_id Signature: noId?: boolean; Copy "},{"title":"goosetyped.gtsubdocumentmetadataargs","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtsubdocumentmetadataargs","content":"","keywords":""},{"title":"GtSubDocumentMetadataArgs interface","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs","url":"docs/api-docs/goosetyped.gtsubdocumentmetadataargs#gtsubdocumentmetadataargs-interface","content":"Signature: export interface GtSubDocumentMetadataArgs extends GtSchemaMetadataArgs Copy Extends: GtSchemaMetadataArgs "},{"title":"Properties","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs","url":"docs/api-docs/goosetyped.gtsubdocumentmetadataargs#properties","content":"Property\tType\tDescriptionnoId\tboolean\tWhen true, will not create and _id when creating a new object This is equivalent to setting the _id property to false in the Schema options. https://mongoosejs.com/docs/guide.html\\#\\_id "},{"title":"goosetyped.gttimestampcreated","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gttimestampcreated","content":"","keywords":""},{"title":"GtTimestampCreated() function","type":1,"pageTitle":"goosetyped.gttimestampcreated","url":"docs/api-docs/goosetyped.gttimestampcreated#gttimestampcreated-function","content":"Signature: export declare function GtTimestampCreated<T = Date>(): PropertyDecoratorOf<T>; Copy Returns: PropertyDecoratorOf<T> "},{"title":"goosetyped.gttimestampupdated","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gttimestampupdated","content":"","keywords":""},{"title":"GtTimestampUpdated() function","type":1,"pageTitle":"goosetyped.gttimestampupdated","url":"docs/api-docs/goosetyped.gttimestampupdated#gttimestampupdated-function","content":"Signature: export declare function GtTimestampUpdated<T = Date>(): PropertyDecoratorOf<T>; Copy Returns: PropertyDecoratorOf<T> "},{"title":"goosetyped.gttoobject","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gttoobject","content":"","keywords":""},{"title":"GtToObject() function","type":1,"pageTitle":"goosetyped.gttoobject","url":"docs/api-docs/goosetyped.gttoobject#gttoobject-function","content":"A decorator for toObject with a prototype bound implementation for the transform function. Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toObject. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toObject Signature: export declare function GtToObject(config?: Omit<mongoose.ToObjectOptions, 'transform'>): MethodDecoratorOf<[any, any]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gttoobject","url":"docs/api-docs/goosetyped.gttoobject#parameters","content":"Parameter\tType\tDescriptionconfig\tOmit<mongoose.ToObjectOptions, 'transform'>\t Returns: MethodDecoratorOf<[any, any]> "},{"title":"goosetyped.gttojson","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gttojson","content":"","keywords":""},{"title":"GtToJSON() function","type":1,"pageTitle":"goosetyped.gttojson","url":"docs/api-docs/goosetyped.gttojson#gttojson-function","content":"A decorator for toJSON with a prototype bound implementation for the transform function. Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toJSON. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toJSON Signature: export declare function GtToJSON(config?: Omit<mongoose.ToObjectOptions, 'transform'>): MethodDecoratorOf<[any, any]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gttojson","url":"docs/api-docs/goosetyped.gttojson#parameters","content":"Parameter\tType\tDescriptionconfig\tOmit<mongoose.ToObjectOptions, 'transform'>\t Returns: MethodDecoratorOf<[any, any]> "},{"title":"goosetyped.gtupdateonehook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtupdateonehook","content":"","keywords":""},{"title":"GtUpdateOneHook() function","type":1,"pageTitle":"goosetyped.gtupdateonehook","url":"docs/api-docs/goosetyped.gtupdateonehook#gtupdateonehook-function","content":"Signature: export declare function GtUpdateOneHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtupdateonehook","url":"docs/api-docs/goosetyped.gtupdateonehook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, any> "},{"title":"goosetyped.gtversionkey","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtversionkey","content":"","keywords":""},{"title":"GtVersionKey() function","type":1,"pageTitle":"goosetyped.gtversionkey","url":"docs/api-docs/goosetyped.gtversionkey#gtversionkey-function","content":"Signature: export declare function GtVersionKey<T = number>(): PropertyDecoratorOf<T>; Copy Returns: PropertyDecoratorOf<T> "},{"title":"goosetyped.gtvalidatehook","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.gtvalidatehook","content":"","keywords":""},{"title":"GtValidateHook() function","type":1,"pageTitle":"goosetyped.gtvalidatehook","url":"docs/api-docs/goosetyped.gtvalidatehook#gtvalidatehook-function","content":"Signature: export declare function GtValidateHook(stage: 'pre' | 'post'): MethodDecoratorOf<never, any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.gtvalidatehook","url":"docs/api-docs/goosetyped.gtvalidatehook#parameters","content":"Parameter\tType\tDescriptionstage\t'pre' | 'post'\t Returns: MethodDecoratorOf<never, any> "},{"title":"goosetyped.mapschematype","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.mapschematype","content":"","keywords":""},{"title":"mapSchemaType() function","type":1,"pageTitle":"goosetyped.mapschematype","url":"docs/api-docs/goosetyped.mapschematype#mapschematype-function","content":"Signature: export declare function mapSchemaType(runtimeType: any, metadata: GtSchemaTypeMetadataArgs): void; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.mapschematype","url":"docs/api-docs/goosetyped.mapschematype#parameters","content":"Parameter\tType\tDescriptionruntimeType\tany metadata\tGtSchemaTypeMetadataArgs\t Returns: void "},{"title":"goosetyped.methoddecoratorof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.methoddecoratorof","content":"","keywords":""},{"title":"MethodDecoratorOf type","type":1,"pageTitle":"goosetyped.methoddecoratorof","url":"docs/api-docs/goosetyped.methoddecoratorof#methoddecoratorof-type","content":"Signature: export declare type MethodDecoratorOf<TArgs extends [any] | [any, any] | [any, any, any] | [any, any, any, any] | [any, any, any, any, any] | [any, any, any, any, any, any] | [any, any, any, any, any, any, any] = never, TReturn = void> = <Z extends Partial<Record<K, (...args: TArgs) => TReturn>>, K extends string>(target: Z, key: K, descriptor: TypedPropertyDescriptor<(...args: TArgs) => TReturn>) => TypedPropertyDescriptor<(...args: TArgs) => TReturn> | void; Copy "},{"title":"goosetyped.model._gt_document_","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model._gt_document_","content":"","keywords":""},{"title":"Model.[GT_DOCUMENT] property","type":1,"pageTitle":"goosetyped.model._gt_document_","url":"docs/api-docs/goosetyped.model._gt_document_#modelgt_document-property","content":"Signature: [GT_DOCUMENT]: boolean; Copy "},{"title":"goosetyped.model","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model","content":"","keywords":""},{"title":"Model interface","type":1,"pageTitle":"goosetyped.model","url":"docs/api-docs/goosetyped.model#model-interface","content":"Signature: export interface Model<QueryHelpers = {}> extends MongooseModel<Document<any>, QueryHelpers> Copy Extends: MongooseModel<Document<any>, QueryHelpers> "},{"title":"Properties","type":1,"pageTitle":"goosetyped.model","url":"docs/api-docs/goosetyped.model#properties","content":"Property\tType\tDescription[GT_DOCUMENT]\tboolean\t "},{"title":"Methods","type":1,"pageTitle":"goosetyped.model","url":"docs/api-docs/goosetyped.model#methods","content":"Method\tDescription$where(this, argument)\tCreates a Query and specifies a $where condition. create(this, docs, callback)\tShortcut for saving one or more documents to the database. MyModel.create(docs) does new MyModel(doc).save() for every doc in docs. Triggers the save() hook. create(this, docs, options, callback) create(this, docs) create(this, docsWithCallback) ctor(this, doc)\tLike create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class find(this, callback)\tFinds documents. find(this, conditions, callback) find(this, conditions, projection, callback) find(this, conditions, projection, options, callback) findById(this, id, callback)\tFinds a single document by its _id field. findById(id) is almost* equivalent to findOne({ _id: id }). findById() triggers findOne hooks. findById(this, id, projection, callback) findById(this, id, projection, options, callback) findByIdAndDelete(this)\tIssue a mongodb findOneAndDelete command by a document's _id field. findByIdAndDelete(id, ...) is equivalent to findByIdAndDelete({ _id: id }, ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned.Note: same signatures as findByIdAndRemove findByIdAndDelete(this, id, callback) findByIdAndDelete(this, id, options, callback) findByIdAndDelete(this, id, options, callback) findByIdAndRemove(this)\tIssue a mongodb findAndModify remove command by a document's _id field. findByIdAndRemove(id, ...) is equivalent to findOneAndRemove({ _id: id }, ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned.If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-setNote: same signatures as findByIdAndDelete findByIdAndRemove(this, id, callback) findByIdAndRemove(this, id, options, callback) findByIdAndRemove(this, id, options, callback) findByIdAndUpdate(this)\tIssues a mongodb findAndModify update command by a document's _id field. findByIdAndUpdate(id, ...) is equivalent to findOneAndUpdate({ _id: id }, ...).If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set findByIdAndUpdate(this, id, update, callback) findByIdAndUpdate(this, id, update, options, callback) findByIdAndUpdate(this, id, update, options, callback) findByIdAndUpdate(this, id, update, options, callback) findByIdAndUpdate(this, id, update, options, callback) findOne(this, conditions, callback)\tFinds one document. The conditions are cast to their respective SchemaTypes before the command is sent. findOne(this, conditions, projection, callback) findOne(this, conditions, projection, options, callback) findOneAndDelete(this)\tIssues a mongodb findOneAndDelete command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed.Note: same signatures as findOneAndRemove findOneAndDelete(this, conditions, callback) findOneAndDelete(this, conditions, options, callback) findOneAndDelete(this, conditions, options, callback) findOneAndRemove(this)\tIssue a mongodb findAndModify remove command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed else a Query object is returned.If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-setNote: same signatures as findOneAndDelete findOneAndRemove(this, conditions, callback) findOneAndRemove(this, conditions, options, callback) findOneAndRemove(this, conditions, options, callback) findOneAndUpdate(this)\tIssues a mongodb findAndModify update command. Finds a matching document, updates it according to the update arg, passing any options, and returns the found document (if any) to the callback. The query executes immediately if callback is passed else a Query object is returned.+ If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than the deprecated findAndModify(). + https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set findOneAndUpdate(this, conditions, update, callback) findOneAndUpdate(this, conditions, update, options, callback) findOneAndUpdate(this, conditions, update, options, callback) findOneAndUpdate(this, conditions, update, options, callback) findOneAndUpdate(this, conditions, update, options, callback) geoSearch(this, conditions, options, callback)\tImplements $geoSearch functionality for Mongoose hydrate(this, obj)\tShortcut for creating a new Document from existing raw data, pre-saved in the DB. The document returned has no paths marked as modified initially. init(this, callback)\tPerforms any async initialization of this model against MongoDB. This function is called automatically, so you don't need to call it. This function is also idempotent, so you may call it to get back a promise that will resolve when your indexes are finished building as an alternative to MyModel.on('index') insertMany(this, docs, callback)\tShortcut for validating an array of documents and inserting them into MongoDB if they're all valid. This function is faster than .create() because it only sends one operation to the server, rather than one for each document. This function does not trigger save middleware. insertMany(this, docs, options, callback) insertMany(this, doc, callback) insertMany(this, doc, options, callback) mapReduce(this, o, callback)\tExecutes a mapReduce command. populate(this, docs, options, callback)\tPopulates document references. populate(docs, options, callback)\t "},{"title":"goosetyped.model._where","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model._where","content":"","keywords":""},{"title":"Model.$where() method","type":1,"pageTitle":"goosetyped.model._where","url":"docs/api-docs/goosetyped.model._where#modelwhere-method","content":"Creates a Query and specifies a $where condition. Signature: $where<T extends Document>(this: Ctor<T>, argument: string | Function): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model._where","url":"docs/api-docs/goosetyped.model._where#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> argument\tstring | Function\tis a javascript string or anonymous function Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.create","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.create","content":"","keywords":""},{"title":"Model.create() method","type":1,"pageTitle":"goosetyped.model.create","url":"docs/api-docs/goosetyped.model.create#modelcreate-method","content":"Shortcut for saving one or more documents to the database. MyModel.create(docs) does new MyModel(doc).save() for every doc in docs. Triggers the save() hook. Signature: create<T extends Document>(this: Ctor<T>, docs: any[], callback?: (err: any, res: T[]) => void): Promise<T[]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.create","url":"docs/api-docs/goosetyped.model.create#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[] callback\t(err: any, res: T[]) => void\t Returns: Promise<T[]> "},{"title":"goosetyped.model.create_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.create_1","content":"","keywords":""},{"title":"Model.create() method","type":1,"pageTitle":"goosetyped.model.create_1","url":"docs/api-docs/goosetyped.model.create_1#modelcreate-method","content":"Signature: create<T extends Document>(this: Ctor<T>, docs: any[], options?: SaveOptions, callback?: (err: any, res: T[]) => void): Promise<T[]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.create_1","url":"docs/api-docs/goosetyped.model.create_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[] options\tSaveOptions callback\t(err: any, res: T[]) => void\t Returns: Promise<T[]> "},{"title":"goosetyped.model.create_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.create_2","content":"","keywords":""},{"title":"Model.create() method","type":1,"pageTitle":"goosetyped.model.create_2","url":"docs/api-docs/goosetyped.model.create_2#modelcreate-method","content":"Signature: create<T extends Document>(this: Ctor<T>, ...docs: any[]): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.create_2","url":"docs/api-docs/goosetyped.model.create_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[]\t Returns: Promise<T> "},{"title":"goosetyped.model.ctor","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.ctor","content":"","keywords":""},{"title":"Model.ctor() method","type":1,"pageTitle":"goosetyped.model.ctor","url":"docs/api-docs/goosetyped.model.ctor#modelctor-method","content":"Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class Signature: ctor<T extends Document>(this: Ctor<T>, doc: Partial<T>): T; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.ctor","url":"docs/api-docs/goosetyped.model.ctor#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> doc\tPartial<T>\t Returns: T "},{"title":"goosetyped.model.create_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.create_3","content":"","keywords":""},{"title":"Model.create() method","type":1,"pageTitle":"goosetyped.model.create_3","url":"docs/api-docs/goosetyped.model.create_3#modelcreate-method","content":"Signature: create<T extends Document>(this: Ctor<T>, ...docsWithCallback: any[]): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.create_3","url":"docs/api-docs/goosetyped.model.create_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docsWithCallback\tany[]\t Returns: Promise<T> "},{"title":"goosetyped.model.find_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.find_1","content":"","keywords":""},{"title":"Model.find() method","type":1,"pageTitle":"goosetyped.model.find_1","url":"docs/api-docs/goosetyped.model.find_1#modelfind-method","content":"Signature: find<T extends Document>(this: Ctor<T>, conditions: FilterQuery<T>, callback?: (err: any, res: T[]) => void): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.find_1","url":"docs/api-docs/goosetyped.model.find_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tFilterQuery<T> callback\t(err: any, res: T[]) => void\t Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.find","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.find","content":"","keywords":""},{"title":"Model.find() method","type":1,"pageTitle":"goosetyped.model.find","url":"docs/api-docs/goosetyped.model.find#modelfind-method","content":"Finds documents. Signature: find<T extends Document>(this: Ctor<T>, callback?: (err: any, res: T[]) => void): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.find","url":"docs/api-docs/goosetyped.model.find#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> callback\t(err: any, res: T[]) => void\t Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.find_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.find_3","content":"","keywords":""},{"title":"Model.find() method","type":1,"pageTitle":"goosetyped.model.find_3","url":"docs/api-docs/goosetyped.model.find_3#modelfind-method","content":"Signature: find<T extends Document>(this: Ctor<T>, conditions: FilterQuery<T>, projection?: any | null, options?: any | null, callback?: (err: any, res: T[]) => void): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.find_3","url":"docs/api-docs/goosetyped.model.find_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tFilterQuery<T> projection\tany | null options\tany | null callback\t(err: any, res: T[]) => void\t Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.find_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.find_2","content":"","keywords":""},{"title":"Model.find() method","type":1,"pageTitle":"goosetyped.model.find_2","url":"docs/api-docs/goosetyped.model.find_2#modelfind-method","content":"Signature: find<T extends Document>(this: Ctor<T>, conditions: FilterQuery<T>, projection?: any | null, callback?: (err: any, res: T[]) => void): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.find_2","url":"docs/api-docs/goosetyped.model.find_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tFilterQuery<T> projection\tany | null callback\t(err: any, res: T[]) => void\t Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyid_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyid_1","content":"","keywords":""},{"title":"Model.findById() method","type":1,"pageTitle":"goosetyped.model.findbyid_1","url":"docs/api-docs/goosetyped.model.findbyid_1#modelfindbyid-method","content":"Signature: findById<T extends Document>(this: Ctor<T>, id: any | string | number, projection: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyid_1","url":"docs/api-docs/goosetyped.model.findbyid_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | string | number projection\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyid","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyid","content":"","keywords":""},{"title":"Model.findById() method","type":1,"pageTitle":"goosetyped.model.findbyid","url":"docs/api-docs/goosetyped.model.findbyid#modelfindbyid-method","content":"Finds a single document by its _id field. findById(id) is almost* equivalent to findOne({ _id: id }). findById() triggers findOne hooks. Signature: findById<T extends Document>(this: Ctor<T>, id: any | string | number, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyid","url":"docs/api-docs/goosetyped.model.findbyid#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | string | number\tvalue of _id to query by callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidanddelete","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidanddelete","content":"","keywords":""},{"title":"Model.findByIdAndDelete() method","type":1,"pageTitle":"goosetyped.model.findbyidanddelete","url":"docs/api-docs/goosetyped.model.findbyidanddelete#modelfindbyidanddelete-method","content":"Issue a mongodb findOneAndDelete command by a document's _id field. findByIdAndDelete(id, ...) is equivalent to findByIdAndDelete({ _id: id }, ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned. Note: same signatures as findByIdAndRemove Signature: findByIdAndDelete<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidanddelete","url":"docs/api-docs/goosetyped.model.findbyidanddelete#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyid_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyid_2","content":"","keywords":""},{"title":"Model.findById() method","type":1,"pageTitle":"goosetyped.model.findbyid_2","url":"docs/api-docs/goosetyped.model.findbyid_2#modelfindbyid-method","content":"Signature: findById<T extends Document>(this: Ctor<T>, id: any | string | number, projection: any, options: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyid_2","url":"docs/api-docs/goosetyped.model.findbyid_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | string | number projection\tany options\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidanddelete_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidanddelete_1","content":"","keywords":""},{"title":"Model.findByIdAndDelete() method","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_1","url":"docs/api-docs/goosetyped.model.findbyidanddelete_1#modelfindbyidanddelete-method","content":"Signature: findByIdAndDelete<T extends Document>(this: Ctor<T>, id: any | number | string, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_1","url":"docs/api-docs/goosetyped.model.findbyidanddelete_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidanddelete_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidanddelete_2","content":"","keywords":""},{"title":"Model.findByIdAndDelete() method","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_2","url":"docs/api-docs/goosetyped.model.findbyidanddelete_2#modelfindbyidanddelete-method","content":"Signature: findByIdAndDelete<T extends Document>(this: Ctor<T>, id: any | number | string, options: QueryOptions, callback?: (err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_2","url":"docs/api-docs/goosetyped.model.findbyidanddelete_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string options\tQueryOptions callback\t(err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandremove","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandremove","content":"","keywords":""},{"title":"Model.findByIdAndRemove() method","type":1,"pageTitle":"goosetyped.model.findbyidandremove","url":"docs/api-docs/goosetyped.model.findbyidandremove#modelfindbyidandremove-method","content":"Issue a mongodb findAndModify remove command by a document's _id field. findByIdAndRemove(id, ...) is equivalent to findOneAndRemove({ _id: id }, ...). Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed, else a Query object is returned. If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set Note: same signatures as findByIdAndDelete Signature: findByIdAndRemove<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandremove","url":"docs/api-docs/goosetyped.model.findbyidandremove#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidanddelete_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidanddelete_3","content":"","keywords":""},{"title":"Model.findByIdAndDelete() method","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_3","url":"docs/api-docs/goosetyped.model.findbyidanddelete_3#modelfindbyidanddelete-method","content":"Signature: findByIdAndDelete<T extends Document>(this: Ctor<T>, id: any | number | string, options: QueryOptions, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidanddelete_3","url":"docs/api-docs/goosetyped.model.findbyidanddelete_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string options\tQueryOptions callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandremove_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandremove_1","content":"","keywords":""},{"title":"Model.findByIdAndRemove() method","type":1,"pageTitle":"goosetyped.model.findbyidandremove_1","url":"docs/api-docs/goosetyped.model.findbyidandremove_1#modelfindbyidandremove-method","content":"Signature: findByIdAndRemove<T extends Document>(this: Ctor<T>, id: any | number | string, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandremove_1","url":"docs/api-docs/goosetyped.model.findbyidandremove_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandremove_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandremove_2","content":"","keywords":""},{"title":"Model.findByIdAndRemove() method","type":1,"pageTitle":"goosetyped.model.findbyidandremove_2","url":"docs/api-docs/goosetyped.model.findbyidandremove_2#modelfindbyidandremove-method","content":"Signature: findByIdAndRemove<T extends Document>(this: Ctor<T>, id: any | number | string, options: QueryOptions, callback?: (err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandremove_2","url":"docs/api-docs/goosetyped.model.findbyidandremove_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string options\tQueryOptions callback\t(err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandremove_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandremove_3","content":"","keywords":""},{"title":"Model.findByIdAndRemove() method","type":1,"pageTitle":"goosetyped.model.findbyidandremove_3","url":"docs/api-docs/goosetyped.model.findbyidandremove_3#modelfindbyidandremove-method","content":"Signature: findByIdAndRemove<T extends Document>(this: Ctor<T>, id: any | number | string, options: QueryOptions, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandremove_3","url":"docs/api-docs/goosetyped.model.findbyidandremove_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string options\tQueryOptions callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate","url":"docs/api-docs/goosetyped.model.findbyidandupdate#modelfindbyidandupdate-method","content":"Issues a mongodb findAndModify update command by a document's _id field. findByIdAndUpdate(id, ...) is equivalent to findOneAndUpdate({ _id: id }, ...). If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate","url":"docs/api-docs/goosetyped.model.findbyidandupdate#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate_2","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_2","url":"docs/api-docs/goosetyped.model.findbyidandupdate_2#modelfindbyidandupdate-method","content":"Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>, id: any | number | string, update: any, options: { rawResult: true; } & { upsert: true; } & { new: true; } & QueryOptions, callback?: (err: any, res: T) => void): DocumentQuery<T, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_2","url":"docs/api-docs/goosetyped.model.findbyidandupdate_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string update\tany options\t{ rawResult: true; } & { upsert: true; } & { new: true; } & QueryOptions callback\t(err: any, res: T) => void\t Returns: DocumentQuery<T, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate_1","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_1","url":"docs/api-docs/goosetyped.model.findbyidandupdate_1#modelfindbyidandupdate-method","content":"Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>, id: any | number | string, update: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_1","url":"docs/api-docs/goosetyped.model.findbyidandupdate_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string update\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate_3","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_3","url":"docs/api-docs/goosetyped.model.findbyidandupdate_3#modelfindbyidandupdate-method","content":"Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>, id: any | number | string, update: any, options: { upsert: true; new: true; } & QueryOptions, callback?: (err: any, res: mongodb.FindAndModifyWriteOpResultObject<T>) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_3","url":"docs/api-docs/goosetyped.model.findbyidandupdate_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string update\tany options\t{ upsert: true; new: true; } & QueryOptions callback\t(err: any, res: mongodb.FindAndModifyWriteOpResultObject<T>) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate_4","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate_4","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_4","url":"docs/api-docs/goosetyped.model.findbyidandupdate_4#modelfindbyidandupdate-method","content":"Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>, id: any | number | string, update: any, options: { rawResult: true; } & QueryOptions, callback?: (err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_4","url":"docs/api-docs/goosetyped.model.findbyidandupdate_4#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string update\tany options\t{ rawResult: true; } & QueryOptions callback\t(err: any, res: mongodb.FindAndModifyWriteOpResultObject<T | null>) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findbyidandupdate_5","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findbyidandupdate_5","content":"","keywords":""},{"title":"Model.findByIdAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_5","url":"docs/api-docs/goosetyped.model.findbyidandupdate_5#modelfindbyidandupdate-method","content":"Signature: findByIdAndUpdate<T extends Document>(this: Ctor<T>, id: any | number | string, update: any, options: QueryOptions, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findbyidandupdate_5","url":"docs/api-docs/goosetyped.model.findbyidandupdate_5#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> id\tany | number | string update\tany options\tQueryOptions callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findone","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findone","content":"","keywords":""},{"title":"Model.findOne() method","type":1,"pageTitle":"goosetyped.model.findone","url":"docs/api-docs/goosetyped.model.findone#modelfindone-method","content":"Finds one document. The conditions are cast to their respective SchemaTypes before the command is sent. Signature: findOne<T extends Document>(this: Ctor<T>, conditions?: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findone","url":"docs/api-docs/goosetyped.model.findone#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findone_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findone_2","content":"","keywords":""},{"title":"Model.findOne() method","type":1,"pageTitle":"goosetyped.model.findone_2","url":"docs/api-docs/goosetyped.model.findone_2#modelfindone-method","content":"Signature: findOne<T extends Document>(this: Ctor<T>, conditions: any, projection: any, options: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findone_2","url":"docs/api-docs/goosetyped.model.findone_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany projection\tany options\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findone_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findone_1","content":"","keywords":""},{"title":"Model.findOne() method","type":1,"pageTitle":"goosetyped.model.findone_1","url":"docs/api-docs/goosetyped.model.findone_1#modelfindone-method","content":"Signature: findOne<T extends Document>(this: Ctor<T>, conditions: any, projection: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findone_1","url":"docs/api-docs/goosetyped.model.findone_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany projection\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneanddelete","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneanddelete","content":"","keywords":""},{"title":"Model.findOneAndDelete() method","type":1,"pageTitle":"goosetyped.model.findoneanddelete","url":"docs/api-docs/goosetyped.model.findoneanddelete#modelfindoneanddelete-method","content":"Issues a mongodb findOneAndDelete command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed. Note: same signatures as findOneAndRemove Signature: findOneAndDelete<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneanddelete","url":"docs/api-docs/goosetyped.model.findoneanddelete#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneanddelete_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneanddelete_2","content":"","keywords":""},{"title":"Model.findOneAndDelete() method","type":1,"pageTitle":"goosetyped.model.findoneanddelete_2","url":"docs/api-docs/goosetyped.model.findoneanddelete_2#modelfindoneanddelete-method","content":"Signature: findOneAndDelete<T extends Document>(this: Ctor<T>, conditions: any, options: { rawResult: true; } & QueryOptions, callback?: (err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneanddelete_2","url":"docs/api-docs/goosetyped.model.findoneanddelete_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany options\t{ rawResult: true; } & QueryOptions callback\t(err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneanddelete_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneanddelete_1","content":"","keywords":""},{"title":"Model.findOneAndDelete() method","type":1,"pageTitle":"goosetyped.model.findoneanddelete_1","url":"docs/api-docs/goosetyped.model.findoneanddelete_1#modelfindoneanddelete-method","content":"Signature: findOneAndDelete<T extends Document>(this: Ctor<T>, conditions: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneanddelete_1","url":"docs/api-docs/goosetyped.model.findoneanddelete_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandremove","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandremove","content":"","keywords":""},{"title":"Model.findOneAndRemove() method","type":1,"pageTitle":"goosetyped.model.findoneandremove","url":"docs/api-docs/goosetyped.model.findoneandremove#modelfindoneandremove-method","content":"Issue a mongodb findAndModify remove command. Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if callback is passed else a Query object is returned. If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than deprecated findAndModify(). https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set Note: same signatures as findOneAndDelete Signature: findOneAndRemove<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandremove","url":"docs/api-docs/goosetyped.model.findoneandremove#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneanddelete_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneanddelete_3","content":"","keywords":""},{"title":"Model.findOneAndDelete() method","type":1,"pageTitle":"goosetyped.model.findoneanddelete_3","url":"docs/api-docs/goosetyped.model.findoneanddelete_3#modelfindoneanddelete-method","content":"Signature: findOneAndDelete<T extends Document>(this: Ctor<T>, conditions: any, options: QueryOptions, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneanddelete_3","url":"docs/api-docs/goosetyped.model.findoneanddelete_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany options\tQueryOptions callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandremove_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandremove_2","content":"","keywords":""},{"title":"Model.findOneAndRemove() method","type":1,"pageTitle":"goosetyped.model.findoneandremove_2","url":"docs/api-docs/goosetyped.model.findoneandremove_2#modelfindoneandremove-method","content":"Signature: findOneAndRemove<T extends Document>(this: Ctor<T>, conditions: any, options: { rawResult: true; } & QueryOptions, callback?: (err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandremove_2","url":"docs/api-docs/goosetyped.model.findoneandremove_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany options\t{ rawResult: true; } & QueryOptions callback\t(err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandremove_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandremove_1","content":"","keywords":""},{"title":"Model.findOneAndRemove() method","type":1,"pageTitle":"goosetyped.model.findoneandremove_1","url":"docs/api-docs/goosetyped.model.findoneandremove_1#modelfindoneandremove-method","content":"Signature: findOneAndRemove<T extends Document>(this: Ctor<T>, conditions: any, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandremove_1","url":"docs/api-docs/goosetyped.model.findoneandremove_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate","url":"docs/api-docs/goosetyped.model.findoneandupdate#modelfindoneandupdate-method","content":"Issues a mongodb findAndModify update command. Finds a matching document, updates it according to the update arg, passing any options, and returns the found document (if any) to the callback. The query executes immediately if callback is passed else a Query object is returned. If mongoose option 'useFindAndModify': set to false it uses native findOneAndUpdate() rather than the deprecated findAndModify(). + https://mongoosejs.com/docs/api.html\\#mongoose\\_Mongoose-set Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate","url":"docs/api-docs/goosetyped.model.findoneandupdate#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T>\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandremove_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandremove_3","content":"","keywords":""},{"title":"Model.findOneAndRemove() method","type":1,"pageTitle":"goosetyped.model.findoneandremove_3","url":"docs/api-docs/goosetyped.model.findoneandremove_3#modelfindoneandremove-method","content":"Signature: findOneAndRemove<T extends Document>(this: Ctor<T>, conditions: any, options: QueryOptions, callback?: (err: any, res: T | null) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandremove_3","url":"docs/api-docs/goosetyped.model.findoneandremove_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany options\tQueryOptions callback\t(err: any, res: T | null) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate_2","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate_2","url":"docs/api-docs/goosetyped.model.findoneandupdate_2#modelfindoneandupdate-method","content":"Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>, conditions: any, update: any, options: { rawResult: true; } & { upsert: true; new: true; } & QueryOptions, callback?: (err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T>, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate_2","url":"docs/api-docs/goosetyped.model.findoneandupdate_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany update\tany options\t{ rawResult: true; } & { upsert: true; new: true; } & QueryOptions callback\t(err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T>, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate_3","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate_3","url":"docs/api-docs/goosetyped.model.findoneandupdate_3#modelfindoneandupdate-method","content":"Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>, conditions: any, update: any, options: { upsert: true; new: true; } & QueryOptions, callback?: (err: any, doc: T, res: any) => void): DocumentQuery<T, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate_3","url":"docs/api-docs/goosetyped.model.findoneandupdate_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany update\tany options\t{ upsert: true; new: true; } & QueryOptions callback\t(err: any, doc: T, res: any) => void\t Returns: DocumentQuery<T, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate_1","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate_1","url":"docs/api-docs/goosetyped.model.findoneandupdate_1#modelfindoneandupdate-method","content":"Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>, conditions: any, update: any, callback?: (err: any, doc: T | null, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate_1","url":"docs/api-docs/goosetyped.model.findoneandupdate_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany update\tany callback\t(err: any, doc: T | null, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate_4","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate_4","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate_4","url":"docs/api-docs/goosetyped.model.findoneandupdate_4#modelfindoneandupdate-method","content":"Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>, conditions: any, update: any, options: { rawResult: true; } & QueryOptions, callback?: (err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate_4","url":"docs/api-docs/goosetyped.model.findoneandupdate_4#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany update\tany options\t{ rawResult: true; } & QueryOptions callback\t(err: any, doc: mongodb.FindAndModifyWriteOpResultObject<T | null>, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.findoneandupdate_5","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.findoneandupdate_5","content":"","keywords":""},{"title":"Model.findOneAndUpdate() method","type":1,"pageTitle":"goosetyped.model.findoneandupdate_5","url":"docs/api-docs/goosetyped.model.findoneandupdate_5#modelfindoneandupdate-method","content":"Signature: findOneAndUpdate<T extends Document>(this: Ctor<T>, conditions: any, update: any, options: QueryOptions, callback?: (err: any, doc: T | null, res: any) => void): DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.findoneandupdate_5","url":"docs/api-docs/goosetyped.model.findoneandupdate_5#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany update\tany options\tQueryOptions callback\t(err: any, doc: T | null, res: any) => void\t Returns: DocumentQuery<T | null, T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.geosearch","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.geosearch","content":"","keywords":""},{"title":"Model.geoSearch() method","type":1,"pageTitle":"goosetyped.model.geosearch","url":"docs/api-docs/goosetyped.model.geosearch#modelgeosearch-method","content":"Implements $geoSearch functionality for Mongoose Signature: geoSearch<T extends Document>(this: Ctor<T>, conditions: any, options: { near: number[]; maxDistance: number; limit?: number; lean?: boolean; }, callback?: (err: any, res: T[]) => void): DocumentQuery<T[], T, QueryHelpers> & QueryHelpers; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.geosearch","url":"docs/api-docs/goosetyped.model.geosearch#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> conditions\tany\tan object that specifies the match condition (required) options\t{ near: number[]; maxDistance: number; limit?: number; lean?: boolean; }\tfor the geoSearch, some (near, maxDistance) are required callback\t(err: any, res: T[]) => void\toptional callback Returns: DocumentQuery<T[], T, QueryHelpers> & QueryHelpers "},{"title":"goosetyped.model.init","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.init","content":"","keywords":""},{"title":"Model.init() method","type":1,"pageTitle":"goosetyped.model.init","url":"docs/api-docs/goosetyped.model.init#modelinit-method","content":"Performs any async initialization of this model against MongoDB. This function is called automatically, so you don't need to call it. This function is also idempotent, so you may call it to get back a promise that will resolve when your indexes are finished building as an alternative to MyModel.on('index') Signature: init<T extends Document>(this: Ctor<T>, callback?: (err: any) => void): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.init","url":"docs/api-docs/goosetyped.model.init#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> callback\t(err: any) => void\toptional Returns: Promise<T> "},{"title":"goosetyped.model.hydrate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.hydrate","content":"","keywords":""},{"title":"Model.hydrate() method","type":1,"pageTitle":"goosetyped.model.hydrate","url":"docs/api-docs/goosetyped.model.hydrate#modelhydrate-method","content":"Shortcut for creating a new Document from existing raw data, pre-saved in the DB. The document returned has no paths marked as modified initially. Signature: hydrate<T extends Document>(this: Ctor<T>, obj: any): T; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.hydrate","url":"docs/api-docs/goosetyped.model.hydrate#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> obj\tany\t Returns: T "},{"title":"goosetyped.model.insertmany","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.insertmany","content":"","keywords":""},{"title":"Model.insertMany() method","type":1,"pageTitle":"goosetyped.model.insertmany","url":"docs/api-docs/goosetyped.model.insertmany#modelinsertmany-method","content":"Shortcut for validating an array of documents and inserting them into MongoDB if they're all valid. This function is faster than .create() because it only sends one operation to the server, rather than one for each document. This function does not trigger save middleware. Signature: insertMany<T extends Document>(this: Ctor<T>, docs: any[], callback?: (error: any, docs: T[]) => void): Promise<T[]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.insertmany","url":"docs/api-docs/goosetyped.model.insertmany#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[]\tDocuments to insert. callback\t(error: any, docs: T[]) => void\t Returns: Promise<T[]> "},{"title":"goosetyped.model.insertmany_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.insertmany_1","content":"","keywords":""},{"title":"Model.insertMany() method","type":1,"pageTitle":"goosetyped.model.insertmany_1","url":"docs/api-docs/goosetyped.model.insertmany_1#modelinsertmany-method","content":"Signature: insertMany<T extends Document>(this: Ctor<T>, docs: any[], options?: { ordered?: boolean; rawResult?: boolean; } & InsertManyOptions, callback?: (error: any, docs: T[]) => void): Promise<T[]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.insertmany_1","url":"docs/api-docs/goosetyped.model.insertmany_1#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[] options\t{ ordered?: boolean; rawResult?: boolean; } & InsertManyOptions callback\t(error: any, docs: T[]) => void\t Returns: Promise<T[]> "},{"title":"goosetyped.model.insertmany_2","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.insertmany_2","content":"","keywords":""},{"title":"Model.insertMany() method","type":1,"pageTitle":"goosetyped.model.insertmany_2","url":"docs/api-docs/goosetyped.model.insertmany_2#modelinsertmany-method","content":"Signature: insertMany<T extends Document>(this: Ctor<T>, doc: any, callback?: (error: any, doc: T) => void): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.insertmany_2","url":"docs/api-docs/goosetyped.model.insertmany_2#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> doc\tany callback\t(error: any, doc: T) => void\t Returns: Promise<T> "},{"title":"goosetyped.model.insertmany_3","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.insertmany_3","content":"","keywords":""},{"title":"Model.insertMany() method","type":1,"pageTitle":"goosetyped.model.insertmany_3","url":"docs/api-docs/goosetyped.model.insertmany_3#modelinsertmany-method","content":"Signature: insertMany<T extends Document>(this: Ctor<T>, doc: any, options?: { ordered?: boolean; rawResult?: boolean; } & InsertManyOptions, callback?: (error: any, doc: T) => void): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.insertmany_3","url":"docs/api-docs/goosetyped.model.insertmany_3#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> doc\tany options\t{ ordered?: boolean; rawResult?: boolean; } & InsertManyOptions callback\t(error: any, doc: T) => void\t Returns: Promise<T> "},{"title":"goosetyped.model.populate","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.populate","content":"","keywords":""},{"title":"Model.populate() method","type":1,"pageTitle":"goosetyped.model.populate","url":"docs/api-docs/goosetyped.model.populate#modelpopulate-method","content":"Populates document references. Signature: populate<T extends Document>(this: Ctor<T>, docs: any[], options: PopulateOptions | PopulateOptions[], callback?: (err: any, res: T[]) => void): Promise<T[]>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.populate","url":"docs/api-docs/goosetyped.model.populate#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> docs\tany[]\tEither a single document or array of documents to populate. options\tPopulateOptions | PopulateOptions[]\tA hash of key/val (path, options) used for population. callback\t(err: any, res: T[]) => void\tOptional callback, executed upon completion. Receives err and the doc(s). Returns: Promise<T[]> "},{"title":"goosetyped.model.mapreduce","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.mapreduce","content":"","keywords":""},{"title":"Model.mapReduce() method","type":1,"pageTitle":"goosetyped.model.mapreduce","url":"docs/api-docs/goosetyped.model.mapreduce#modelmapreduce-method","content":"Executes a mapReduce command. Signature: mapReduce<Key, Value, T extends Document>(this: Ctor<T>, o: MapReduceOptions<T, Key, Value>, callback?: (err: any, res: any) => void): Promise<any>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.mapreduce","url":"docs/api-docs/goosetyped.model.mapreduce#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> o\tMapReduceOptions<T, Key, Value>\tan object specifying map-reduce options callback\t(err: any, res: any) => void\t Returns: Promise<any> "},{"title":"goosetyped.objectid","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.objectid","content":"","keywords":""},{"title":"ObjectId class","type":1,"pageTitle":"goosetyped.objectid","url":"docs/api-docs/goosetyped.objectid#objectid-class","content":"Signature: export declare class ObjectId extends String Copy Extends: String "},{"title":"goosetyped.model.populate_1","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.model.populate_1","content":"","keywords":""},{"title":"Model.populate() method","type":1,"pageTitle":"goosetyped.model.populate_1","url":"docs/api-docs/goosetyped.model.populate_1#modelpopulate-method","content":"Signature: populate<T>(docs: any, options: PopulateOptions | PopulateOptions[], callback?: (err: any, res: T) => void): Promise<T>; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.model.populate_1","url":"docs/api-docs/goosetyped.model.populate_1#parameters","content":"Parameter\tType\tDescriptiondocs\tany options\tPopulateOptions | PopulateOptions[] callback\t(err: any, res: T) => void\t Returns: Promise<T> "},{"title":"goosetyped.propertydecoratorof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.propertydecoratorof","content":"","keywords":""},{"title":"PropertyDecoratorOf type","type":1,"pageTitle":"goosetyped.propertydecoratorof","url":"docs/api-docs/goosetyped.propertydecoratorof#propertydecoratorof-type","content":"Signature: export declare type PropertyDecoratorOf<T> = <Z extends Partial<Record<K, T>>, K extends string>(target: Z, key: K) => void; Copy "},{"title":"goosetyped.resource","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource","content":"","keywords":""},{"title":"Resource interface","type":1,"pageTitle":"goosetyped.resource","url":"docs/api-docs/goosetyped.resource#resource-interface","content":"Signature: export interface Resource<T = unknown> Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.resource","url":"docs/api-docs/goosetyped.resource#properties","content":"Property\tType\tDescription[GT_SUB_DOCUMENT]\tboolean prototype\tSubDocument & T schema\tSchema\t "},{"title":"Methods","type":1,"pageTitle":"goosetyped.resource","url":"docs/api-docs/goosetyped.resource#methods","content":"Method\tDescription(new)(doc) ctor(this, doc)\tLike create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class "},{"title":"goosetyped.resource._gt_sub_document_","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource._gt_sub_document_","content":"","keywords":""},{"title":"Resource.[GT_SUB_DOCUMENT] property","type":1,"pageTitle":"goosetyped.resource._gt_sub_document_","url":"docs/api-docs/goosetyped.resource._gt_sub_document_#resourcegt_sub_document-property","content":"Signature: [GT_SUB_DOCUMENT]: boolean; Copy "},{"title":"goosetyped.resource._new_","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource._new_","content":"","keywords":""},{"title":"Resource.(new)","type":1,"pageTitle":"goosetyped.resource._new_","url":"docs/api-docs/goosetyped.resource._new_#resourcenew","content":"Signature: new (doc?: any): SubDocument & T; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.resource._new_","url":"docs/api-docs/goosetyped.resource._new_#parameters","content":"Parameter\tType\tDescriptiondoc\tany\t Returns: SubDocument & T "},{"title":"goosetyped.resource.ctor","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource.ctor","content":"","keywords":""},{"title":"Resource.ctor() method","type":1,"pageTitle":"goosetyped.resource.ctor","url":"docs/api-docs/goosetyped.resource.ctor#resourcector-method","content":"Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class Signature: ctor<T extends SubDocument>(this: Ctor<T>, doc: Partial<T>): T; Copy "},{"title":"Parameters","type":1,"pageTitle":"goosetyped.resource.ctor","url":"docs/api-docs/goosetyped.resource.ctor#parameters","content":"Parameter\tType\tDescriptionthis\tCtor<T> doc\tPartial<T>\t Returns: T "},{"title":"goosetyped.resource.prototype","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource.prototype","content":"","keywords":""},{"title":"Resource.prototype property","type":1,"pageTitle":"goosetyped.resource.prototype","url":"docs/api-docs/goosetyped.resource.prototype#resourceprototype-property","content":"Signature: prototype: SubDocument & T; Copy "},{"title":"goosetyped.resource.schema","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.resource.schema","content":"","keywords":""},{"title":"Resource.schema property","type":1,"pageTitle":"goosetyped.resource.schema","url":"docs/api-docs/goosetyped.resource.schema#resourceschema-property","content":"Signature: schema: Schema; Copy "},{"title":"goosetyped.stripdoc","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.stripdoc","content":"","keywords":""},{"title":"StripDoc type","type":1,"pageTitle":"goosetyped.stripdoc","url":"docs/api-docs/goosetyped.stripdoc#stripdoc-type","content":"A type helper that strips away all members of the mongoose Document instance from the type Signature: export declare type StripDoc<T extends Document, TExcept extends keyof Document = never> = Subtract<T, Omit<Document, TExcept>>; Copy "},{"title":"Example","type":1,"pageTitle":"goosetyped.stripdoc","url":"docs/api-docs/goosetyped.stripdoc#example","content":"export class Message extends GtModel() { id: string; text: string; myMethod(): void { } } const msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model) const m: StripDoc<Message>; // now m has only \"myMethod\" & \"text\" but not \"id\" // Since \"id\" also exists in Document, to include it we need to exclude it from the strip. const m: StripDoc<Message, 'id'>; // now m has \"id\", \"myMethod\" & \"text\" Copy "},{"title":"goosetyped.staticmethoddecoratorof","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.staticmethoddecoratorof","content":"","keywords":""},{"title":"StaticMethodDecoratorOf type","type":1,"pageTitle":"goosetyped.staticmethoddecoratorof","url":"docs/api-docs/goosetyped.staticmethoddecoratorof#staticmethoddecoratorof-type","content":"Signature: export declare type StaticMethodDecoratorOf<TArgs extends [any] | [any, any] | [any, any, any] | [any, any, any, any] | [any, any, any, any, any] | [any, any, any, any, any, any] | [any, any, any, any, any, any, any] = never, TReturn = void> = <Z extends Function & Partial<Record<K, (...args: TArgs) => TReturn>>, K extends string>(target: Z, key: K, descriptor: TypedPropertyDescriptor<(...args: TArgs) => TReturn>) => TypedPropertyDescriptor<(...args: TArgs) => TReturn> | void; Copy "},{"title":"goosetyped.subdocument","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.subdocument","content":"","keywords":""},{"title":"SubDocument interface","type":1,"pageTitle":"goosetyped.subdocument","url":"docs/api-docs/goosetyped.subdocument#subdocument-interface","content":"Signature: export interface SubDocument Copy "},{"title":"goosetyped.stripdocolumns","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.stripdocolumns","content":"","keywords":""},{"title":"StripDoColumns type","type":1,"pageTitle":"goosetyped.stripdocolumns","url":"docs/api-docs/goosetyped.stripdocolumns#stripdocolumns-type","content":"A type helper that strips away all members of the mongoose Document instance from the type as well as all methods. Signature: export declare type StripDoColumns<T extends Document, TExcept extends keyof Document = never> = Pick<T, SetDifference<NonFunctionKeys<T>, Exclude<keyof Document, TExcept>>>; Copy "},{"title":"Example","type":1,"pageTitle":"goosetyped.stripdocolumns","url":"docs/api-docs/goosetyped.stripdocolumns#example","content":"export class Message extends GtModel() { id: string; text: string; myMethod(): void { } } const msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model) const m: StripDoColumns<Message>; // now m has only \"text\" but not \"id\" // Since \"id\" also exists in Document, to include it we need to exclude it from the strip. const m: StripDoColumns<Message, 'id'>; // now m has \"id\" & \"text\" Copy "},{"title":"goosetyped.type","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.type","content":"","keywords":""},{"title":"Type type","type":1,"pageTitle":"goosetyped.type","url":"docs/api-docs/goosetyped.type#type-type","content":"Signature: export declare type Type<TInstance, TStatic> = Ctor<TInstance> & TStatic; Copy References: [Ctor](/node/goosetyped/docs/api-docs/goosetyped.ctor) "},{"title":"goosetyped.validator","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validator","content":"","keywords":""},{"title":"Validator type","type":1,"pageTitle":"goosetyped.validator","url":"docs/api-docs/goosetyped.validator#validator-type","content":"https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate Signature: export declare type Validator = RegExp | ValidatorFn | ValidatorOpts | ValidatorOpts[]; Copy References: [ValidatorFn](/node/goosetyped/docs/api-docs/goosetyped.validatorfn), [ValidatorOpts](/node/goosetyped/docs/api-docs/goosetyped.validatoropts) "},{"title":"goosetyped.validatorfn","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatorfn","content":"","keywords":""},{"title":"ValidatorFn type","type":1,"pageTitle":"goosetyped.validatorfn","url":"docs/api-docs/goosetyped.validatorfn#validatorfn-type","content":"Signature: export declare type ValidatorFn<T = any> = (value: T) => boolean | Promise<boolean>; Copy "},{"title":"goosetyped.validatormessagecontext.path","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatormessagecontext.path","content":"","keywords":""},{"title":"ValidatorMessageContext.path property","type":1,"pageTitle":"goosetyped.validatormessagecontext.path","url":"docs/api-docs/goosetyped.validatormessagecontext.path#validatormessagecontextpath-property","content":"Signature: path: string; Copy "},{"title":"goosetyped.validatormessagecontext","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatormessagecontext","content":"","keywords":""},{"title":"ValidatorMessageContext interface","type":1,"pageTitle":"goosetyped.validatormessagecontext","url":"docs/api-docs/goosetyped.validatormessagecontext#validatormessagecontext-interface","content":"Signature: export interface ValidatorMessageContext Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.validatormessagecontext","url":"docs/api-docs/goosetyped.validatormessagecontext#properties","content":"Property\tType\tDescriptionpath\tstring reason\tstring | Error value\tany\t "},{"title":"goosetyped.validatormessagecontext.reason","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatormessagecontext.reason","content":"","keywords":""},{"title":"ValidatorMessageContext.reason property","type":1,"pageTitle":"goosetyped.validatormessagecontext.reason","url":"docs/api-docs/goosetyped.validatormessagecontext.reason#validatormessagecontextreason-property","content":"Signature: reason: string | Error; Copy "},{"title":"goosetyped.validatormessagecontext.value","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatormessagecontext.value","content":"","keywords":""},{"title":"ValidatorMessageContext.value property","type":1,"pageTitle":"goosetyped.validatormessagecontext.value","url":"docs/api-docs/goosetyped.validatormessagecontext.value#validatormessagecontextvalue-property","content":"Signature: value: any; Copy "},{"title":"goosetyped.validatoropts","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatoropts","content":"","keywords":""},{"title":"ValidatorOpts interface","type":1,"pageTitle":"goosetyped.validatoropts","url":"docs/api-docs/goosetyped.validatoropts#validatoropts-interface","content":"Signature: export interface ValidatorOpts<T = any> Copy "},{"title":"Properties","type":1,"pageTitle":"goosetyped.validatoropts","url":"docs/api-docs/goosetyped.validatoropts#properties","content":"Property\tType\tDescriptionmessage\tstring | ((props: ValidatorMessageContext) => string) validator\tValidatorFn<T>\t "},{"title":"goosetyped.validatoropts.message","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatoropts.message","content":"","keywords":""},{"title":"ValidatorOpts.message property","type":1,"pageTitle":"goosetyped.validatoropts.message","url":"docs/api-docs/goosetyped.validatoropts.message#validatoroptsmessage-property","content":"Signature: message?: string | ((props: ValidatorMessageContext) => string); Copy "},{"title":"goosetyped.validatoropts.validator","type":0,"sectionRef":"#","url":"docs/api-docs/goosetyped.validatoropts.validator","content":"","keywords":""},{"title":"ValidatorOpts.validator property","type":1,"pageTitle":"goosetyped.validatoropts.validator","url":"docs/api-docs/goosetyped.validatoropts.validator#validatoroptsvalidator-property","content":"Signature: validator: ValidatorFn<T>; Copy "},{"title":"index","type":0,"sectionRef":"#","url":"docs/api-docs/index","content":"","keywords":""},{"title":"API Reference","type":1,"pageTitle":"index","url":"docs/api-docs/index#api-reference","content":""},{"title":"Packages","type":1,"pageTitle":"index","url":"docs/api-docs/index#packages","content":"Package\tDescription@pebula/goosetyped\t "},{"title":"Documents And SubDocuments","type":0,"sectionRef":"#","url":"docs/basics/documents-and-sub-documents","content":"","keywords":""},{"title":"Document Options (metadata)","type":1,"pageTitle":"Documents And SubDocuments","url":"docs/basics/documents-and-sub-documents#document-options-metadata","content":"Most of the metadata options are straight-forward and well documented in the Api Docs. For depp inspection check GtDocumentMetadataArgs & GtSubDocumentMetadataArgs We will cover some of them here: GtSubDocumentMetadataArgs.noId# This will disable the automatic _id set for every sub document. Read more here... caution Since Document model must have an id, this is only valid for SubDocuments GtDocumentMetadataArgs.connectionId# The connection id to use when creating the model. When not set, GooseTyped will use the default connection. When set, GooseTyped will use the registered connection to compile the model at the defined stage in the connections life. import mongoose from 'mongoose'; import { GtDocument, GtModel, GtColumn, addConnection } from '@pebula/goosetyped'; @GtDocument({ connectionId: 'myConnection', }) export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Copy At this point the model class is available, but it is not connect to mongoose so no point of creating new instances of it... const connection = mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () => connection); await ready; Copy Once ready resolves we have a guarantee that all models are compiled and bound to the connection. note Deffered model compilation is explained in more detail in the Async Model Compilation. "},{"title":"Metadata","type":0,"sectionRef":"#","url":"docs/basics/metadata","content":"","keywords":""},{"title":"Mongoose metadata","type":1,"pageTitle":"Metadata","url":"docs/basics/metadata#mongoose-metadata","content":"In mongoose we define all the metadata in the Schema class. Column metadata is defined by providing a SchemaDefinition object.Metadata about the model is defined by providing a SchemaOptions. import { SchemaDefinition, SchemaOptions, Schema } from 'mongoose'; const columnMetadata: SchemaDefinition = { name: Schema.Types.String, }; const modelMetadata: SchemaOptions = { collection: 'data', }; var dataSchema = new Schema(columnMetadata, modelMetadata); Copy "},{"title":"GooseTyped metadata","type":1,"pageTitle":"Metadata","url":"docs/basics/metadata#goosetyped-metadata","content":"In GooseTyped metadata is defined as part of the class definition, as an additional parameter sent to decorators. In most cases the decorators does not require additional metadata and provide a default behavior that will usually suffice, however if you wish to change it you can. You'll notice that some metadata options will match directly to mongoose options and some will not. GooseTyped goal is to simplify how models are defined and it abstracts away some of the options to reduce the complexity. For example, the skipVersioning option is set on the model options in mongoose but in GooseTyped it is set per column and GooseTyped will created the proper definition for the entire model from all of the column. "},{"title":"Columns","type":0,"sectionRef":"#","url":"docs/basics/columns","content":"","keywords":""},{"title":"Column Options (metadata)","type":1,"pageTitle":"Columns","url":"docs/basics/columns#column-options-metadata","content":"We can add additional metadata to columns: import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn({ required: true, }) name: string; @GtColumn({ validate: value => value > 0, }) age: number; @GtColumn({ enum: ['male', 'female', 'other'], default: 'other' }) gender: 'male' | 'female' | 'other'; } Copy You can review all of the metadata options in the API docs for GtColumnMetadataArgs<T>. "},{"title":"Column Type","type":1,"pageTitle":"Columns","url":"docs/basics/columns#column-type","content":"TypeScript emits the type used for every column so GooseType can use that to automatically define the proper type with mongoose. export class Customer { @GtColumn() age: number; } Copy In the example above GooseType will identify that the type is a number and will use mongoose.Schema.Types.Number as the type for the column. "},{"title":"Explicit type definition","type":1,"pageTitle":"Columns","url":"docs/basics/columns#explicit-type-definition","content":"There are some scenarios in which typescript's type system is not able to provide a type definition and an explicit type definition is required. This usually happen when: Generics is used to define the type (e.g. Array<string>, Map<number>, etc...)The type is unknown at the time it is defined (usually due to cyclic reference) warning GooseType will throw an error when these scenarios occur and are not handled. Additionally, it might be that would want to customize the type defined. To define a custom type we use GtColumnMetadataArgs.typewhich accepts one of: Schematypeof SchemaType (e.g mongoose.Schema.Types.Number)A function that returns a GooseTyped model or resource (the classes of a document or sub-document). We will not go into depth on the first two options, they are straight forward and we recommend not to use them unless there is really no solution to your problem. The last option is nothing but a simple arrow function that returns the type for this column, let's review some examples: Array# This covers the 1st scenario which TS can not resolve the type for us: export class Person { @GtColumn({ type: () => String, }) friends: string[]; @GtColumn({ type: () => Date, }) importantDates: Array<Date>; } Copy tip We return the actual generic type, String and not Array<string>. TypeScript already resolves the type to Array we only need the internal type. Map# Again, same as Array above, TS can not resolve the subject type of the Map, it will only resolve Map. export class Person { @GtColumn({ type: () => Number, }) map: Map<number>; } Copy Circular or Undefined# // module: person.ts export class Person { @GtColumn({ type: () => Address, }) address: Address; } // module: address.ts export class Address { @GtColumn({ type: () => Person, }) resident: Person; } Copy At the time when the class is defined both modules (person & address) refer to each other. This means that the type will be undefined and will get populated later once both classes are exported. TypeScript does not account for that and will mark the type for the property as undefined. To solve this we use the function that returns the type. We will resolve the type after both classes are resolved so we will get the proper value. note Circular reference types requires deffered model initialization described in the advanced section. "},{"title":"Mixins","type":0,"sectionRef":"#","url":"docs/basics/mixins","content":"Mixins are the perfect tools to apply functionality and are very similar to mongoose plugins. Let's say we want to add createDate and updateDate columns to our Customer model: The straight-forward approach would ne to use the @GtTimestampCreated & @GtTimestampUpdated decorators in the class: import { GtDocument, GtModel, GtTimestampCreated, GtTimestampUpdated } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtTimestampCreated() createDate: Date; @GtTimestampUpdated() updateDate: Date; } Copy tip @GtTimestampCreated & @GtTimestampUpdated are utility decorators that expose mongoose's built-in timestamps This is ok but we most probably want to add this capability to other models in our application but not all of them. We can use inheritance but this will limit our possibility of composing capabilities together... Instead, we define a class (does not have to be a document or sub-document...) with the capability we want: export class TimestampMixin { @GtTimestampCreated() createDate: Date; @GtTimestampUpdated() updateDate: Date; } Copy Now we can mix it into our models where needed: @GtDocument() export class Customer extends GtModel(TimestampMixin) { @GtColumn() name: string; @GtColumn() age: number; updateDate: Date; } Copy Ohh, we forgot, the Customer model also needs an Owner mixin: export class OwnerMixin { @GtColumn() owner: string; } Copy Now we can mix it into our models where needed: @GtDocument() export class Customer extends GtModel(TimestampMixin, OwnerMixin) { @GtColumn() name: string; @GtColumn() age: number; updateDate: Date; } Copy","keywords":""},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"docs/getting-started/basic-example","content":"Let's start with a simple model: import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Copy Here we have a Customer class with a name and age columns. We decorate each column with the @GtColumn decorator to declare that the property is mapped to a column in the DB.We decorate each model with the @GtDocument decorator to declare that this is a model.We extend the Customer class with the expression GtModel() which is extending mongoose's Model class with a bit of GooseTyped flavor. To qualify as a model a class must be decorated with @GtDocument and extend GtModel(). GooseTyped distinguish between documents and sub-documents. This is","keywords":""},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/getting-started/installation","content":"To get started install the package: YarnNPM $ yarn add @pebula/goosetyped Copy info GooseTyped requires mongoose and it's pre-requisites installed, it does not install them for you. Now, just start defining models using the tools provided by GooseTyped. By default, all models are attached to the default mongoose connection but you can assign models to a specific connection which is also how you can implement deffered model compilation, more on this in future chapters...","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/getting-started/introduction","content":"","keywords":""},{"title":"One Model One Schema","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#one-model-one-schema","content":"With GooseTyped you no longer need to define a schema and then create a model class from it, everything is streamlined into one single class. import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Copy This is very powerful when working in TypeScript as no sorcery is required to properly export your model class types. "},{"title":"Not an ORM","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#not-an-orm","content":"GooseTyped is not an ORM by itself and does not provide additional functionality on-top of mongoose. It is a wrapper around mongoose which provide modern tools to define and and configure the DB schema which is more adapted to TypeScript and modern ORM libraries. "},{"title":"Utilities","type":0,"sectionRef":"#","url":"docs/utilities/utilities","content":"","keywords":""},{"title":"getSchemaOf","type":1,"pageTitle":"Utilities","url":"docs/utilities/utilities#getschemaof","content":"Returns the mongoose schema for the provided Model / Resource. [Link] "},{"title":"getDiscriminatorKeyFor","type":1,"pageTitle":"Utilities","url":"docs/utilities/utilities#getdiscriminatorkeyfor","content":"Returns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value. [Link] "},{"title":"getDiscriminatorKeysOf","type":1,"pageTitle":"Utilities","url":"docs/utilities/utilities#getdiscriminatorkeysof","content":"Returns the discriminator keys for the provided Model / Resource. [Link] "},{"title":"findModels","type":1,"pageTitle":"Utilities","url":"docs/utilities/utilities#findmodels","content":"Return all Models / Resources registered in GooseTyped. [Link] "},{"title":"getEnum","type":1,"pageTitle":"Utilities","url":"docs/utilities/utilities#getenum","content":"Returns the list of enums registered for a path in a Model / Resource. [Link] "}]