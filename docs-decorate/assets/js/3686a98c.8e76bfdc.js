"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[871],{1379:(e,n,r)=>{r.r(n),r.d(n,{contentTitle:()=>s,default:()=>i,frontMatter:()=>o,toc:()=>d});var t=r(4848),c=r(8453);const o={},s=void 0,d=[{value:"DocumentQuery.replaceOne() method",id:"documentqueryreplaceone-method",level:2},{value:"Parameters",id:"parameters",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"./index.md",children:"Home"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.md",children:"@pebula/goosetyped"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.documentquery.md",children:"DocumentQuery"})," > ",(0,t.jsx)(n.a,{href:"./goosetyped.documentquery.replaceone.md",children:"replaceOne"})]}),"\n",(0,t.jsx)(n.h2,{id:"documentqueryreplaceone-method",children:"DocumentQuery.replaceOne() method"}),"\n",(0,t.jsxs)(n.p,{children:["Declare and/or execute this query as a replaceOne() operation. Same as ",(0,t.jsx)(n.code,{children:"update()"}),", except MongoDB will replace the existing document and will not accept any [atomic](",(0,t.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/%5C#pattern",children:"https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/\\#pattern"}),") operators (",(0,t.jsx)(n.code,{children:"$set"}),", etc.)"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"replaceOne(filter?: M.FilterQuery<RawDocType>, replacement?: DocType | M.AnyObject, options?: M.QueryOptions<DocType> | null): DocumentQuery<any, DocType, THelpers, RawDocType, 'replaceOne'> & THelpers;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Parameter"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Type"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Description"})})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"filter"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"M.FilterQuery<RawDocType>"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(Optional)"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"replacement"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"DocType | M.AnyObject"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(Optional)"})})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"options"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"M.QueryOptions<DocType> | null"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"(Optional)"})})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"./goosetyped.documentquery.md",children:"DocumentQuery"}),"<any, DocType, THelpers, RawDocType, 'replaceOne'> & THelpers"]})]})}function i(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var t=r(6540);const c={},o=t.createContext(c);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);