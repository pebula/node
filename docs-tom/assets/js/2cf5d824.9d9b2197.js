"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[723],{307:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=s(4848),r=s(8453);s(6640);const a={id:"schema",title:"Schema",sidebar_label:"2. Schema"},i=void 0,o={id:"basics/schema",title:"Schema",description:"A schema is a collection of metadata objects that describe the structure of a type/class/object.",source:"@site/docs/basics/schema.md",sourceDirName:"basics",slug:"/basics/schema",permalink:"/node/docs-tom/docs/basics/schema",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/tom/docs/docs/basics/schema.md",tags:[],version:"current",frontMatter:{id:"schema",title:"Schema",sidebar_label:"2. Schema"},sidebar:"sidenav",previous:{title:"1. Core Module",permalink:"/node/docs-tom/docs/basics/core-module"},next:{title:"3. Modules",permalink:"/node/docs-tom/docs/basics/modules"}},c={},d=[{value:"Decorators",id:"decorators",level:2},{value:"Special Type Information",id:"special-type-information",level:3}];function l(e){const n={admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A schema is a collection of metadata objects that describe the structure of a type/class/object."}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface X {\n  y?: string;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For the above interface, we can build a schema that describe the interface ",(0,t.jsx)(n.code,{children:"X"}),".",(0,t.jsx)(n.br,{}),"\n","It will have a metadata item that describes the property ",(0,t.jsx)(n.code,{children:"y"})," and that metadata item will also describe that it is ",(0,t.jsx)(n.strong,{children:"optional"})," and it is of type ",(0,t.jsx)(n.strong,{children:"string"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"This is the basic idea with simple metadata we can quickly understand. From here lot's of information is added and based on this information we can do different things."}),"\n",(0,t.jsx)(n.h2,{id:"decorators",children:"Decorators"}),"\n",(0,t.jsxs)(n.p,{children:["To obtain metadata we need to allow the user to express it.",(0,t.jsx)(n.br,{}),"\n","One simple way is to have the user provide a schema object which is not natural, verbose and most importantly not type-safe."]}),"\n",(0,t.jsxs)(n.p,{children:["We want to allow the user to define it's own classes and while doing it express the metadata required based on the domain logic.",(0,t.jsx)(n.br,{}),"\n","We achieve this via decorators:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Order {\n  @P id: number;\n  @P date: Date;\n  @P shipped: boolean;\n  @P.enum(OrderStatus) status: OrderStatus;\n  @P.asArray('string') coupons: string[];\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, we used the decorator ",(0,t.jsx)(n.code,{children:"P"})," to mark the properties we want to be part of the schema for the class ",(0,t.jsx)(n.code,{children:"Order"}),".",(0,t.jsx)(n.br,{}),"\n","By doing so, typescript automatically provide us runtime information about the type.",(0,t.jsx)(n.br,{}),"\n","I.E. ",(0,t.jsx)(n.strong,{children:"TOM"})," knows that:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["There is a class ",(0,t.jsx)(n.code,{children:"Order"})]}),"\n",(0,t.jsx)(n.li,{children:"It is made out of 5 properties (id, date, shipped, status, coupons)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"id"})," is a ",(0,t.jsx)(n.strong,{children:"number"}),", ",(0,t.jsx)(n.code,{children:"date"})," is a ",(0,t.jsx)(n.strong,{children:"Date"})," and so on..."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"special-type-information",children:"Special Type Information"}),"\n",(0,t.jsx)(n.p,{children:"Typescript decorators can provide a limited runtime reflection of the types."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It can not reflect enums"}),"\n",(0,t.jsx)(n.li,{children:"It can not reflect unresolved objects (circular reference classes)"}),"\n",(0,t.jsxs)(n.li,{children:["It can not reflect generics","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Array<string> will reflect as ",(0,t.jsx)(n.code,{children:"Array"})]}),"\n",(0,t.jsxs)(n.li,{children:["Set<string> will reflect as ",(0,t.jsx)(n.code,{children:"Set"})]}),"\n",(0,t.jsxs)(n.li,{children:["Map<string, string> will reflect as ",(0,t.jsx)(n.code,{children:"Map"})]}),"\n",(0,t.jsx)(n.li,{children:"Etc..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To workaround these limitations several decorators are used."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"\nclass PreTest {\n  @P v: number;\n}\n\nclass Test {\n\n  @P.enum(MyEnum) v1: MyEnum;\n  @P.asArray('string') v2: string[];\n  @P.asSet('string') v3: Set<string>;\n  @P.asMap('string', 'date') v4: Map<Date, string>;  // 2nd type param (data) is optional\n  @P.asObjectMap('date') v5: Record<string, Date>;  // 2nd type param (data) is optional\n  @P.asTuple('string', 'number', 'boolean') v6: [string, number, boolean];\n  @P.literal('xyz') v7: 'xyz';\n  @P.union('string', 'date', @P.literal(99), P.asArray('number')) v8: string | Date | 99 | number[];\n \n  @P v9: PreTest; // This will work cause `PreTest` is already defined\n  @P.as(() => PostTest) v10: PostTest; // This must be wrapped in a function, as reference to the type, because it is still undefined when the decorator is invoked.\n}\n\nclass PostTest {\n  @P v: number;\n}\n\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"Decorators are only valid on a class, a class method or a class property."})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},6640:(e,n,s)=>{s.d(n,{jd:()=>i});s(6540);var t=s(6025),r=(s(4586),s(8774)),a=s(4848);s(1765);function i(e){var n=e.to;return(0,a.jsx)(r.A,{to:(0,t.A)(n),children:e.children})}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(6540);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);