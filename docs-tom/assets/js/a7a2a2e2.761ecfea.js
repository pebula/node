"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[9906],{4418:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>l,frontMatter:()=>s,toc:()=>a});var o=t(4848),r=t(8453);const s={id:"events",title:"Events",sidebar_label:"3. Events"},i=void 0,a=[{value:"Naming event methods",id:"naming-event-methods",level:2}];function c(e){const n={admonition:"admonition",br:"br",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Life cycle events are called on various steps of the benchmarking process.",(0,o.jsx)(n.br,{}),"\n","We register to an event by decorating it with the relevant decorator to the event we want to register to."]}),"\n",(0,o.jsxs)(n.p,{children:["Each event is fired with a fully typed event object, some are enriched (from ",(0,o.jsx)(n.code,{children:"benchmark.js"}),") and some are passed as is."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Except ",(0,o.jsx)(n.code,{children:"OnTouchStoneStart"})," and ",(0,o.jsx)(n.code,{children:"OnTouchStoneEnd"})," all events are originated from ",(0,o.jsx)(n.code,{children:"benchmark.js"}),", you can also\nread the documentation from ",(0,o.jsx)(n.code,{children:"benchmark.js"})," to get better insight on each event."]})}),"\n",(0,o.jsx)(n.p,{children:"Here's a template class with all event decorators and event objects hooked:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import {\n  OnStart,\n  OnCaseComplete,\n  OnComplete,\n  OnTouchStoneStart,\n  OnTouchStoneEnd,\n  OnError,\n  OnAbort,\n  OnReset,\n  SuiteStartEvent,\n  CaseCompleteEvent,\n  SuiteErrorEvent,\n  SuiteAbortEvent,\n  SuiteResetEvent,\n  SuiteCompleteEvent,\n  TouchStoneStartEvent,\n  TouchStoneEndEvent\n} from '@pebula/touchstone';\n\nexport abstract class SimpleConsoleReporter {\n\n  @OnTouchStoneStart() // Do something when we start benchmarking\n  onSimpleConsoleReporterInitialize(event: TouchStoneStartEvent) { }\n\n  @OnStart() // Do something when we start benchmarking a new suite\n  onSimpleConsoleReporterStart(event: SuiteStartEvent) { }\n\n  @OnCaseComplete() // Do something when we end benchmarking a case\n  onSimpleConsoleReporterCycle(event: CaseCompleteEvent) { }\n\n  @OnError() // Do something when there is an error while benchmarking\n  onSimpleConsoleReporterError(event: SuiteErrorEvent) { }\n\n  @OnAbort() // Do something when there is an abort signal\n  onSimpleConsoleReporterAbort(event: SuiteAbortEvent) { }\n\n  @OnReset() // Do something when there is a benchmark.js reset event\n  onSimpleConsoleReporterReset(event: OnAbort) { }\n\n  @OnComplete() // Do something when we end benchmarking a suite\n  onSimpleConsoleReporterComplete(event: SuiteCompleteEvent) { }\n\n  @OnTouchStoneEnd() // Do something when all suites are benchmarked and we're about to end the process\n  onSimpleConsoleReporterFinalize(event: TouchStoneEndEvent) { }\n\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"naming-event-methods",children:"Naming event methods"}),"\n",(0,o.jsx)(n.p,{children:"Since most classes in touchstone are destined to be mixed in to a main container class, it is best to\nset unique names to your decorated methods."}),"\n",(0,o.jsxs)(n.p,{children:["This is true to all events but for decorated ",(0,o.jsx)(n.code,{children:"Case"})," methods as well."]}),"\n",(0,o.jsx)(n.p,{children:"This will prevent type conflicts when mixing them all into a single class."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);