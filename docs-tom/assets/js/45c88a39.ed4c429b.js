"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[2030],{2516:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>c,default:()=>p,frontMatter:()=>r,toc:()=>i});var o=n(4848),s=n(8453);const r={},c=void 0,i=[{value:"StripDoc type",id:"stripdoc-type",level:2},{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"./index.md",children:"Home"})," > ",(0,o.jsx)(t.a,{href:"./goosetyped.md",children:"@pebula/goosetyped"})," > ",(0,o.jsx)(t.a,{href:"./goosetyped.stripdoc.md",children:"StripDoc"})]}),"\n",(0,o.jsx)(t.h2,{id:"stripdoc-type",children:"StripDoc type"}),"\n",(0,o.jsx)(t.p,{children:"A type helper that strips away all members of the mongoose Document instance from the type"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Signature:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"export type StripDoc<T extends Document, TExcept extends keyof Document = never> = Subtract<T, Omit<Document, TExcept>>;\n"})}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'export class Message extends GtModel() {\r\n id: string;\r\n text: string;\r\n myMethod(): void { }\r\n}\r\n\r\nconst msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model)\r\nconst m: StripDoc<Message>; // now m has only "myMethod" & "text" but not "id"\r\n\r\n// Since "id" also exists in Document, to include it we need to exclude it from the strip.\r\nconst m: StripDoc<Message, \'id\'>; // now m has "id", "myMethod" & "text"\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var o=n(6540);const s={},r=o.createContext(s);function c(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);