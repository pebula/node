"use strict";(self.webpackChunkdocs_decorate=self.webpackChunkdocs_decorate||[]).push([[792],{6260:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(6870),s=n(5569);const o={id:"decorator-api-class",title:"Decorator API Class",sidebar_label:"3. Decorator API Class"},i=void 0,a={id:"decorate-fluent/decorator-api-class",title:"Decorator API Class",description:"The Decorator API Class is where all of the magic happens.",source:"@site/docs/decorate-fluent/decorator-api-class.md",sourceDirName:"decorate-fluent",slug:"/decorate-fluent/decorator-api-class",permalink:"/node/decorate/docs/decorate-fluent/decorator-api-class",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/decorate/docs/docs/decorate-fluent/decorator-api-class.md",tags:[],version:"current",frontMatter:{id:"decorator-api-class",title:"Decorator API Class",sidebar_label:"3. Decorator API Class"},sidebar:"sidebar",previous:{title:"2. Decorator API Suite",permalink:"/node/decorate/docs/decorate-fluent/decorator-api-suite"},next:{title:"4. Decorator API Class Mixins",permalink:"/node/decorate/docs/decorate-fluent/composing-decorator-api-class"}},l={},c=[{value:"Building the API",id:"building-the-api",level:2},{value:"Custom Class Decorator API",id:"custom-class-decorator-api",level:3},{value:"Plugins",id:"plugins",level:2},{value:"Design Time and Runtime",id:"design-time-and-runtime",level:2}];function d(e){const t={admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The Decorator API Class is where all of the magic happens."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Define the Schema Configuration class"}),"\n",(0,r.jsx)(t.li,{children:"Define the plugin interface and implement it"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"If we go back to API Suite we define in the previous page:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:"{5,8}",children:"import { DecorApiSuite } from '@pebula/decorate/fluent';\n\nexport const suite = DecorApiSuite.create()\n  .forClass(MyClassDecoratorFluentApiClass)            // Fluent Decorator API for a class decorator\n  .forProperty(MyPropertyDecoratorFluentApiClass);     // Fluent Decorator API for a property decorator\n\nexport const C = suite.classApi;\nexport const P = suite.propertyApi;\nexport const store = suite.store;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["How will ",(0,r.jsx)(t.code,{children:"MyPropertyDecoratorFluentApiClass"})," look like for the end-user to be able to do the following?"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"building-the-api",children:"Building the API"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { FluentMethodPlugin, FluentPropertyPlugin, DecorPropertyApi, PropertySchema } from '@pebula/decorate/fluent';\n\nexport class MyPropertyDecoratorSchemaConfig extends PropertySchema {\n  defaultValue?: any;\n  optional?: boolean\n}\n\nexport class MyPropertyDecoratorFluentApiClass extends DecorPropertyApi<MyPropertyDecoratorSchemaConfig> {\n  // IGNORE THE CLASS BODY, THESE ARE THE PLUGINS AND WE WILL VISIT THEM NEXT SECTION\n  @FluentPropertyPlugin()\n  get optional(): this {\n    this.$$context.schema.optional = true;\n    return this;\n  }\n\n  @FluentMethodPlugin()\n  default(value: any): this {\n    this.$$context.schema.defaultValue = value;\n    return this;\n  }\n\n  // Override the base class schema factory, teach it how to instantiate a new property schema configuration object.\n  static schemaFactory(args: PropertyDecoratorArgs): TomPropertySchemaConfig {\n    return new TomPropertySchemaConfig(args.key as string);\n  }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["We define the schema configuration class, which extend ",(0,r.jsx)(t.code,{children:"PropertySchema"})," (more on this later...)",(0,r.jsx)(t.br,{}),"\n","Then we define the API class which extends ",(0,r.jsx)(t.code,{children:"DecorPropertyApi"})," of our schema configuration class."]}),"\n",(0,r.jsx)(t.p,{children:"The base classes we extend are mandatory and we must extend the one relevant to the class we extend."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Decorator"}),(0,r.jsx)(t.th,{children:"Schema Config"}),(0,r.jsx)(t.th,{children:"Fluent API Class"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Class"}),(0,r.jsx)(t.td,{children:"ClassSchema"}),(0,r.jsx)(t.td,{children:"DecorClassApi"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Property"}),(0,r.jsx)(t.td,{children:"PropertySchema"}),(0,r.jsx)(t.td,{children:"DecorPropertyApi"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Method"}),(0,r.jsx)(t.td,{children:"MethodSchema"}),(0,r.jsx)(t.td,{children:"DecorMethodApi"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Parameter"}),(0,r.jsx)(t.td,{children:"ParameterSchema"}),(0,r.jsx)(t.td,{children:"DecorParameterApi"})]})]})]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Don't waste time on these types, the library provides helper to make this easy.",(0,r.jsx)(t.br,{}),"\n","We will cover them soon"]})}),"\n",(0,r.jsxs)(t.p,{children:["If you're looking at this code and thinking, this is not really extensible you're right!",(0,r.jsx)(t.br,{}),"\n","This is a simple example to ease you in."]}),"\n",(0,r.jsx)(t.p,{children:"On the next page we'll review how to compose an API class from small plugin chunks (mixins) which make the API class empty from any code."}),"\n",(0,r.jsx)(t.h3,{id:"custom-class-decorator-api",children:"Custom Class Decorator API"}),"\n",(0,r.jsx)(t.p,{children:"If we also implement a custom class decorator API we need to reflect it's schema configuration so our plugins will know how the class schema looks like."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"import { DecorPropertyApi, PropertySchema } from '@pebula/decorate/fluent';\nimport { MyClassDecoratorSchemaConfig } from './some-where';\n\n                                                                                                        // Type info on the class schema config\nexport class MyPropertyDecoratorFluentApiClass extends DecorPropertyApi<MyPropertyDecoratorSchemaConfig, MyClassDecoratorSchemaConfig> {\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"plugins",children:"Plugins"}),"\n",(0,r.jsxs)(t.p,{children:["Plugins are instructions we add to the API, by so extending the API.",(0,r.jsx)(t.br,{}),"\n","A plugin provides logic that will run once it is called, allowing the plugin to add the metadata required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In the example above, ",(0,r.jsx)(t.code,{children:"P"})," is the decorator, ",(0,r.jsx)(t.code,{children:"optional"})," and ",(0,r.jsx)(t.code,{children:"default"})," are the plugins."]}),"\n",(0,r.jsx)(t.p,{children:"There are 2 types of fluent API plugins:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"FluentPropertyPlugin"})," - A property plugin (get accessor) which does not require input (",(0,r.jsx)(t.code,{children:"optional"})," above)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"FluentMethodPlugin"})," - A method plugin which requires input (",(0,r.jsx)(t.code,{children:"default"})," above, getting 50 as input)"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"And a general API plugin:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"MethodPlugin"})," - A method plugin"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Do not confuse the fluent property/method plugin with the fluent API suite property and method APIs.\nThe fluent API suite sets the decorator type. A property decorator can only decorate properties, etc...",(0,r.jsx)(t.br,{}),"\n","The fluent property/method plugin instruct the type of member on the API."]}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["The different between ",(0,r.jsx)(t.code,{children:"FluentMethodPlugin"})," amd ",(0,r.jsx)(t.code,{children:"MethodPlugin"})," is that ",(0,r.jsx)(t.code,{children:"FluentMethodPlugin"})," must return the same type (design time) & value (runtime) of the context it was called from (this)."]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"MethodPlugin"})," can return any type and matching value it desires, possibly breaking the fluent API chain."]})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Fluent"})," is highly extensible, allowing plugins to be added from multiple locations in both libraries and ad-hoc application.",(0,r.jsx)(t.br,{}),"\n","You can add features on demand, allowing clear separation when developing new plugins."]}),"\n",(0,r.jsx)(t.h2,{id:"design-time-and-runtime",children:"Design Time and Runtime"}),"\n",(0,r.jsx)(t.p,{children:"The library is type safe and must keep design time data accurate to provide a solid user experience."}),"\n",(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.strong,{children:"fluent"}),", the design time is as important as the runtime"]}),"\n",(0,r.jsxs)(t.p,{children:["Because ",(0,r.jsx)(t.strong,{children:"fluent"})," is plugin based and can be extended from any location it also provide the tools to extend the type system along side the runtime."]}),"\n",(0,r.jsx)(t.p,{children:"The design time is generated as part of building the runtime process and requires an additional 3-line effort of pairing it via type augmentation."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5569:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6326);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);