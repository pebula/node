"use strict";(self.webpackChunkdocs_decorate=self.webpackChunkdocs_decorate||[]).push([[954],{2669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(6870),o=t(5569);const i={id:"introduction",title:"Introduction",sidebar_label:"1. Introduction"},a=void 0,s={id:"decorate-fluent/introduction",title:"Introduction",description:"@pebula/decorate/fluent (fluent) is a package built on-top of @pebula/decorate which implement a decorator domain used for building fluent decorator APIs.",source:"@site/docs/decorate-fluent/introduction.md",sourceDirName:"decorate-fluent",slug:"/decorate-fluent/introduction",permalink:"/node/decorate/docs/decorate-fluent/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/decorate/docs/docs/decorate-fluent/introduction.md",tags:[],version:"current",frontMatter:{id:"introduction",title:"Introduction",sidebar_label:"1. Introduction"},sidebar:"sidebar",previous:{title:"1. Introduction",permalink:"/node/decorate/docs/decorate/introduction"},next:{title:"2. Decorator API Suite",permalink:"/node/decorate/docs/decorate-fluent/decorator-api-suite"}},c={},l=[{value:"TL;DR",id:"tldr",level:2},{value:"Overview",id:"overview",level:2},{value:"Fluent Decorator API",id:"fluent-decorator-api",level:2}];function d(e){const n={admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@pebula/decorate/fluent"})," (fluent) is a package built on-top of ",(0,r.jsx)(n.code,{children:"@pebula/decorate"})," which implement a decorator domain used for building fluent decorator APIs."]}),"\n",(0,r.jsx)(n.h2,{id:"tldr",children:"TL;DR"}),"\n",(0,r.jsx)(n.p,{children:"Take a decorator function and make it a Fluent API object that can enrich the metadata for the decorated property."}),"\n",(0,r.jsx)(n.p,{children:"Another way to visualize it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class X {\n  @P({\n    optional: true,\n    default: 50,\n  })\n  value: number\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Convert the above API to:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"While allowing plugins, adding functionality on the fly, type safety and more..."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can achieve the same results with each of the approaches above, including type enforcement, plugin system, etc...",(0,r.jsx)(n.br,{}),"\n","It is just a matter of preference."]})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["With ",(0,r.jsx)(n.strong,{children:"Fluent"}),", we define plugins which compose a ",(0,r.jsx)(n.strong,{children:"Fluent Decorator API"}),". The end-user uses this API to define the metadata."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["The API will store the metadata in a ",(0,r.jsx)(n.strong,{children:"Schema Configuration"})," object, bound to the decorated target."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["We can then query for the ",(0,r.jsx)(n.strong,{children:"Schema Configuration"})," for a target and use it to implement our business logic."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Let's break it down:"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["(1) With ",(0,r.jsx)(n.strong,{children:"Fluent"}),", we define plugins which compose a ",(0,r.jsx)(n.strong,{children:"Fluent Decorator API"}),". The end-user uses this API to define the metadata."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"optional"})," and ",(0,r.jsx)(n.code,{children:"default"})," are plugins which we implement and they create the ",(0,r.jsx)(n.strong,{children:"Fluent Decorator API"}),".",(0,r.jsx)(n.br,{}),"\n","They are not part of the library, we call them plugins because they extends the bare naked decorator (",(0,r.jsx)(n.code,{children:"P"})," above)."]}),"\n",(0,r.jsx)(n.p,{children:"For each plugin, we provide a function that will handle the input and change the state."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["(2) The API will store the metadata in a ",(0,r.jsx)(n.em,{children:"Schema Configuration"})," object, bound to the decorated target."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["We mentioned that the plugin implementations we provide will change the state.",(0,r.jsx)(n.br,{}),"\n","We call this state ",(0,r.jsx)(n.strong,{children:"Schema Configuration"})," and it is a fully typed interface we provide when extending the API with plugins."]}),"\n",(0,r.jsxs)(n.p,{children:["An abstract illustration of the ",(0,r.jsx)(n.code,{children:"optional"})," & ",(0,r.jsx)(n.code,{children:"default"})," plugin:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class SchemaConfig {\n  defaultValue?: any;\n  isOptional?: boolean;\n}\n\nclass Plugin {\n  get optional(): this {\n    this.$$context.schema.isOptional = true;\n    return this;\n  }\n  default(value: any): this {\n    this.$$context.schema.defaultValue = value;\n    return this;\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where ",(0,r.jsx)(n.code,{children:"this.$$context.schema"})," extends ",(0,r.jsx)(n.code,{children:"SchemaConfig"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["(3) We can then query for the ",(0,r.jsx)(n.em,{children:"Schema Configuration"})," for a target and use it to implement our business logic."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Basically, we ask the library if it has a ",(0,r.jsx)(n.code,{children:"SchemaConfig"})," for a class.",(0,r.jsx)(n.br,{}),"\n","If it does, we can implement our logic."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Above, when we query for a ",(0,r.jsx)(n.strong,{children:"Schema Configuration"})," for ",(0,r.jsx)(n.code,{children:"X"}),", we will get back the following ",(0,r.jsx)(n.code,{children:"SchemaConfig"})," instance:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "defaultValue": 50,\n  "isOptional": true\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now, we can implement our logic."}),"\n",(0,r.jsxs)(n.p,{children:["For example, if we build a validation/sanitation library we will be able to set the value 50 to the property ",(0,r.jsx)(n.code,{children:"value"})," if it is not set."]}),"\n",(0,r.jsx)(n.p,{children:"Now we're ready to start the walk-through!"}),"\n",(0,r.jsx)(n.h2,{id:"fluent-decorator-api",children:"Fluent Decorator API"}),"\n",(0,r.jsx)(n.p,{children:"A fluent decorator API is a decorator method which also contains additional methods and properties."}),"\n",(0,r.jsx)(n.p,{children:"In the following end-user example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"P"})," is the decorator, it also returns and object with the ",(0,r.jsx)(n.code,{children:"optional"})," and ",(0,r.jsx)(n.code,{children:"default"})," members.",(0,r.jsx)(n.br,{}),"\n","Each of these members is also the ",(0,r.jsx)(n.code,{children:"P"})," decorator as well as returning the same object as ",(0,r.jsx)(n.code,{children:"P"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"We can describe the API using the following interface:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface DecoratorFluentApi {\n  (target: object, key: string | symbol, descriptor?: PropertyDescriptor): PropertyDescriptor | void;\n\n  optional: this;\n  default(value: any): this;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"A fluent decorator API means that at each point, the value return must be a valid decorator but also the context for an additional API operation."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5569:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6326);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);