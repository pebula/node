"use strict";(self.webpackChunkdocs_decorate=self.webpackChunkdocs_decorate||[]).push([[80],{9764:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var o=r(6870),s=r(5569);const n={id:"decorator-api-suite",title:"Decorator API Suite",sidebar_label:"2. Decorator API Suite"},a=void 0,c={id:"decorate-fluent/decorator-api-suite",title:"Decorator API Suite",description:"The decorator API suite is where we glue all of the decorator APIs together and produce the decorator functions.",source:"@site/docs/decorate-fluent/decorator-api-suite.md",sourceDirName:"decorate-fluent",slug:"/decorate-fluent/decorator-api-suite",permalink:"/node/decorate/docs/decorate-fluent/decorator-api-suite",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/decorate/docs/docs/decorate-fluent/decorator-api-suite.md",tags:[],version:"current",frontMatter:{id:"decorator-api-suite",title:"Decorator API Suite",sidebar_label:"2. Decorator API Suite"},sidebar:"sidebar",previous:{title:"1. Introduction",permalink:"/node/decorate/docs/decorate-fluent/introduction"},next:{title:"3. Decorator API Class",permalink:"/node/decorate/docs/decorate-fluent/decorator-api-class"}},i={},l=[{value:"Suite Decorators",id:"suite-decorators",level:2},{value:"Decorator API Class",id:"decorator-api-class",level:2},{value:"API Suite Store",id:"api-suite-store",level:2}];function d(e){const t={admonition:"admonition",br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"The decorator API suite is where we glue all of the decorator APIs together and produce the decorator functions."}),"\n",(0,o.jsx)(t.p,{children:"The actual output we need is the decorator we supply to the end user."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"class X {\n  @P.optional.default(50) value: number\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["We also need a way to access the ",(0,o.jsx)(t.strong,{children:"Schema Configuration"})," for a given type."]}),"\n",(0,o.jsx)(t.p,{children:"It generally looks like this:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"import { DecorApiSuite } from '@pebula/decorate/fluent';\n\nexport const suite = DecorApiSuite.create()\n  .forClass(MyClassDecoratorFluentApiClass)            // Fluent Decorator API for a class decorator\n  .forProperty(MyPropertyDecoratorFluentApiClass);     // Fluent Decorator API for a property decorator\n\nexport const C = suite.classApi;\nexport const P = suite.propertyApi;\nexport const store = suite.store;\n"})}),"\n",(0,o.jsxs)(t.p,{children:["We will export ",(0,o.jsx)(t.code,{children:"C"})," & ",(0,o.jsx)(t.code,{children:"P"})," to the end-user and use ",(0,o.jsx)(t.code,{children:"store"})," to query for ",(0,o.jsx)(t.code,{children:"Schema Configuration"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"suite-decorators",children:"Suite Decorators"}),"\n",(0,o.jsxs)(t.p,{children:["As you might have noticed, in the previous example we exported 2 decorators, not 1.",(0,o.jsx)(t.br,{}),"\n","Actually, there are 4 types of decorators, based on the different decorators that exist in the language."]}),"\n",(0,o.jsxs)(t.p,{children:["There is a clear separation between the different decorator types in TypeScript.",(0,o.jsx)(t.br,{}),"\n","Each decorator type has a unique API."]}),"\n",(0,o.jsx)(t.admonition,{title:"The 4 Decorators Are:",type:"info",children:(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Class decorator"}),"\n",(0,o.jsx)(t.li,{children:"Property Decorator"}),"\n",(0,o.jsx)(t.li,{children:"Method Decorator"}),"\n",(0,o.jsx)(t.li,{children:"Parameter Decorator"}),"\n"]})}),"\n",(0,o.jsxs)(t.p,{children:["Each decorator is a unique API, built from a decorator API class which represent the API structure.",(0,o.jsx)(t.br,{}),"\n","Going back to our example:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"C"})," will expose the fluent api defined in ",(0,o.jsx)(t.code,{children:"MyClassDecoratorFluentApiClass"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"P"})," will expose the fluent api defined in ",(0,o.jsx)(t.code,{children:"MyPropertyDecoratorFluentApiClass"})]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"We've only used 2 in this case but you can use all 4 if required."}),"\n",(0,o.jsx)(t.h2,{id:"decorator-api-class",children:"Decorator API Class"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"MyClassDecoratorFluentApiClass"})," & ",(0,o.jsx)(t.code,{children:"MyPropertyDecoratorFluentApiClass"})," are Fluent Decorator API classes."]}),"\n",(0,o.jsxs)(t.p,{children:["The structure of ",(0,o.jsx)(t.code,{children:"MyPropertyDecoratorFluentApiClass"})," class will get reflected in ",(0,o.jsx)(t.code,{children:"P"})," as if ",(0,o.jsx)(t.code,{children:"P"})," is an instance of ",(0,o.jsx)(t.code,{children:"MyPropertyDecoratorFluentApiClass"})," as well as a property decorator method."]}),"\n",(0,o.jsx)(t.p,{children:"The Decorator API class holds the structure of the API as well as the implementation of the plugins and the schema configuration class."}),"\n",(0,o.jsx)(t.p,{children:"On to the next page to learn more about the Decorator API class."}),"\n",(0,o.jsx)(t.h2,{id:"api-suite-store",children:"API Suite Store"}),"\n",(0,o.jsxs)(t.p,{children:["The store is simply where all ",(0,o.jsx)(t.strong,{children:"Schema Configuration"})," objects are stored, mapped to their respective target."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},5569:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var o=r(6326);const s={},n=o.createContext(s);function a(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(n.Provider,{value:t},e.children)}}}]);