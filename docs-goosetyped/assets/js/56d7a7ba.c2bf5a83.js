"use strict";(self.webpackChunknode=self.webpackChunknode||[]).push([[8142],{3419:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>r,toc:()=>p});var s=t(4848),n=t(8453);const d={},c=void 0,r={id:"api-docs/goosetyped.stripdocolumns",title:"goosetyped.stripdocolumns",description:"Home &gt; @pebula/goosetyped &gt; StripDoColumns",source:"@site/docs/api-docs/goosetyped.stripdocolumns.md",sourceDirName:"api-docs",slug:"/api-docs/goosetyped.stripdocolumns",permalink:"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdocolumns",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/goosetyped/docs/docs/api-docs/goosetyped.stripdocolumns.md",tags:[],version:"current",frontMatter:{}},i={},p=[{value:"StripDoColumns type",id:"stripdocolumns-type",level:2},{value:"Example",id:"example",level:2}];function l(e){const o={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.a,{href:"/node/docs-goosetyped/docs/api-docs/",children:"Home"})," > ",(0,s.jsx)(o.a,{href:"/node/docs-goosetyped/docs/api-docs/goosetyped",children:"@pebula/goosetyped"})," > ",(0,s.jsx)(o.a,{href:"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdocolumns",children:"StripDoColumns"})]}),"\n",(0,s.jsx)(o.h2,{id:"stripdocolumns-type",children:"StripDoColumns type"}),"\n",(0,s.jsx)(o.p,{children:"A type helper that strips away all members of the mongoose Document instance from the type as well as all methods."}),"\n",(0,s.jsx)(o.p,{children:(0,s.jsx)(o.strong,{children:"Signature:"})}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-typescript",children:"export type StripDoColumns<T extends Document, TExcept extends keyof Document = never> = Pick<T, SetDifference<NonFunctionKeys<T>, Exclude<keyof Document, TExcept>>>;\n"})}),"\n",(0,s.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'export class Message extends GtModel() {\r\n id: string;\r\n text: string;\r\n myMethod(): void { }\r\n}\r\n\r\nconst msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model)\r\nconst m: StripDoColumns<Message>; // now m has only "text" but not "id"\r\n\r\n// Since "id" also exists in Document, to include it we need to exclude it from the strip.\r\nconst m: StripDoColumns<Message, \'id\'>; // now m has "id" & "text"\n'})})]})}function a(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>c,x:()=>r});var s=t(6540);const n={},d=s.createContext(n);function c(e){const o=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(d.Provider,{value:o},e.children)}}}]);