{"searchDocs":[{"title":"WIP","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/discriminators","content":"","keywords":"","version":"Next"},{"title":"Creating Discriminators​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/discriminators#creating-discriminators","content":" /* module: person.ts */ import { GtDocument, GtModel, GtColumn, GtDiscriminator } from '@pebula/goosetyped'; @GtDocument() export class Person&lt;T extends string&gt; extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtDiscriminator() type: T; }   import { GtDocument, GtModel, GtColumn } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class BusinessMan extends Person&lt;'BusinessMan'&gt; { @GtColumn() businessTrips: number; } @GtDocument() export class Soldier extends Person&lt;'Soldier'&gt; { @GtColumn() releaseDate: Date; } @GtDocument() export class Athlete extends Person&lt;'Athlete'&gt; { @GtColumn() medals: number; }   tip Sub Documents are also valid discriminators.  ","version":"Next","tagName":"h2"},{"title":"Discriminators as Sub Documents​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/discriminators#discriminators-as-sub-documents","content":" import { GtDocument, GtModel, GtColumn } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class SalesLead extends GtModel() { @GtColumn() receivedAt: Date; @GtColumn({ type: () =&gt; Person }) person: BusinessMan | Soldier | Athlete; }   import { GtDocument, GtModel, GtColumn, DocumentArray } from '@pebula/goosetyped'; import { Person } from './person'; @GtDocument() export class Course extends GtModel() { @GtColumn() name: string; @GtColumn() startDate: Date; @GtColumn({ type: () =&gt; Person }) students: DocumentArray&lt;BusinessMan | Soldier | Athlete&gt;; }  ","version":"Next","tagName":"h2"},{"title":"Async Model Compilation","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/async-model-compilation","content":"","keywords":"","version":"Next"},{"title":"Sync VS Async​","type":1,"pageTitle":"Async Model Compilation","url":"/node/docs-goosetyped/docs/advanced/async-model-compilation#sync-vs-async","content":" What does it means anyway?  Since decorators are not (yet) part of the JS spec, TypeScript converts them into simple functions that invoke along with the creation of the class.  First, all of the member level decorators fire (i.e those on properties and methods) and at the end the class decorators fire (e.g. @GtDocument).  Once @GtDocument fires it will check if there is a connectionId defined, if not it will compile the model before the module itself finish to initialize and export the model class.  This is a synchronous run which fits the default connection as it is also set immediately in mongoose.  ","version":"Next","tagName":"h2"},{"title":"Async Compilation​","type":1,"pageTitle":"Async Model Compilation","url":"/node/docs-goosetyped/docs/advanced/async-model-compilation#async-compilation","content":" The same process occurs in an async compilation except that now @GtDocument fires and detects that connectionId is defined.  import mongoose from 'mongoose'; import { GtDocument, GtModel, GtColumn, addConnection } from '@pebula/goosetyped'; @GtDocument({ connectionId: 'myConnection', }) export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; }   At this point it will wait to see if the user has added this connection.  When no connection is found, nothing is done and the model will &quot;wait&quot; for the connection to be added. If the connection exists, the compilation will run at one of two options (user defined):  immediate [default] - Compile the model once a reference to the connection is obtained.connected - Compile the model once the connection state changes to connected.  warning Do not use the model before it is compiled using a connection.  Now, let's register the connection so our model can compile:  const connection = mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () =&gt; connection, { compileAt: 'immediate' }); await ready;   Once ready resolves we have a guarantee that all models are compiled and bound to the connection.  The factory function (() =&gt; connection) return the connection or it can return a Promise for the connection. Once the factory function resolves (including promise, if returned) then the models compile and the process ends.  If we set compileAt to connected the model will wait for the connection state to change to connected and only then all models will compile and the process will end.  caution It is best to compile as early as possible, think before you use connected  Watch out from the Promise Like connection object returned from mongoose.createConnection, when returned from the factory function like done above it will actually treat it as a promise and will resolve the factory once the connection is connected.  Fix:  const connection = await mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () =&gt; connection, { compileAt: 'immediate' }); await ready;   GtConnectOptions ","version":"Next","tagName":"h2"},{"title":"Plugins","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/plugins","content":"Plugins The way to declare and bind mongoose plugins to GooseTyped models. import * as mongooseAutopopulate from 'mongoose-autopopulate'; import { GtDocument, GtModel, GtColumn, GtPlugin } from '@pebula/goosetyped'; @GtDocument() @GtPlugin({ plugin: mongooseAutopopulate }) export class Person&lt;T extends string&gt; extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } ","keywords":"","version":"Next"},{"title":"Local Columns","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/local-column","content":"","keywords":"","version":"Next"},{"title":"WIP","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/indexes","content":"","keywords":"","version":"Next"},{"title":"Single Index​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/indexes#single-index","content":" import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtIndex({ sort: 'asc' }) @GtColumn() name: string; @GtIndex({ sort: 'desc' }) @GtColumn() age: number; @GtIndex() // defaults to 'asc' @GtColumn() nickname: string;   Metadata: GtSingleIndexMetadataArgs  ","version":"Next","tagName":"h2"},{"title":"Compound Index​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/indexes#compound-index","content":" import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtIndex({ indices: { name: 'asc'; nickname: 'desc'; }, options: { test: true, } }) @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtColumn() nickname: string;   Metadta: GtCompoundIndexMetadataArgs ","version":"Next","tagName":"h2"},{"title":"Sub Documents & Embedded Documents​","type":1,"pageTitle":"Local Columns","url":"/node/docs-goosetyped/docs/advanced/local-column#sub-documents--embedded-documents","content":" SubDocuments are a bit different.  When mongoose detects a column that is an embedded document it will treat it differently. It will not use the class defined for it but instead will use a new class it creates for every column that is an embedded document which mimic the behavior of the original class.  This how mongoose works for all embedded documents, including simple nested schema, complex discriminators and Array/Map of them.  import { GtSubDocument, GtResource, GtDocument, GtModel, GtColumn, } from '@pebula/goosetyped'; @GtSubDocument({ noId: true }) export class Address extends GtResource() { @GtColumn() street: string; @GtColumn() country: string; } @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtColumn() address: Address; // &lt;- Embedded Column }   info Address is an embedded column, not because it is wrapped by @GtSubDocument, it is an embedded column because it is nested within the root document  In the example above, Customer.address will point to class SingleNested but it does not really matter because GooseTyped takes care to synchronize and run what's needed.  It will make sure that the original constructor ran and will also adapt the class to support instanceOf so the expression person.address instanceOf Address is true.  The only issue we have is with local columns / properties.GooseTyped maintains a sync between the original class and the new mongoose class but it can't track the members which are not declared.  To solve this issue you can use the @GtLocalProp decorator which will make the property so it will be synced.  caution Using local column or private properties in general is not recommended, avoid them to prevent unfortunate bugs and errors. ","version":"Next","tagName":"h2"},{"title":"WIP","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/query-methods","content":"WIP Query methods (also called Query Helpers) is a simple but powerful mechanism to compose custom queries. All query methods are added to the mongoose Query class and not the Model so they don't effect the type directly however the Query type is used on the Model so there is an indirect effect which is why we register query methods is a different way. Let's define some query methods: import { Document, DocumentQuery } from 'mongoose'; import { GtDocument, GtModel, GtColumn, GtQuery } from '@pebula/goosetyped'; export class MyQueries { byName&lt;T extends Document &amp; { name: string }&gt;(this: DocumentQuery&lt;T[], T, MyQueries&gt; &amp; MyQueries, name: string): DocumentQuery&lt;T[], T, MyQueries&gt; &amp; MyQueries { return this.where({ name: new RegExp(name, 'i') }); } byAge&lt;T extends Document &amp; { age: number }&gt;(this: DocumentQuery&lt;T[], T, MyQueries&gt; &amp; MyQueries, age: number): DocumentQuery&lt;T[], T, MyQueries&gt; &amp; MyQueries { return this.where({ age: age }); } } @GtDocument() export class Person extends GtQuery(MyQueries)(GtModel()) { @GtColumn() name: string; @GtColumn() age: number; } Person.find().byName('test').byAge(15); The declaration might look a bit cumbersome but it enables use to apply the additional query methods type members on the Query object returned by the Model's find() method. info Note that you can still add mixins through GtModel()","keywords":"","version":"Next"},{"title":"WIP","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/advanced/hooks","content":"","keywords":"","version":"Next"},{"title":"index","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/","content":"","keywords":"","version":"Next"},{"title":"API Reference​","type":1,"pageTitle":"index","url":"/node/docs-goosetyped/docs/api-docs/#api-reference","content":" ","version":"Next","tagName":"h2"},{"title":"Packages​","type":1,"pageTitle":"index","url":"/node/docs-goosetyped/docs/api-docs/#packages","content":" Package Description @pebula/goosetyped  ","version":"Next","tagName":"h2"},{"title":"Document Hooks​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#document-hooks","content":" ","version":"Next","tagName":"h2"},{"title":"Init Hook​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#init-hook","content":" Supports pre/postMust be an instance methodDoes not support async operation  import { GtDocument, GtModel, GtInitHook } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtInitHook('pre') preInitHook() { /* Do stuff... */ } @GtInitHook('post') postInitHook() { /* Do stuff... */ } }   ","version":"Next","tagName":"h3"},{"title":"Validate, Save, Remove, DeleteOne, UpdateOne Hooks​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#validate-save-remove-deleteone-updateone-hooks","content":" Supports pre/postMust be an instance methodSupport async operation  import { GtDocument, GtModel, GtValidateHook, GtSaveHook, GtRemoveHook, GtDeleteOneHook, GtUpdateOneHook, } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtValidateHook('pre') async preValidateHook() { /* Do stuff... */ } @GtValidateHook('post') postValidateHook() { /* Do stuff... */ } @GtSaveHook('pre') preSaveHook() { /* Do stuff... */ } @GtSaveHook('post') async postSaveHook() { /* Do stuff... */ } @GtRemoveHook('pre') async preRemoveHook() { /* Do stuff... */ } @GtRemoveHook('post') postRemoveHook() { /* Do stuff... */ } @GtDeleteOneHook('pre') async preDeleteOneHook() { /* Do stuff... */ } @GtDeleteOneHook('post') postDeleteOneHook() { /* Do stuff... */ } @GtUpdateOneHook('pre') preUpdateOneHook() { /* Do stuff... */ } @GtUpdateOneHook('post') async postUpdateOneHook() { /* Do stuff... */ } }   ","version":"Next","tagName":"h3"},{"title":"Model Hooks​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#model-hooks","content":" ","version":"Next","tagName":"h2"},{"title":"InsertMany Hook​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#insertmany-hook","content":" Supports pre/post (different signatures)Must be a static methodSupport async operation  import { GtDocument, GtModel, GtInsertManyHook } from '@pebula/goosetyped'; @GtDocument() export class Person extends GtModel() { @GtColumn() name: string; @GtInsertManyHook('pre') static preInsertManyHook() { /* Do stuff... */ } @GtInsertManyHook('post') static postInsertManyHook(instances: Person[]) { /* Do stuff... */ } }   ","version":"Next","tagName":"h3"},{"title":"Aggregation Hooks​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#aggregation-hooks","content":" TBD  ","version":"Next","tagName":"h2"},{"title":"Query Hooks​","type":1,"pageTitle":"WIP","url":"/node/docs-goosetyped/docs/advanced/hooks#query-hooks","content":" TBD ","version":"Next","tagName":"h2"},{"title":"goosetyped.addconnection","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.addconnection","content":"","keywords":"","version":"Next"},{"title":"addConnection() function​","type":1,"pageTitle":"goosetyped.addconnection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.addconnection#addconnection-function","content":" Registers a connection with GooseTyped to be used to compile Models registered under the same connection Id.  Signature:  export declare function addConnection(connectionId: string, connectionFactory: () =&gt; (mongoose.Connection | Promise&lt;mongoose.Connection&gt;), connectOptions?: GtConnectOptions): Promise&lt;unknown&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.addconnection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.addconnection#parameters","content":" Parameter Type Description connectionId string A unique id for this connection, will be used to find models with matching connectionId's. connectionFactory () =&gt; (mongoose.Connection | Promise&lt;mongoose.Connection&gt;) A function that returns a mongoose connection or a Promise for a mongoose connection. The connection does not have to be alive. connectOptions GtConnectOptions (Optional)  Returns:  Promise&lt;unknown&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.ctor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor","content":"","keywords":"","version":"Next"},{"title":"Ctor interface​","type":1,"pageTitle":"goosetyped.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor#ctor-interface","content":" Signature:  export interface Ctor&lt;T&gt; extends Function   Extends: Function  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"goosetyped.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor#methods","content":" Method Description (new)(args)  ","version":"Next","tagName":"h2"},{"title":"goosetyped","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped","content":"","keywords":"","version":"Next"},{"title":"goosetyped.columnrequired","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.columnrequired","content":"","keywords":"","version":"Next"},{"title":"ColumnRequired type​","type":1,"pageTitle":"goosetyped.columnrequired","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.columnrequired#columnrequired-type","content":" Signature:  export type ColumnRequired = boolean | string | (() =&gt; boolean) | [() =&gt; boolean, string];  ","version":"Next","tagName":"h2"},{"title":"goosetyped.classdecoratorof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.classdecoratorof","content":"","keywords":"","version":"Next"},{"title":"ClassDecoratorOf type​","type":1,"pageTitle":"goosetyped.classdecoratorof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.classdecoratorof#classdecoratorof-type","content":" Signature:  export type ClassDecoratorOf&lt;TInstance, TStatic = any&gt; = (target: Type&lt;TInstance, TStatic&gt;) =&gt; any;   References: Type ","version":"Next","tagName":"h2"},{"title":"goosetyped package​","type":1,"pageTitle":"goosetyped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped#goosetyped-package","content":" ","version":"Next","tagName":"h2"},{"title":"Classes​","type":1,"pageTitle":"goosetyped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped#classes","content":" Class Description DocumentArray ObjectId   ","version":"Next","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"goosetyped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped#functions","content":" Function Description addConnection(connectionId, connectionFactory, connectOptions) Registers a connection with GooseTyped to be used to compile Models registered under the same connection Id. findModels() Return all Models / Resources registered in GooseTyped getDiscriminatorKeyFor(modelClass) Returns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value. getDiscriminatorKeysOf(modelClass) Returns the discriminator keys for the provided Model / Resource. getEnum(cls, path) Returns the list of enums registered for a path in a Model / Resource. getSchemaOf(modelClass) Returns the mongoose schema for the provided Model / Resource GtColumn(metadata) GtDeleteOneHook(stage) GtDiscriminator() GtDocument(metadata) GtIndex(metadata) GtIndex(metadata) GtInitHook(stage) GtInsertManyHook(stage) GtInsertManyHook(stage) GtLocalProp() GtMethod() GtModel(m1, m2, m3, m4, m5) GtPlugin(metadata) GtQuery(QH) GtQuery(Q1, Q2) GtQuery(Q1, Q2, Q3) GtQuery(Q1, Q2, Q3, Q4) GtRemoveHook(stage) GtResource() GtResource(m1) GtResource(m1, m2) GtResource(m1, m2, m3) GtResource(m1, m2, m3, m4) GtResource(m1, m2, m3, m4, m5) GtSaveHook(stage) GtSchemaType(metadata) GtSkipVersioning() GtSubDocument(metadata) GtTimestampCreated() GtTimestampUpdated() GtToJSON(config) A decorator for toJSON with a prototype bound implementation for the transform function. Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toJSON. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toJSON GtToObject(config) A decorator for toObject with a prototype bound implementation for the transform function. Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toObject. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer. https://mongoosejs.com/docs/4.x/docs/guide.html\\#toObject GtUpdateOneHook(stage) GtValidateHook(stage) GtVersionKey() isDiscriminator(modelClass) mapSchemaType(runtimeType, metadata)   ","version":"Next","tagName":"h2"},{"title":"Interfaces​","type":1,"pageTitle":"goosetyped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped#interfaces","content":" Interface Description Ctor DocumentQuery GtBeforeCompileModelHandler GtColumnMetadataArgs GtCompoundIndexMetadataArgs GtConnectOptions GtDocumentMetadataArgs GtIndexOptions GtPluginMetadataArgs GtSingleIndexMetadataArgs GtSubDocumentMetadataArgs ModelExtensions Resource SubDocument ValidatorMessageContext ValidatorOpts   ","version":"Next","tagName":"h2"},{"title":"Type Aliases​","type":1,"pageTitle":"goosetyped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped#type-aliases","content":" Type Alias Description ClassDecoratorOf ColumnRequired GtIndexSortOrder GtSchemaTypeMetadataArgs MethodDecoratorOf PropertyDecoratorOf StaticMethodDecoratorOf StripDoc A type helper that strips away all members of the mongoose Document instance from the type StripDoColumns A type helper that strips away all members of the mongoose Document instance from the type as well as all methods. Type Validator https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate ValidatorFn  ","version":"Next","tagName":"h2"},{"title":"goosetyped.ctor._new_","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor._new_","content":"","keywords":"","version":"Next"},{"title":"Ctor.(new)​","type":1,"pageTitle":"goosetyped.ctor._new_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor._new_#ctornew","content":" Signature:  new (...args: any[]): T;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.ctor._new_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.ctor._new_#parameters","content":" Parameter Type Description args any[]   Returns:  T ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery._mongooseoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._mongooseoptions","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery._mongooseOptions property​","type":1,"pageTitle":"goosetyped.documentquery._mongooseoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._mongooseoptions#documentquery_mongooseoptions-property","content":" Signature:  _mongooseOptions: M.MongooseQueryOptions;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery._symbol.tostringtag_","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._symbol.tostringtag_","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentarray","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentarray","content":"","keywords":"","version":"Next"},{"title":"DocumentArray class​","type":1,"pageTitle":"goosetyped.documentarray","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentarray#documentarray-class","content":" Signature:  export declare class DocumentArray&lt;T extends Document&gt; extends Types.DocumentArray&lt;T&gt;   Extends: Types.DocumentArray&lt;T&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery._symbol.asynciterator_","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._symbol.asynciterator_","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.[Symbol.asyncIterator]() method​","type":1,"pageTitle":"goosetyped.documentquery._symbol.asynciterator_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._symbol.asynciterator_#documentquerysymbolasynciterator-method","content":" Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html). A QueryCursor exposes a Streams3 interface, as well as a .next() function. This is equivalent to calling .cursor() with no arguments.  Signature:  [Symbol.asyncIterator](): AsyncIterableIterator&lt;M.Unpacked&lt;ResultType&gt;&gt;;   Returns:  AsyncIterableIterator&lt;M.Unpacked&lt;ResultType&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.[Symbol.toStringTag] property​","type":1,"pageTitle":"goosetyped.documentquery._symbol.tostringtag_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._symbol.tostringtag_#documentquerysymboltostringtag-property","content":" Signature:  [Symbol.toStringTag]: string;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.all_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all_1","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery._where","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._where","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.$where() method​","type":1,"pageTitle":"goosetyped.documentquery._where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._where#documentquerywhere-method","content":" Signature:  $where(argument: string | Function): DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery._where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery._where#parameters","content":" Parameter Type Description argument string | Function   Returns:  DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.all","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.all() method​","type":1,"pageTitle":"goosetyped.documentquery.all","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all#documentqueryall-method","content":" Specifies an $all query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  all(path: string, val: Array&lt;any&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.all","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all#parameters","content":" Parameter Type Description path string val Array&lt;any&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.all() method​","type":1,"pageTitle":"goosetyped.documentquery.all_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all_1#documentqueryall-method","content":" Signature:  all(val: Array&lt;any&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.all_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.all_1#parameters","content":" Parameter Type Description val Array&lt;any&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.batchsize","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.batchsize","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.batchSize() method​","type":1,"pageTitle":"goosetyped.documentquery.batchsize","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.batchsize#documentquerybatchsize-method","content":" Specifies the batchSize option.  Signature:  batchSize(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.batchsize","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.batchsize#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.box","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.allowdiskuse","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.allowdiskuse","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.allowDiskUse() method​","type":1,"pageTitle":"goosetyped.documentquery.allowdiskuse","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.allowdiskuse#documentqueryallowdiskuse-method","content":" Sets the allowDiskUse option for the query (ignored for &lt; 4.4.0)  Signature:  allowDiskUse(value: boolean): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.allowdiskuse","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.allowdiskuse#parameters","content":" Parameter Type Description value boolean   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.and","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.and","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.and() method​","type":1,"pageTitle":"goosetyped.documentquery.and","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.and#documentqueryand-method","content":" Specifies arguments for an $and condition.  Signature:  and(array: Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.and","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.and#parameters","content":" Parameter Type Description array Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.box() method​","type":1,"pageTitle":"goosetyped.documentquery.box","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box#documentquerybox-method","content":" Specifies a $box condition  Signature:  box(val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.box","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box#parameters","content":" Parameter Type Description val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.catch","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.catch","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.catch property​","type":1,"pageTitle":"goosetyped.documentquery.catch","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.catch#documentquerycatch-property","content":" Executes the query returning a Promise which will be resolved with either the doc(s) or rejected with the error. Like .then(), but only takes a rejection handler.  Signature:  catch: Promise&lt;ResultType&gt;['catch'];  ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.box_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.box() method​","type":1,"pageTitle":"goosetyped.documentquery.box_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box_1#documentquerybox-method","content":" Signature:  box(lower: number[], upper: number[]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.box_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.box_1#parameters","content":" Parameter Type Description lower number[] upper number[]   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.cast","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cast","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.cast() method​","type":1,"pageTitle":"goosetyped.documentquery.cast","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cast#documentquerycast-method","content":" Signature:  cast(model: M.Model&lt;any, THelpers&gt; | null, obj: any): M.UpdateQuery&lt;DocType&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.cast","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cast#parameters","content":" Parameter Type Description model M.Model&lt;any, THelpers&gt; | null obj any   Returns:  M.UpdateQuery&lt;DocType&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.clone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.clone","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.clone() method​","type":1,"pageTitle":"goosetyped.documentquery.clone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.clone#documentqueryclone-method","content":" Make a copy of this query so you can re-execute it.  Signature:  clone(): this;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.circle","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.circle() method​","type":1,"pageTitle":"goosetyped.documentquery.circle","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle#documentquerycircle-method","content":" Specifies a $center or $centerSphere condition.  Signature:  circle(path: string, area: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.circle","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle#parameters","content":" Parameter Type Description path string area any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.collation","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.collation","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.collation() method​","type":1,"pageTitle":"goosetyped.documentquery.collation","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.collation#documentquerycollation-method","content":" Adds a collation to this op (MongoDB 3.4 and up)  Signature:  collation(value: mongodb.CollationOptions): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.collation","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.collation#parameters","content":" Parameter Type Description value mongodb.CollationOptions   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.comment","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.comment","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.comment() method​","type":1,"pageTitle":"goosetyped.documentquery.comment","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.comment#documentquerycomment-method","content":" Specifies the comment option.  Signature:  comment(val: string): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.comment","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.comment#parameters","content":" Parameter Type Description val string   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.countdocuments","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.countdocuments","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.countDocuments() method​","type":1,"pageTitle":"goosetyped.documentquery.countdocuments","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.countdocuments#documentquerycountdocuments-method","content":" Specifies this query as a countDocuments query.  Signature:  countDocuments(criteria?: M.FilterQuery&lt;RawDocType&gt;, options?: M.QueryOptions&lt;DocType&gt;): DocumentQuery&lt;number, DocType, THelpers, RawDocType, 'countDocuments'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.countdocuments","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.countdocuments#parameters","content":" Parameter Type Description criteria M.FilterQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions&lt;DocType&gt; (Optional)  Returns:  DocumentQuery&lt;number, DocType, THelpers, RawDocType, 'countDocuments'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.circle_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.circle() method​","type":1,"pageTitle":"goosetyped.documentquery.circle_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle_1#documentquerycircle-method","content":" Signature:  circle(area: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.circle_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.circle_1#parameters","content":" Parameter Type Description area any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.deletemany","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.deleteMany() method​","type":1,"pageTitle":"goosetyped.documentquery.deletemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany#documentquerydeletemany-method","content":" Declare and/or execute this query as a deleteMany() operation. Works like remove, except it deletes _every_ document that matches filter in the collection, regardless of the value of single.  Signature:  deleteMany(filter?: M.FilterQuery&lt;RawDocType&gt;, options?: M.QueryOptions&lt;DocType&gt;): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.deletemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions&lt;DocType&gt; (Optional)  Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.deletemany_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany_1","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.deletemany_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.deleteMany() method​","type":1,"pageTitle":"goosetyped.documentquery.deletemany_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany_2#documentquerydeletemany-method","content":" Signature:  deleteMany(): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers;   Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.deleteMany() method​","type":1,"pageTitle":"goosetyped.documentquery.deletemany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany_1#documentquerydeletemany-method","content":" Signature:  deleteMany(filter: M.FilterQuery&lt;RawDocType&gt;): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery","content":"","keywords":"","version":"Next"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.deletemany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deletemany_1#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt;   Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteMany'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"DocumentQuery interface​","type":1,"pageTitle":"goosetyped.documentquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery#documentquery-interface","content":" Signature:  export interface DocumentQuery&lt;ResultType, DocType, THelpers = {}, RawDocType = DocType, QueryOp = 'find'&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.documentquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery#properties","content":" Property Modifiers Type Description _mongooseOptions M.MongooseQueryOptions [Symbol.toStringTag] string catch Promise&lt;ResultType&gt;['catch'] Executes the query returning a Promise which will be resolved with either the doc(s) or rejected with the error. Like .then(), but only takes a rejection handler. finally Promise&lt;ResultType&gt;['finally'] Executes the query returning a Promise which will be resolved with .finally() chained. model ExtModel&lt;DocType, unknown&gt; The model this query was created from then Promise&lt;ResultType&gt;['then'] Executes the query returning a Promise which will be resolved with either the doc(s) or rejected with the error.  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"goosetyped.documentquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery#methods","content":" Method Description [Symbol.asyncIterator]() Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html). A QueryCursor exposes a Streams3 interface, as well as a .next() function. This is equivalent to calling .cursor() with no arguments. $where(argument) all(path, val) Specifies an $all query condition. When called with one argument, the most recent path passed to where() is used. all(val) allowDiskUse(value) Sets the allowDiskUse option for the query (ignored for &lt; 4.4.0) and(array) Specifies arguments for an $and condition. batchSize(val) Specifies the batchSize option. box(val) Specifies a $box condition box(lower, upper) cast(model, obj) circle(path, area) Specifies a $center or $centerSphere condition. circle(area) clone() Make a copy of this query so you can re-execute it. collation(value) Adds a collation to this op (MongoDB 3.4 and up) comment(val) Specifies the comment option. countDocuments(criteria, options) Specifies this query as a countDocuments query. cursor(options) Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html). A QueryCursor exposes a Streams3 interface, as well as a .next() function. deleteMany(filter, options) Declare and/or execute this query as a deleteMany() operation. Works like remove, except it deletes _every_ document that matches filter in the collection, regardless of the value of single. deleteMany(filter) deleteMany() deleteOne(filter, options) Declare and/or execute this query as a deleteOne() operation. Works like remove, except it deletes at most one document regardless of the single option. deleteOne(filter) deleteOne() distinct(field, filter) Creates a distinct query: returns the distinct values of the given field that match filter. elemMatch(path, val) Specifies a $elemMatch query condition. When called with one argument, the most recent path passed to where() is used. elemMatch(val) equals(val) Specifies the complementary comparison value for paths specified with where() error() Gets/sets the error flag on this query. If this flag is not null or undefined, the exec() promise will reject without executing. error(val) estimatedDocumentCount(options) Creates a estimatedDocumentCount query: counts the number of documents in the collection. exec() Executes the query exists(path, val) Specifies a $exists query condition. When called with one argument, the most recent path passed to where() is used. exists(val) explain(verbose) Sets the [explain option](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/), which makes this query return detailed execution stats instead of the actual query result. This method is useful for determining what index your queries use. find(filter, projection, options) Creates a find query: gets a list of documents that match filter. find(filter, projection) find(filter) find() findById(id, projection, options) Declares the query a findById operation. When executed, returns the document with the given _id. findById(id, projection) findById(id) findByIdAndDelete(id, options) Creates a findByIdAndDelete query, filtering by the given _id. findByIdAndDelete(id, options) findByIdAndUpdate(id, update, options) Creates a findOneAndUpdate query, filtering by the given _id. findByIdAndUpdate(id, update, options) findByIdAndUpdate(id, update, options) findByIdAndUpdate(id, update) findOne(filter, projection, options) Declares the query a findOne operation. When executed, the first found document is passed to the callback. findOne(filter, projection) findOne(filter) findOneAndDelete(filter, options) Creates a findOneAndDelete query: atomically finds the given document, deletes it, and returns the document as it was before deletion. findOneAndUpdate(filter, update, options) Creates a findOneAndUpdate query: atomically find the first document that matches filter and apply update. findOneAndUpdate(filter, update, options) findOneAndUpdate(filter, update, options) geometry(object) Specifies a $geometry condition get(path) For update operations, returns the value of a path in the update's $set. Useful for writing getters/setters that can work with both update operations and save(). getFilter() Returns the current query filter (also known as conditions) as a POJO. getOptions() Gets query options. getPopulatedPaths() Gets a list of paths to be populated by this query getQuery() Returns the current query filter. Equivalent to getFilter(). getUpdate() Returns the current update operations as a JSON object. gt(path, val) Specifies a $gt query condition. When called with one argument, the most recent path passed to where() is used. gt(val) gte(path, val) Specifies a $gte query condition. When called with one argument, the most recent path passed to where() is used. gte(val) hint(val) Sets query hints. in(path, val) Specifies an $in query condition. When called with one argument, the most recent path passed to where() is used. in(val) intersects(arg) Declares an intersects query for geometry(). j(val) Requests acknowledgement that this operation has been persisted to MongoDB's on-disk journal. lean(val) limit(val) Specifies the maximum number of documents the query will return. lt(path, val) Specifies a $lt query condition. When called with one argument, the most recent path passed to where() is used. lt(val) lte(path, val) Specifies a $lte query condition. When called with one argument, the most recent path passed to where() is used. lte(val) maxDistance(path, val) Specifies an $maxDistance query condition. When called with one argument, the most recent path passed to where() is used. maxDistance(val) maxTimeMS(ms) Sets the [maxTimeMS](https://www.mongodb.com/docs/manual/reference/method/cursor.maxTimeMS/) option. This will tell the MongoDB server to abort if the query or write op has been running for more than ms milliseconds. merge(source) Merges another Query or conditions object into this one. mod(path, val) Specifies a $mod condition, filters documents for documents whose path property is a number that is equal to remainder modulo divisor. mod(val) mongooseOptions(val) Getter/setter around the current mongoose-specific options for this query Below are the current Mongoose-specific options. ne(path, val) Specifies a $ne query condition. When called with one argument, the most recent path passed to where() is used. ne(val) near(path, val) Specifies a $near or $nearSphere condition near(val) nin(path, val) Specifies an $nin query condition. When called with one argument, the most recent path passed to where() is used. nin(val) nor(array) Specifies arguments for an $nor condition. or(array) Specifies arguments for an $or condition. orFail(err) Make this query throw an error if no documents match the given filter. This is handy for integrating with async/await, because orFail() saves you an extra if statement to check if no document was found. polygon(path, coordinatePairs) Specifies a $polygon condition polygon(coordinatePairs) populate(path, select, model, match) Specifies paths which should be populated with other documents. populate(options) populate(path, select, model, match) populate(options) post(fn) Add post middleware to this query instance. Doesn't affect other queries. pre(fn) Add pre middleware to this query instance. Doesn't affect other queries. projection(fields) Get/set the current projection (AKA fields). Pass null to remove the current projection. projection(fields) projection() read(pref, tags) Determines the MongoDB nodes from which to read. readConcern(level) Sets the readConcern option for the query. regex(path, val) Specifies a $regex query condition. When called with one argument, the most recent path passed to where() is used. regex(val) replaceOne(filter, replacement, options) Declare and/or execute this query as a replaceOne() operation. Same as update(), except MongoDB will replace the existing document and will not accept any [atomic](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/\\#pattern) operators ($set, etc.) select(arg) Specifies which document fields to include or exclude (also known as the query &quot;projection&quot;) selected() Determines if field selection has been made. selectedExclusively() Determines if exclusive field selection has been made. selectedInclusively() Determines if inclusive field selection has been made. session(session) Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this query. Sessions are how you mark a query as part of a [transaction](/docs/transactions.html). set(path, value) Adds a $set to this query's update without changing the operation. This is useful for query middleware so you can add an update regardless of whether you use updateOne(), updateMany(), findOneAndUpdate(), etc. setOptions(options, overwrite) Sets query options. Some options only make sense for certain operations. setQuery(val) Sets the query conditions to the provided JSON object. setUpdate(update) size(path, val) Specifies an $size query condition. When called with one argument, the most recent path passed to where() is used. size(val) skip(val) Specifies the number of documents to skip. slice(path, val) Specifies a $slice projection for an array. slice(val) sort(arg, options) Sets the sort order. If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1. tailable(bool, opts) Sets the tailable option (for use with capped collections). toConstructor() Converts this query to a customized, reusable query constructor with all arguments and options retained. transform(fn) Runs a function fn and treats the return value of fn as the new value for the query to resolve to. updateMany(filter, update, options) Declare and/or execute this query as an updateMany() operation. Same as update(), except MongoDB will update _all_ documents that match filter (as opposed to just the first one) regardless of the value of the multi option. updateOne(filter, update, options) Declare and/or execute this query as an updateOne() operation. Same as update(), except it does not support the multi or overwrite options. w(val) Sets the specified number of mongod servers, or tag set of mongod servers, that must acknowledge this write before this write is considered successful. where(path, val) Specifies a path for use with chaining. where(obj) where() within(val) Defines a $within or $geoWithin argument for geo-spatial queries. wtimeout(ms) If [w &gt; 1](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is 0, which means no timeout. ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.deleteone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.deleteOne() method​","type":1,"pageTitle":"goosetyped.documentquery.deleteone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone#documentquerydeleteone-method","content":" Declare and/or execute this query as a deleteOne() operation. Works like remove, except it deletes at most one document regardless of the single option.  Signature:  deleteOne(filter?: M.FilterQuery&lt;RawDocType&gt;, options?: M.QueryOptions&lt;DocType&gt;): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.deleteone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions&lt;DocType&gt; (Optional)  Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.cursor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cursor","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.cursor() method​","type":1,"pageTitle":"goosetyped.documentquery.cursor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cursor#documentquerycursor-method","content":" Returns a wrapper around a [mongodb driver cursor](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html). A QueryCursor exposes a Streams3 interface, as well as a .next() function.  Signature:  cursor(options?: M.QueryOptions&lt;DocType&gt;): M.Cursor&lt;M.Unpacked&lt;ResultType&gt;, M.QueryOptions&lt;DocType&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.cursor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.cursor#parameters","content":" Parameter Type Description options M.QueryOptions&lt;DocType&gt; (Optional)  Returns:  M.Cursor&lt;M.Unpacked&lt;ResultType&gt;, M.QueryOptions&lt;DocType&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.deleteone_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.deleteOne() method​","type":1,"pageTitle":"goosetyped.documentquery.deleteone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone_1#documentquerydeleteone-method","content":" Signature:  deleteOne(filter: M.FilterQuery&lt;RawDocType&gt;): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.deleteone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone_1#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt;   Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.elemmatch_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.elemMatch() method​","type":1,"pageTitle":"goosetyped.documentquery.elemmatch_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch_1#documentqueryelemmatch-method","content":" Signature:  elemMatch(val: Function | any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.elemmatch_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch_1#parameters","content":" Parameter Type Description val Function | any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.distinct","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.distinct","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.distinct() method​","type":1,"pageTitle":"goosetyped.documentquery.distinct","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.distinct#documentquerydistinct-method","content":" Creates a distinct query: returns the distinct values of the given field that match filter.  Signature:  distinct&lt;DocKey extends string, ResultType = unknown&gt;(field: DocKey, filter?: M.FilterQuery&lt;RawDocType&gt;): DocumentQuery&lt;Array&lt;DocKey extends keyof DocType ? M.Unpacked&lt;DocType[DocKey]&gt; : ResultType&gt;, DocType, THelpers, RawDocType, 'distinct'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.distinct","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.distinct#parameters","content":" Parameter Type Description field DocKey filter M.FilterQuery&lt;RawDocType&gt; (Optional)  Returns:  DocumentQuery&lt;Array&lt;DocKey extends keyof DocType ? M.Unpacked&lt;DocType[DocKey]&gt; : ResultType&gt;, DocType, THelpers, RawDocType, 'distinct'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.elemmatch","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.elemMatch() method​","type":1,"pageTitle":"goosetyped.documentquery.elemmatch","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch#documentqueryelemmatch-method","content":" Specifies a $elemMatch query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  elemMatch&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.elemmatch","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.elemmatch#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.error_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.error_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.error() method​","type":1,"pageTitle":"goosetyped.documentquery.error_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.error_1#documentqueryerror-method","content":" Signature:  error(val: NativeError | null): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.error_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.error_1#parameters","content":" Parameter Type Description val NativeError | null   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.error","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.error","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.error() method​","type":1,"pageTitle":"goosetyped.documentquery.error","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.error#documentqueryerror-method","content":" Gets/sets the error flag on this query. If this flag is not null or undefined, the exec() promise will reject without executing.  Signature:  error(): NativeError | null;   Returns:  NativeError | null ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.exec","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exec","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.equals","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.equals","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.equals() method​","type":1,"pageTitle":"goosetyped.documentquery.equals","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.equals#documentqueryequals-method","content":" Specifies the complementary comparison value for paths specified with where()  Signature:  equals(val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.equals","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.equals#parameters","content":" Parameter Type Description val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.estimateddocumentcount","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.estimateddocumentcount","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.estimatedDocumentCount() method​","type":1,"pageTitle":"goosetyped.documentquery.estimateddocumentcount","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.estimateddocumentcount#documentqueryestimateddocumentcount-method","content":" Creates a estimatedDocumentCount query: counts the number of documents in the collection.  Signature:  estimatedDocumentCount(options?: M.QueryOptions&lt;DocType&gt;): DocumentQuery&lt;number, DocType, THelpers, RawDocType, 'estimatedDocumentCount'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.estimateddocumentcount","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.estimateddocumentcount#parameters","content":" Parameter Type Description options M.QueryOptions&lt;DocType&gt; (Optional)  Returns:  DocumentQuery&lt;number, DocType, THelpers, RawDocType, 'estimatedDocumentCount'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.exec() method​","type":1,"pageTitle":"goosetyped.documentquery.exec","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exec#documentqueryexec-method","content":" Executes the query  Signature:  exec(): Promise&lt;ResultType&gt;;   Returns:  Promise&lt;ResultType&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.explain","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.explain","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.exists","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.exists() method​","type":1,"pageTitle":"goosetyped.documentquery.exists","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists#documentqueryexists-method","content":" Specifies a $exists query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  exists&lt;K = string&gt;(path: K, val: boolean): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.exists","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists#parameters","content":" Parameter Type Description path K val boolean   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.deleteone_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.deleteOne() method​","type":1,"pageTitle":"goosetyped.documentquery.deleteone_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.deleteone_2#documentquerydeleteone-method","content":" Signature:  deleteOne(): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers;   Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'deleteOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.explain() method​","type":1,"pageTitle":"goosetyped.documentquery.explain","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.explain#documentqueryexplain-method","content":" Sets the [explain option](https://www.mongodb.com/docs/manual/reference/method/cursor.explain/), which makes this query return detailed execution stats instead of the actual query result. This method is useful for determining what index your queries use.  Signature:  explain(verbose?: mongodb.ExplainVerbosityLike): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.explain","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.explain#parameters","content":" Parameter Type Description verbose mongodb.ExplainVerbosityLike (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.exists_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.exists() method​","type":1,"pageTitle":"goosetyped.documentquery.exists_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists_1#documentqueryexists-method","content":" Signature:  exists(val: boolean): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.exists_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.exists_1#parameters","content":" Parameter Type Description val boolean   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.finally","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.finally","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.finally property​","type":1,"pageTitle":"goosetyped.documentquery.finally","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.finally#documentqueryfinally-property","content":" Executes the query returning a Promise which will be resolved with .finally() chained.  Signature:  finally: Promise&lt;ResultType&gt;['finally'];  ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.find_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.find() method​","type":1,"pageTitle":"goosetyped.documentquery.find_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_1#documentqueryfind-method","content":" Signature:  find(filter: M.FilterQuery&lt;RawDocType&gt;, projection?: M.ProjectionType&lt;RawDocType&gt; | null): DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.find_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_1#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; projection M.ProjectionType&lt;RawDocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.find_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_3","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.find() method​","type":1,"pageTitle":"goosetyped.documentquery.find_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_3#documentqueryfind-method","content":" Signature:  find(): DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers;   Returns:  DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyid_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findById() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyid_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_1#documentqueryfindbyid-method","content":" Signature:  findById(id: mongodb.ObjectId | any, projection?: M.ProjectionType&lt;RawDocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyid_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_1#parameters","content":" Parameter Type Description id mongodb.ObjectId | any projection M.ProjectionType&lt;RawDocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyid_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findById() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyid_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_2#documentqueryfindbyid-method","content":" Signature:  findById(id: mongodb.ObjectId | any): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.find_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.find() method​","type":1,"pageTitle":"goosetyped.documentquery.find_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_2#documentqueryfind-method","content":" Signature:  find(filter: M.FilterQuery&lt;RawDocType&gt;): DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.find_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find_2#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt;   Returns:  DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyid_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid_2#parameters","content":" Parameter Type Description id mongodb.ObjectId | any   Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyid","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findById() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid#documentqueryfindbyid-method","content":" Declares the query a findById operation. When executed, returns the document with the given _id.  Signature:  findById(id: mongodb.ObjectId | any, projection?: M.ProjectionType&lt;RawDocType&gt; | null, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyid#parameters","content":" Parameter Type Description id mongodb.ObjectId | any projection M.ProjectionType&lt;RawDocType&gt; | null (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidanddelete_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findByIdAndDelete() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidanddelete_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete_1#documentqueryfindbyidanddelete-method","content":" Signature:  findByIdAndDelete(id?: mongodb.ObjectId | any, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidanddelete","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findByIdAndDelete() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidanddelete","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete#documentqueryfindbyidanddelete-method","content":" Creates a findByIdAndDelete query, filtering by the given _id.  Signature:  findByIdAndDelete(id: mongodb.ObjectId | any, options: M.QueryOptions&lt;DocType&gt; &amp; { includeResultMetadata: true; }): DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidanddelete","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete#parameters","content":" Parameter Type Description id mongodb.ObjectId | any options M.QueryOptions&lt;DocType&gt; &amp; { includeResultMetadata: true; }   Returns:  DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidanddelete_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidanddelete_1#parameters","content":" Parameter Type Description id mongodb.ObjectId | any (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidandupdate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findByIdAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate#documentqueryfindbyidandupdate-method","content":" Creates a findOneAndUpdate query, filtering by the given _id.  Signature:  findByIdAndUpdate(id: mongodb.ObjectId | any, update: M.UpdateQuery&lt;RawDocType&gt;, options: M.QueryOptions&lt;DocType&gt; &amp; { includeResultMetadata: true; }): DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate#parameters","content":" Parameter Type Description id mongodb.ObjectId | any update M.UpdateQuery&lt;RawDocType&gt; options M.QueryOptions&lt;DocType&gt; &amp; { includeResultMetadata: true; }   Returns:  DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.find","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.find() method​","type":1,"pageTitle":"goosetyped.documentquery.find","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find#documentqueryfind-method","content":" Creates a find query: gets a list of documents that match filter.  Signature:  find(filter: M.FilterQuery&lt;RawDocType&gt;, projection?: M.ProjectionType&lt;RawDocType&gt; | null, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.find","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.find#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; projection M.ProjectionType&lt;RawDocType&gt; | null (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;Array&lt;DocType&gt;, DocType, THelpers, RawDocType, 'find'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidandupdate_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findByIdAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_2#documentqueryfindbyidandupdate-method","content":" Signature:  findByIdAndUpdate(id?: mongodb.ObjectId | any, update?: M.UpdateQuery&lt;RawDocType&gt;, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_2#parameters","content":" Parameter Type Description id mongodb.ObjectId | any (Optional) update M.UpdateQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidandupdate_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findByIdAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_1#documentqueryfindbyidandupdate-method","content":" Signature:  findByIdAndUpdate(id: mongodb.ObjectId | any, update: M.UpdateQuery&lt;RawDocType&gt;, options: M.QueryOptions&lt;DocType&gt; &amp; { upsert: true; } &amp; M.ReturnsNewDoc): DocumentQuery&lt;DocType, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_1#parameters","content":" Parameter Type Description id mongodb.ObjectId | any update M.UpdateQuery&lt;RawDocType&gt; options M.QueryOptions&lt;DocType&gt; &amp; { upsert: true; } &amp; M.ReturnsNewDoc   Returns:  DocumentQuery&lt;DocType, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findone_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOne() method​","type":1,"pageTitle":"goosetyped.documentquery.findone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_1#documentqueryfindone-method","content":" Signature:  findOne(filter?: M.FilterQuery&lt;RawDocType&gt;, projection?: M.ProjectionType&lt;RawDocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_1#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) projection M.ProjectionType&lt;RawDocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOne() method​","type":1,"pageTitle":"goosetyped.documentquery.findone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone#documentqueryfindone-method","content":" Declares the query a findOne operation. When executed, the first found document is passed to the callback.  Signature:  findOne(filter?: M.FilterQuery&lt;RawDocType&gt;, projection?: M.ProjectionType&lt;RawDocType&gt; | null, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) projection M.ProjectionType&lt;RawDocType&gt; | null (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findoneanddelete","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneanddelete","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOneAndDelete() method​","type":1,"pageTitle":"goosetyped.documentquery.findoneanddelete","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneanddelete#documentqueryfindoneanddelete-method","content":" Creates a findOneAndDelete query: atomically finds the given document, deletes it, and returns the document as it was before deletion.  Signature:  findOneAndDelete(filter?: M.FilterQuery&lt;RawDocType&gt;, options?: M.QueryOptions | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findoneanddelete","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneanddelete#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndDelete'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findbyidandupdate_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_3","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.findoneandupdate_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOneAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_1#documentqueryfindoneandupdate-method","content":" Signature:  findOneAndUpdate(filter: M.FilterQuery&lt;RawDocType&gt;, update: M.UpdateQuery&lt;RawDocType&gt;, options: M.QueryOptions &amp; { upsert: true; } &amp; M.ReturnsNewDoc): DocumentQuery&lt;DocType, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_1#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; update M.UpdateQuery&lt;RawDocType&gt; options M.QueryOptions &amp; { upsert: true; } &amp; M.ReturnsNewDoc   Returns:  DocumentQuery&lt;DocType, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.findByIdAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_3#documentqueryfindbyidandupdate-method","content":" Signature:  findByIdAndUpdate(id: mongodb.ObjectId | any, update: M.UpdateQuery&lt;RawDocType&gt;): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findbyidandupdate_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findbyidandupdate_3#parameters","content":" Parameter Type Description id mongodb.ObjectId | any update M.UpdateQuery&lt;RawDocType&gt;   Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findone_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOne() method​","type":1,"pageTitle":"goosetyped.documentquery.findone_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_2#documentqueryfindone-method","content":" Signature:  findOne(filter?: M.FilterQuery&lt;RawDocType&gt;): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findone_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findone_2#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.geometry","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.geometry","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.geometry() method​","type":1,"pageTitle":"goosetyped.documentquery.geometry","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.geometry#documentquerygeometry-method","content":" Specifies a $geometry condition  Signature:  geometry(object: { type: string; coordinates: any[]; }): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.geometry","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.geometry#parameters","content":" Parameter Type Description object { type: string; coordinates: any[]; }   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findoneandupdate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOneAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate#documentqueryfindoneandupdate-method","content":" Creates a findOneAndUpdate query: atomically find the first document that matches filter and apply update.  Signature:  findOneAndUpdate(filter: M.FilterQuery&lt;RawDocType&gt;, update: M.UpdateQuery&lt;RawDocType&gt;, options: M.QueryOptions &amp; { includeResultMetadata: true; }): DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; update M.UpdateQuery&lt;RawDocType&gt; options M.QueryOptions &amp; { includeResultMetadata: true; }   Returns:  DocumentQuery&lt;M.ModifyResult&lt;DocType&gt;, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.getfilter","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getfilter","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.getFilter() method​","type":1,"pageTitle":"goosetyped.documentquery.getfilter","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getfilter#documentquerygetfilter-method","content":" Returns the current query filter (also known as conditions) as a POJO.  Signature:  getFilter(): M.FilterQuery&lt;DocType&gt;;   Returns:  M.FilterQuery&lt;DocType&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.getoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getoptions","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.getOptions() method​","type":1,"pageTitle":"goosetyped.documentquery.getoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getoptions#documentquerygetoptions-method","content":" Gets query options.  Signature:  getOptions(): M.QueryOptions;   Returns:  M.QueryOptions ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.getpopulatedpaths","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getpopulatedpaths","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.getPopulatedPaths() method​","type":1,"pageTitle":"goosetyped.documentquery.getpopulatedpaths","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getpopulatedpaths#documentquerygetpopulatedpaths-method","content":" Gets a list of paths to be populated by this query  Signature:  getPopulatedPaths(): Array&lt;string&gt;;   Returns:  Array&lt;string&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.get","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.get","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.get() method​","type":1,"pageTitle":"goosetyped.documentquery.get","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.get#documentqueryget-method","content":" For update operations, returns the value of a path in the update's $set. Useful for writing getters/setters that can work with both update operations and save().  Signature:  get(path: string): any;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.get","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.get#parameters","content":" Parameter Type Description path string   Returns:  any ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.getquery","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getquery","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.getQuery() method​","type":1,"pageTitle":"goosetyped.documentquery.getquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getquery#documentquerygetquery-method","content":" Returns the current query filter. Equivalent to getFilter().  Signature:  getQuery(): M.FilterQuery&lt;DocType&gt;;   Returns:  M.FilterQuery&lt;DocType&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.findoneandupdate_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.findOneAndUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_2#documentqueryfindoneandupdate-method","content":" Signature:  findOneAndUpdate(filter?: M.FilterQuery&lt;RawDocType&gt;, update?: M.UpdateQuery&lt;RawDocType&gt;, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.findoneandupdate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.findoneandupdate_2#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) update M.UpdateQuery&lt;RawDocType&gt; (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;DocType | null, DocType, THelpers, RawDocType, 'findOneAndUpdate'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.getupdate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getupdate","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.getUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.getupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.getupdate#documentquerygetupdate-method","content":" Returns the current update operations as a JSON object.  Signature:  getUpdate(): M.UpdateQuery&lt;DocType&gt; | null;   Returns:  M.UpdateQuery&lt;DocType&gt; | null ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.gte","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.gte() method​","type":1,"pageTitle":"goosetyped.documentquery.gte","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte#documentquerygte-method","content":" Specifies a $gte query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  gte&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.gte","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.gt_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.gt() method​","type":1,"pageTitle":"goosetyped.documentquery.gt_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt_1#documentquerygt-method","content":" Signature:  gt(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.gt_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.in","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.gt","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.gt() method​","type":1,"pageTitle":"goosetyped.documentquery.gt","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt#documentquerygt-method","content":" Specifies a $gt query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  gt&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.gt","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gt#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.hint","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.hint","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.hint() method​","type":1,"pageTitle":"goosetyped.documentquery.hint","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.hint#documentqueryhint-method","content":" Sets query hints.  Signature:  hint(val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.hint","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.hint#parameters","content":" Parameter Type Description val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.in() method​","type":1,"pageTitle":"goosetyped.documentquery.in","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in#documentqueryin-method","content":" Specifies an $in query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  in&lt;K = string&gt;(path: K, val: any[]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.in","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in#parameters","content":" Parameter Type Description path K val any[]   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.gte_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.gte() method​","type":1,"pageTitle":"goosetyped.documentquery.gte_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte_1#documentquerygte-method","content":" Signature:  gte(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.gte_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.gte_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.in_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.in() method​","type":1,"pageTitle":"goosetyped.documentquery.in_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in_1#documentqueryin-method","content":" Signature:  in(val: Array&lt;any&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.in_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.in_1#parameters","content":" Parameter Type Description val Array&lt;any&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.lean","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lean","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.lean() method​","type":1,"pageTitle":"goosetyped.documentquery.lean","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lean#documentquerylean-method","content":" Signature:  lean&lt;LeanResultType = M.GetLeanResultType&lt;RawDocType, ResultType, QueryOp&gt;&gt;(val?: boolean | any): DocumentQuery&lt;ResultType extends null ? LeanResultType | null : LeanResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.lean","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lean#parameters","content":" Parameter Type Description val boolean | any (Optional)  Returns:  DocumentQuery&lt;ResultType extends null ? LeanResultType | null : LeanResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.limit","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.limit","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.limit() method​","type":1,"pageTitle":"goosetyped.documentquery.limit","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.limit#documentquerylimit-method","content":" Specifies the maximum number of documents the query will return.  Signature:  limit(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.limit","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.limit#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.j","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.j","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.lt_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.lt() method​","type":1,"pageTitle":"goosetyped.documentquery.lt_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt_1#documentquerylt-method","content":" Signature:  lt(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.lt_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.intersects","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.intersects","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.intersects() method​","type":1,"pageTitle":"goosetyped.documentquery.intersects","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.intersects#documentqueryintersects-method","content":" Declares an intersects query for geometry().  Signature:  intersects(arg?: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.intersects","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.intersects#parameters","content":" Parameter Type Description arg any (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.j() method​","type":1,"pageTitle":"goosetyped.documentquery.j","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.j#documentqueryj-method","content":" Requests acknowledgement that this operation has been persisted to MongoDB's on-disk journal.  Signature:  j(val: boolean | null): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.j","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.j#parameters","content":" Parameter Type Description val boolean | null   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.lt","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.lt() method​","type":1,"pageTitle":"goosetyped.documentquery.lt","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt#documentquerylt-method","content":" Specifies a $lt query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  lt&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.lt","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lt#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.maxdistance","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.maxDistance() method​","type":1,"pageTitle":"goosetyped.documentquery.maxdistance","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance#documentquerymaxdistance-method","content":" Specifies an $maxDistance query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  maxDistance(path: string, val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.maxdistance","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance#parameters","content":" Parameter Type Description path string val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.lte","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.lte() method​","type":1,"pageTitle":"goosetyped.documentquery.lte","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte#documentquerylte-method","content":" Specifies a $lte query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  lte&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.lte","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.lte_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.lte() method​","type":1,"pageTitle":"goosetyped.documentquery.lte_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte_1#documentquerylte-method","content":" Signature:  lte(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.lte_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.lte_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.maxdistance_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.maxDistance() method​","type":1,"pageTitle":"goosetyped.documentquery.maxdistance_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance_1#documentquerymaxdistance-method","content":" Signature:  maxDistance(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.maxdistance_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxdistance_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.maxtimems","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxtimems","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.maxTimeMS() method​","type":1,"pageTitle":"goosetyped.documentquery.maxtimems","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxtimems#documentquerymaxtimems-method","content":" Sets the [maxTimeMS](https://www.mongodb.com/docs/manual/reference/method/cursor.maxTimeMS/) option. This will tell the MongoDB server to abort if the query or write op has been running for more than ms milliseconds.  Signature:  maxTimeMS(ms: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.maxtimems","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.maxtimems#parameters","content":" Parameter Type Description ms number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.model","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.model","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.model property​","type":1,"pageTitle":"goosetyped.documentquery.model","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.model#documentquerymodel-property","content":" The model this query was created from  Signature:  model: ExtModel&lt;DocType, unknown&gt;;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.mod_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.mod() method​","type":1,"pageTitle":"goosetyped.documentquery.mod_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod_1#documentquerymod-method","content":" Signature:  mod(val: Array&lt;number&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.mod_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod_1#parameters","content":" Parameter Type Description val Array&lt;number&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.mod","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.mod() method​","type":1,"pageTitle":"goosetyped.documentquery.mod","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod#documentquerymod-method","content":" Specifies a $mod condition, filters documents for documents whose path property is a number that is equal to remainder modulo divisor.  Signature:  mod&lt;K = string&gt;(path: K, val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.mod","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mod#parameters","content":" Parameter Type Description path K val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.merge","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.merge","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.merge() method​","type":1,"pageTitle":"goosetyped.documentquery.merge","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.merge#documentquerymerge-method","content":" Merges another Query or conditions object into this one.  Signature:  merge(source: M.Query&lt;any, any&gt; | M.FilterQuery&lt;RawDocType&gt; | DocumentQuery&lt;any, any&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.merge","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.merge#parameters","content":" Parameter Type Description source M.Query&lt;any, any&gt; | M.FilterQuery&lt;RawDocType&gt; | DocumentQuery&lt;any, any&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.mongooseoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mongooseoptions","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.mongooseOptions() method​","type":1,"pageTitle":"goosetyped.documentquery.mongooseoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mongooseoptions#documentquerymongooseoptions-method","content":" Getter/setter around the current mongoose-specific options for this query Below are the current Mongoose-specific options.  Signature:  mongooseOptions(val?: M.MongooseQueryOptions): M.MongooseQueryOptions;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.mongooseoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.mongooseoptions#parameters","content":" Parameter Type Description val M.MongooseQueryOptions (Optional)  Returns:  M.MongooseQueryOptions ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.ne","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.ne() method​","type":1,"pageTitle":"goosetyped.documentquery.ne","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne#documentqueryne-method","content":" Specifies a $ne query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  ne&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.ne","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.near","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.near() method​","type":1,"pageTitle":"goosetyped.documentquery.near","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near#documentquerynear-method","content":" Specifies a $near or $nearSphere condition  Signature:  near&lt;K = string&gt;(path: K, val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.near","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near#parameters","content":" Parameter Type Description path K val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.ne_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.ne() method​","type":1,"pageTitle":"goosetyped.documentquery.ne_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne_1#documentqueryne-method","content":" Signature:  ne(val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.ne_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.ne_1#parameters","content":" Parameter Type Description val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.near_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.near() method​","type":1,"pageTitle":"goosetyped.documentquery.near_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near_1#documentquerynear-method","content":" Signature:  near(val: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.near_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.near_1#parameters","content":" Parameter Type Description val any   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.nor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nor","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.nor() method​","type":1,"pageTitle":"goosetyped.documentquery.nor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nor#documentquerynor-method","content":" Specifies arguments for an $nor condition.  Signature:  nor(array: Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.nor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nor#parameters","content":" Parameter Type Description array Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.or","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.or","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.or() method​","type":1,"pageTitle":"goosetyped.documentquery.or","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.or#documentqueryor-method","content":" Specifies arguments for an $or condition.  Signature:  or(array: Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.or","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.or#parameters","content":" Parameter Type Description array Array&lt;M.FilterQuery&lt;RawDocType&gt;&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.nin_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.nin() method​","type":1,"pageTitle":"goosetyped.documentquery.nin_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin_1#documentquerynin-method","content":" Signature:  nin(val: Array&lt;any&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.nin_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin_1#parameters","content":" Parameter Type Description val Array&lt;any&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.nin","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.nin() method​","type":1,"pageTitle":"goosetyped.documentquery.nin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin#documentquerynin-method","content":" Specifies an $nin query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  nin&lt;K = string&gt;(path: K, val: any[]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.nin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.nin#parameters","content":" Parameter Type Description path K val any[]   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.polygon","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.orfail","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.orfail","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.orFail() method​","type":1,"pageTitle":"goosetyped.documentquery.orfail","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.orfail#documentqueryorfail-method","content":" Make this query throw an error if no documents match the given filter. This is handy for integrating with async/await, because orFail() saves you an extra if statement to check if no document was found.  Signature:  orFail(err?: NativeError | (() =&gt; NativeError)): DocumentQuery&lt;NonNullable&lt;ResultType&gt;, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.orfail","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.orfail#parameters","content":" Parameter Type Description err NativeError | (() =&gt; NativeError) (Optional)  Returns:  DocumentQuery&lt;NonNullable&lt;ResultType&gt;, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.polygon_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.polygon() method​","type":1,"pageTitle":"goosetyped.documentquery.polygon_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon_1#documentquerypolygon-method","content":" Signature:  polygon(...coordinatePairs: number[][]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.polygon_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon_1#parameters","content":" Parameter Type Description coordinatePairs number[][]   Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.polygon() method​","type":1,"pageTitle":"goosetyped.documentquery.polygon","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon#documentquerypolygon-method","content":" Specifies a $polygon condition  Signature:  polygon(path: string, ...coordinatePairs: number[][]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.polygon","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.polygon#parameters","content":" Parameter Type Description path string coordinatePairs number[][]   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.populate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.populate() method​","type":1,"pageTitle":"goosetyped.documentquery.populate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate#documentquerypopulate-method","content":" Specifies paths which should be populated with other documents.  Signature:  populate(path: string | string[], select?: string | any, model?: string | M.Model&lt;any, THelpers&gt;, match?: any): DocumentQuery&lt;ResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.populate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate#parameters","content":" Parameter Type Description path string | string[] select string | any (Optional) model string | M.Model&lt;any, THelpers&gt; (Optional) match any (Optional)  Returns:  DocumentQuery&lt;ResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.populate_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.populate() method​","type":1,"pageTitle":"goosetyped.documentquery.populate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_1#documentquerypopulate-method","content":" Signature:  populate(options: M.PopulateOptions | (M.PopulateOptions | string)[]): DocumentQuery&lt;ResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.populate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_1#parameters","content":" Parameter Type Description options M.PopulateOptions | (M.PopulateOptions | string)[]   Returns:  DocumentQuery&lt;ResultType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.populate_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_3","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.populate() method​","type":1,"pageTitle":"goosetyped.documentquery.populate_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_3#documentquerypopulate-method","content":" Signature:  populate&lt;Paths&gt;(options: M.PopulateOptions | (M.PopulateOptions | string)[]): DocumentQuery&lt;M.MergePopulatePaths&lt;RawDocType, ResultType, QueryOp, Paths, THelpers&gt;, DocType, THelpers, M.UnpackedIntersection&lt;RawDocType, Paths&gt;, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.populate_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_3#parameters","content":" Parameter Type Description options M.PopulateOptions | (M.PopulateOptions | string)[]   Returns:  DocumentQuery&lt;M.MergePopulatePaths&lt;RawDocType, ResultType, QueryOp, Paths, THelpers&gt;, DocType, THelpers, M.UnpackedIntersection&lt;RawDocType, Paths&gt;, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.populate_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.populate() method​","type":1,"pageTitle":"goosetyped.documentquery.populate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_2#documentquerypopulate-method","content":" Signature:  populate&lt;Paths&gt;(path: string | string[], select?: string | any, model?: string | M.Model&lt;any, THelpers&gt;, match?: any): DocumentQuery&lt;M.MergePopulatePaths&lt;RawDocType, ResultType, QueryOp, Paths, THelpers&gt;, DocType, THelpers, M.UnpackedIntersection&lt;RawDocType, Paths&gt;, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.populate_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.populate_2#parameters","content":" Parameter Type Description path string | string[] select string | any (Optional) model string | M.Model&lt;any, THelpers&gt; (Optional) match any (Optional)  Returns:  DocumentQuery&lt;M.MergePopulatePaths&lt;RawDocType, ResultType, QueryOp, Paths, THelpers&gt;, DocType, THelpers, M.UnpackedIntersection&lt;RawDocType, Paths&gt;, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.post","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.post","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.post() method​","type":1,"pageTitle":"goosetyped.documentquery.post","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.post#documentquerypost-method","content":" Add post middleware to this query instance. Doesn't affect other queries.  Signature:  post(fn: Function): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.post","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.post#parameters","content":" Parameter Type Description fn Function   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.projection_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection_2","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.pre","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.pre","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.pre() method​","type":1,"pageTitle":"goosetyped.documentquery.pre","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.pre#documentquerypre-method","content":" Add pre middleware to this query instance. Doesn't affect other queries.  Signature:  pre(fn: Function): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.pre","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.pre#parameters","content":" Parameter Type Description fn Function   Returns:  this ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.projection() method​","type":1,"pageTitle":"goosetyped.documentquery.projection_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection_2#documentqueryprojection-method","content":" Signature:  projection(): M.ProjectionFields&lt;DocType&gt; | null;   Returns:  M.ProjectionFields&lt;DocType&gt; | null ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.projection_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.projection() method​","type":1,"pageTitle":"goosetyped.documentquery.projection_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection_1#documentqueryprojection-method","content":" Signature:  projection(fields: null): null;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.projection_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection_1#parameters","content":" Parameter Type Description fields null   Returns:  null ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.projection","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.projection() method​","type":1,"pageTitle":"goosetyped.documentquery.projection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection#documentqueryprojection-method","content":" Get/set the current projection (AKA fields). Pass null to remove the current projection.  Signature:  projection(fields?: M.ProjectionFields&lt;DocType&gt; | string): M.ProjectionFields&lt;DocType&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.projection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.projection#parameters","content":" Parameter Type Description fields M.ProjectionFields&lt;DocType&gt; | string (Optional)  Returns:  M.ProjectionFields&lt;DocType&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.readconcern","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.readconcern","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.readConcern() method​","type":1,"pageTitle":"goosetyped.documentquery.readconcern","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.readconcern#documentqueryreadconcern-method","content":" Sets the readConcern option for the query.  Signature:  readConcern(level: string): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.readconcern","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.readconcern#parameters","content":" Parameter Type Description level string   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.regex","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.regex() method​","type":1,"pageTitle":"goosetyped.documentquery.regex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex#documentqueryregex-method","content":" Specifies a $regex query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  regex&lt;K = string&gt;(path: K, val: RegExp): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.regex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex#parameters","content":" Parameter Type Description path K val RegExp   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.regex_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.regex() method​","type":1,"pageTitle":"goosetyped.documentquery.regex_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex_1#documentqueryregex-method","content":" Signature:  regex(val: string | RegExp): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.regex_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.regex_1#parameters","content":" Parameter Type Description val string | RegExp   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.replaceone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.replaceone","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.replaceOne() method​","type":1,"pageTitle":"goosetyped.documentquery.replaceone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.replaceone#documentqueryreplaceone-method","content":" Declare and/or execute this query as a replaceOne() operation. Same as update(), except MongoDB will replace the existing document and will not accept any [atomic](https://www.mongodb.com/docs/manual/tutorial/model-data-for-atomic-operations/\\#pattern) operators ($set, etc.)  Signature:  replaceOne(filter?: M.FilterQuery&lt;RawDocType&gt;, replacement?: DocType | M.AnyObject, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'replaceOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.replaceone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.replaceone#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) replacement DocType | M.AnyObject (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;any, DocType, THelpers, RawDocType, 'replaceOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.selected","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selected","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.selected() method​","type":1,"pageTitle":"goosetyped.documentquery.selected","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selected#documentqueryselected-method","content":" Determines if field selection has been made.  Signature:  selected(): boolean;   Returns:  boolean ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.selectedexclusively","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selectedexclusively","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.selectedExclusively() method​","type":1,"pageTitle":"goosetyped.documentquery.selectedexclusively","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selectedexclusively#documentqueryselectedexclusively-method","content":" Determines if exclusive field selection has been made.  Signature:  selectedExclusively(): boolean;   Returns:  boolean ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.read","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.read","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.read() method​","type":1,"pageTitle":"goosetyped.documentquery.read","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.read#documentqueryread-method","content":" Determines the MongoDB nodes from which to read.  Signature:  read(pref: string | mongodb.ReadPreferenceMode, tags?: any[]): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.read","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.read#parameters","content":" Parameter Type Description pref string | mongodb.ReadPreferenceMode tags any[] (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.selectedinclusively","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selectedinclusively","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.selectedInclusively() method​","type":1,"pageTitle":"goosetyped.documentquery.selectedinclusively","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.selectedinclusively#documentqueryselectedinclusively-method","content":" Determines if inclusive field selection has been made.  Signature:  selectedInclusively(): boolean;   Returns:  boolean ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.select","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.select","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.select() method​","type":1,"pageTitle":"goosetyped.documentquery.select","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.select#documentqueryselect-method","content":" Specifies which document fields to include or exclude (also known as the query &quot;projection&quot;)  Signature:  select&lt;RawDocTypeOverride extends { [P in keyof RawDocType]?: any; } = {}&gt;(arg: string | string[] | Record&lt;string, number | boolean | string | object&gt;): DocumentQuery&lt;M.IfEquals&lt;RawDocTypeOverride, {}, ResultType, ResultType extends any[] ? ResultType extends M.HydratedDocument&lt;any&gt;[] ? M.HydratedDocument&lt;RawDocTypeOverride&gt;[] : RawDocTypeOverride[] : (ResultType extends M.HydratedDocument&lt;any&gt; ? M.HydratedDocument&lt;RawDocTypeOverride&gt; : RawDocTypeOverride) | (null extends ResultType ? null : never)&gt;, DocType, THelpers, M.IfEquals&lt;RawDocTypeOverride, {}, RawDocType, RawDocTypeOverride&gt;, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.select","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.select#parameters","content":" Parameter Type Description arg string | string[] | Record&lt;string, number | boolean | string | object&gt;   Returns:  DocumentQuery&lt;M.IfEquals&lt;RawDocTypeOverride, {}, ResultType, ResultType extends any[] ? ResultType extends M.HydratedDocument&lt;any&gt;[] ? M.HydratedDocument&lt;RawDocTypeOverride&gt;[] : RawDocTypeOverride[] : (ResultType extends M.HydratedDocument&lt;any&gt; ? M.HydratedDocument&lt;RawDocTypeOverride&gt; : RawDocTypeOverride) | (null extends ResultType ? null : never)&gt;, DocType, THelpers, M.IfEquals&lt;RawDocTypeOverride, {}, RawDocType, RawDocTypeOverride&gt;, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.session","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.session","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.session() method​","type":1,"pageTitle":"goosetyped.documentquery.session","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.session#documentquerysession-method","content":" Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this query. Sessions are how you mark a query as part of a [transaction](/docs/transactions.html).  Signature:  session(session: mongodb.ClientSession | null): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.session","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.session#parameters","content":" Parameter Type Description session mongodb.ClientSession | null   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.set","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.set","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.set() method​","type":1,"pageTitle":"goosetyped.documentquery.set","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.set#documentqueryset-method","content":" Adds a $set to this query's update without changing the operation. This is useful for query middleware so you can add an update regardless of whether you use updateOne(), updateMany(), findOneAndUpdate(), etc.  Signature:  set(path: string | Record&lt;string, unknown&gt;, value?: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.set","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.set#parameters","content":" Parameter Type Description path string | Record&lt;string, unknown&gt; value any (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.setoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setoptions","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.setOptions() method​","type":1,"pageTitle":"goosetyped.documentquery.setoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setoptions#documentquerysetoptions-method","content":" Sets query options. Some options only make sense for certain operations.  Signature:  setOptions(options: M.QueryOptions&lt;DocType&gt;, overwrite?: boolean): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.setoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setoptions#parameters","content":" Parameter Type Description options M.QueryOptions&lt;DocType&gt; overwrite boolean (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.setupdate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setupdate","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.setUpdate() method​","type":1,"pageTitle":"goosetyped.documentquery.setupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setupdate#documentquerysetupdate-method","content":" Signature:  setUpdate(update: M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline): void;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.setupdate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setupdate#parameters","content":" Parameter Type Description update M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline   Returns:  void ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.size","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.size() method​","type":1,"pageTitle":"goosetyped.documentquery.size","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size#documentquerysize-method","content":" Specifies an $size query condition. When called with one argument, the most recent path passed to where() is used.  Signature:  size&lt;K = string&gt;(path: K, val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.size","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size#parameters","content":" Parameter Type Description path K val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.size_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.size() method​","type":1,"pageTitle":"goosetyped.documentquery.size_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size_1#documentquerysize-method","content":" Signature:  size(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.size_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.size_1#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.setquery","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setquery","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.setQuery() method​","type":1,"pageTitle":"goosetyped.documentquery.setquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setquery#documentquerysetquery-method","content":" Sets the query conditions to the provided JSON object.  Signature:  setQuery(val: M.FilterQuery&lt;RawDocType&gt; | null): void;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.setquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.setquery#parameters","content":" Parameter Type Description val M.FilterQuery&lt;RawDocType&gt; | null   Returns:  void ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.skip","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.skip","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.skip() method​","type":1,"pageTitle":"goosetyped.documentquery.skip","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.skip#documentqueryskip-method","content":" Specifies the number of documents to skip.  Signature:  skip(val: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.skip","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.skip#parameters","content":" Parameter Type Description val number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.slice_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.slice() method​","type":1,"pageTitle":"goosetyped.documentquery.slice_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice_1#documentqueryslice-method","content":" Signature:  slice(val: number | Array&lt;number&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.slice_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice_1#parameters","content":" Parameter Type Description val number | Array&lt;number&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.tailable","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.tailable","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.then","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.then","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.then property​","type":1,"pageTitle":"goosetyped.documentquery.then","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.then#documentquerythen-property","content":" Executes the query returning a Promise which will be resolved with either the doc(s) or rejected with the error.  Signature:  then: Promise&lt;ResultType&gt;['then'];  ","version":"Next","tagName":"h2"},{"title":"DocumentQuery.tailable() method​","type":1,"pageTitle":"goosetyped.documentquery.tailable","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.tailable#documentquerytailable-method","content":" Sets the tailable option (for use with capped collections).  Signature:  tailable(bool?: boolean, opts?: { numberOfRetries?: number; tailableRetryInterval?: number; }): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.tailable","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.tailable#parameters","content":" Parameter Type Description bool boolean (Optional) opts { numberOfRetries?: number; tailableRetryInterval?: number; } (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.slice","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.slice() method​","type":1,"pageTitle":"goosetyped.documentquery.slice","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice#documentqueryslice-method","content":" Specifies a $slice projection for an array.  Signature:  slice(path: string, val: number | Array&lt;number&gt;): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.slice","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.slice#parameters","content":" Parameter Type Description path string val number | Array&lt;number&gt;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.sort","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.sort","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.sort() method​","type":1,"pageTitle":"goosetyped.documentquery.sort","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.sort#documentquerysort-method","content":" Sets the sort order. If an object is passed, values allowed are asc, desc, ascending, descending, 1, and -1.  Signature:  sort(arg?: string | { [key: string]: M.SortOrder | { $meta: any; }; } | [string, M.SortOrder][] | undefined | null, options?: { override?: boolean; }): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.sort","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.sort#parameters","content":" Parameter Type Description arg string | { [key: string]: M.SortOrder | { $meta: any; }; } | [string, M.SortOrder][] | undefined | null (Optional) options { override?: boolean; } (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.updatemany","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updatemany","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.updateMany() method​","type":1,"pageTitle":"goosetyped.documentquery.updatemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updatemany#documentqueryupdatemany-method","content":" Declare and/or execute this query as an updateMany() operation. Same as update(), except MongoDB will update _all_ documents that match filter (as opposed to just the first one) regardless of the value of the multi option.  Signature:  updateMany(filter?: M.FilterQuery&lt;RawDocType&gt;, update?: M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;M.UpdateWriteOpResult, DocType, THelpers, RawDocType, 'updateMany'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.toconstructor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.toconstructor","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.toConstructor() method​","type":1,"pageTitle":"goosetyped.documentquery.toconstructor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.toconstructor#documentquerytoconstructor-method","content":" Converts this query to a customized, reusable query constructor with all arguments and options retained.  Signature:  toConstructor&lt;RetType = typeof M.Query&gt;(): RetType;   Returns:  RetType ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.updatemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updatemany#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) update M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;M.UpdateWriteOpResult, DocType, THelpers, RawDocType, 'updateMany'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.updateone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updateone","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.updateOne() method​","type":1,"pageTitle":"goosetyped.documentquery.updateone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updateone#documentqueryupdateone-method","content":" Declare and/or execute this query as an updateOne() operation. Same as update(), except it does not support the multi or overwrite options.  Signature:  updateOne(filter?: M.FilterQuery&lt;RawDocType&gt;, update?: M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline, options?: M.QueryOptions&lt;DocType&gt; | null): DocumentQuery&lt;M.UpdateWriteOpResult, DocType, THelpers, RawDocType, 'updateOne'&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.updateone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.updateone#parameters","content":" Parameter Type Description filter M.FilterQuery&lt;RawDocType&gt; (Optional) update M.UpdateQuery&lt;RawDocType&gt; | M.UpdateWithAggregationPipeline (Optional) options M.QueryOptions&lt;DocType&gt; | null (Optional)  Returns:  DocumentQuery&lt;M.UpdateWriteOpResult, DocType, THelpers, RawDocType, 'updateOne'&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.transform","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.transform","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.transform() method​","type":1,"pageTitle":"goosetyped.documentquery.transform","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.transform#documentquerytransform-method","content":" Runs a function fn and treats the return value of fn as the new value for the query to resolve to.  Signature:  transform&lt;MappedType&gt;(fn: (doc: ResultType) =&gt; MappedType): DocumentQuery&lt;MappedType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.transform","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.transform#parameters","content":" Parameter Type Description fn (doc: ResultType) =&gt; MappedType   Returns:  DocumentQuery&lt;MappedType, DocType, THelpers, RawDocType, QueryOp&gt; &amp; THelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.where","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.where() method​","type":1,"pageTitle":"goosetyped.documentquery.where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where#documentquerywhere-method","content":" Specifies a path for use with chaining.  Signature:  where(path: string, val?: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where#parameters","content":" Parameter Type Description path string val any (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.where_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where_1","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.where() method​","type":1,"pageTitle":"goosetyped.documentquery.where_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where_1#documentquerywhere-method","content":" Signature:  where(obj: object): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.where_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where_1#parameters","content":" Parameter Type Description obj object   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.where_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where_2","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.where() method​","type":1,"pageTitle":"goosetyped.documentquery.where_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.where_2#documentquerywhere-method","content":" Signature:  where(): this;   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.within","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.within","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.within() method​","type":1,"pageTitle":"goosetyped.documentquery.within","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.within#documentquerywithin-method","content":" Defines a $within or $geoWithin argument for geo-spatial queries.  Signature:  within(val?: any): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.within","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.within#parameters","content":" Parameter Type Description val any (Optional)  Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.findmodels","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.findmodels","content":"","keywords":"","version":"Next"},{"title":"findModels() function​","type":1,"pageTitle":"goosetyped.findmodels","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.findmodels#findmodels-function","content":" Return all Models / Resources registered in GooseTyped  Signature:  export declare function findModels(): Array&lt;Model&lt;any&gt; | Resource&gt;;   Returns:  Array&lt;Model&lt;any&gt; | Resource&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.documentquery.w","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.w","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.w() method​","type":1,"pageTitle":"goosetyped.documentquery.w","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.w#documentqueryw-method","content":" Sets the specified number of mongod servers, or tag set of mongod servers, that must acknowledge this write before this write is considered successful.  Signature:  w(val: string | number | null): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.w","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.w#parameters","content":" Parameter Type Description val string | number | null   Returns:  this ","version":"Next","tagName":"h2"},{"title":"goosetyped.getdiscriminatorkeysof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeysof","content":"","keywords":"","version":"Next"},{"title":"goosetyped.documentquery.wtimeout","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.wtimeout","content":"","keywords":"","version":"Next"},{"title":"DocumentQuery.wtimeout() method​","type":1,"pageTitle":"goosetyped.documentquery.wtimeout","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.wtimeout#documentquerywtimeout-method","content":" If [w &gt; 1](/docs/api.html#query_Query-w), the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is 0, which means no timeout.  Signature:  wtimeout(ms: number): this;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.documentquery.wtimeout","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.documentquery.wtimeout#parameters","content":" Parameter Type Description ms number   Returns:  this ","version":"Next","tagName":"h2"},{"title":"getDiscriminatorKeysOf() function​","type":1,"pageTitle":"goosetyped.getdiscriminatorkeysof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeysof#getdiscriminatorkeysof-function","content":" Returns the discriminator keys for the provided Model / Resource.  Signature:  export declare function getDiscriminatorKeysOf(modelClass: Ctor&lt;any&gt;): string[];   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.getdiscriminatorkeysof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeysof#parameters","content":" Parameter Type Description modelClass Ctor&lt;any&gt;   Returns:  string[] ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtbeforecompilemodelhandler","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler","content":"","keywords":"","version":"Next"},{"title":"goosetyped.getenum","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getenum","content":"","keywords":"","version":"Next"},{"title":"getEnum() function​","type":1,"pageTitle":"goosetyped.getenum","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getenum#getenum-function","content":" Returns the list of enums registered for a path in a Model / Resource.  Signature:  export declare function getEnum&lt;T&gt;(cls: Ctor&lt;T&gt;, path: keyof T): string[];   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.getenum","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getenum#parameters","content":" Parameter Type Description cls Ctor&lt;T&gt; path keyof T   Returns:  string[] ","version":"Next","tagName":"h2"},{"title":"goosetyped.getschemaof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getschemaof","content":"","keywords":"","version":"Next"},{"title":"getSchemaOf() function​","type":1,"pageTitle":"goosetyped.getschemaof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getschemaof#getschemaof-function","content":" Returns the mongoose schema for the provided Model / Resource  Signature:  export declare function getSchemaOf&lt;T&gt;(modelClass: Ctor&lt;T&gt;): Schema | undefined;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.getschemaof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getschemaof#parameters","content":" Parameter Type Description modelClass Ctor&lt;T&gt;   Returns:  Schema | undefined ","version":"Next","tagName":"h2"},{"title":"GtBeforeCompileModelHandler interface​","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler#gtbeforecompilemodelhandler-interface","content":" Signature:  export interface GtBeforeCompileModelHandler   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler#properties","content":" Property Modifiers Type Description schema mongoose.Schema target Ctor&lt;any&gt;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.getdiscriminatorkeyfor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeyfor","content":"","keywords":"","version":"Next"},{"title":"getDiscriminatorKeyFor() function​","type":1,"pageTitle":"goosetyped.getdiscriminatorkeyfor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeyfor#getdiscriminatorkeyfor-function","content":" Returns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value.  Signature:  export declare function getDiscriminatorKeyFor(modelClass: Ctor&lt;any&gt;): string | undefined;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.getdiscriminatorkeyfor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.getdiscriminatorkeyfor#parameters","content":" Parameter Type Description modelClass Ctor&lt;any&gt;   Returns:  string | undefined ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtbeforecompilemodelhandler.schema","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler.schema","content":"","keywords":"","version":"Next"},{"title":"GtBeforeCompileModelHandler.schema property​","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler.schema","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler.schema#gtbeforecompilemodelhandlerschema-property","content":" Signature:  schema: mongoose.Schema;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumn","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumn","content":"","keywords":"","version":"Next"},{"title":"GtColumn() function​","type":1,"pageTitle":"goosetyped.gtcolumn","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumn#gtcolumn-function","content":" Signature:  export declare function GtColumn&lt;T = any&gt;(metadata?: GtColumnMetadataArgs&lt;T&gt;): PropertyDecoratorOf&lt;any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtcolumn","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumn#parameters","content":" Parameter Type Description metadata GtColumnMetadataArgs&lt;T&gt; (Optional)  Returns:  PropertyDecoratorOf&lt;any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtbeforecompilemodelhandler.target","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler.target","content":"","keywords":"","version":"Next"},{"title":"GtBeforeCompileModelHandler.target property​","type":1,"pageTitle":"goosetyped.gtbeforecompilemodelhandler.target","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtbeforecompilemodelhandler.target#gtbeforecompilemodelhandlertarget-property","content":" Signature:  target: Ctor&lt;any&gt;;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs#gtcolumnmetadataargs-interface","content":" Signature:  export interface GtColumnMetadataArgs&lt;T&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs#properties","content":" Property Modifiers Type Description default? T | ((...args: any[]) =&gt; T) (Optional) Sets a default value or value for the path. If the value is a function, the return value of the function is used as the default. https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-default enum? string[] | number[] | object (Optional) immutable? boolean (Optional) Defines this path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-immutable required? ColumnRequired (Optional) If true adds a required validator for this property https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-required select? boolean (Optional) Set to true if this path should always be included in the results, false if it should be excluded by default. This setting can be overridden at the query level. https://mongoosejs.com/docs/api/schematype.html\\#schematype\\_SchemaType-select skipVersioning? boolean (Optional) Allows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For sub-documents, include this on the parent document using the fully qualified path. You can also use the dedicated decorator @SkipVersioning() https://mongoosejs.com/docs/4.x/docs/guide.html\\#skipVersioning type? Schema | typeof SchemaType | (() =&gt; Type&lt;any, any&gt;) (Optional) Set's the type used by this column. validate? Validator (Optional) Adds validator(s) for this document path. Validators always receive the value to validate as their first argument and must return Boolean. Returning false means validation failed. https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.enum","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.enum","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.enum property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.enum","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.enum#gtcolumnmetadataargsenum-property","content":" Signature:  enum?: string[] | number[] | object;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.default","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.default","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.default property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.default","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.default#gtcolumnmetadataargsdefault-property","content":" Sets a default value or value for the path. If the value is a function, the return value of the function is used as the default.  https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-default  Signature:  default?: T | ((...args: any[]) =&gt; T);  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.immutable","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.immutable","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.immutable property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.immutable","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.immutable#gtcolumnmetadataargsimmutable-property","content":" Defines this path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has isNew: true.  https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-immutable  Signature:  immutable?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.select","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.select","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.select property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.select","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.select#gtcolumnmetadataargsselect-property","content":" Set to true if this path should always be included in the results, false if it should be excluded by default. This setting can be overridden at the query level.  https://mongoosejs.com/docs/api/schematype.html\\#schematype\\_SchemaType-select  Signature:  select?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.skipversioning","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.skipversioning","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.skipVersioning property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.skipversioning","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.skipversioning#gtcolumnmetadataargsskipversioning-property","content":" Allows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For sub-documents, include this on the parent document using the fully qualified path.  You can also use the dedicated decorator @SkipVersioning() https://mongoosejs.com/docs/4.x/docs/guide.html\\#skipVersioning  Signature:  skipVersioning?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.validate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.validate","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.validate property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.validate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.validate#gtcolumnmetadataargsvalidate-property","content":" Adds validator(s) for this document path. Validators always receive the value to validate as their first argument and must return Boolean. Returning false means validation failed.  https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate  Signature:  validate?: Validator;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.type","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.type","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.type property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.type","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.type#gtcolumnmetadataargstype-property","content":" Set's the type used by this column.  Signature:  type?: Schema | typeof SchemaType | (() =&gt; Type&lt;any, any&gt;);  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcolumnmetadataargs.required","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.required","content":"","keywords":"","version":"Next"},{"title":"GtColumnMetadataArgs.required property​","type":1,"pageTitle":"goosetyped.gtcolumnmetadataargs.required","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcolumnmetadataargs.required#gtcolumnmetadataargsrequired-property","content":" If true adds a required validator for this property  https://mongoosejs.com/docs/api/schematypeoptions.html\\#schematypeoptions\\_SchemaTypeOptions-required  Signature:  required?: ColumnRequired;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcompoundindexmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtCompoundIndexMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs#gtcompoundindexmetadataargs-interface","content":" Signature:  export interface GtCompoundIndexMetadataArgs   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs#properties","content":" Property Modifiers Type Description indices { [indexName: string]: GtIndexSortOrder; } options? GtIndexOptions (Optional) ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcompoundindexmetadataargs.indices","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs.indices","content":"","keywords":"","version":"Next"},{"title":"GtCompoundIndexMetadataArgs.indices property​","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs.indices","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs.indices#gtcompoundindexmetadataargsindices-property","content":" Signature:  indices: { [indexName: string]: GtIndexSortOrder; };  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtconnectoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions","content":"","keywords":"","version":"Next"},{"title":"GtConnectOptions interface​","type":1,"pageTitle":"goosetyped.gtconnectoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions#gtconnectoptions-interface","content":" Signature:  export interface GtConnectOptions   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtconnectoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions#properties","content":" Property Modifiers Type Description beforeCompile? (handler: GtBeforeCompileModelHandler) =&gt; void (Optional) A handler invoked before compiling the model, providing the schema so you can perform final adjustments. compileAt? 'immediate' | 'connected' (Optional) When to compile the model. immediate: When the connection object is resolved from the factory function (which does not necessarily mean it is connected) - connected: When the connection status changes to connected (if the connection is already connected this is equivalent to &quot;immediate&quot;) ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtcompoundindexmetadataargs.options","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs.options","content":"","keywords":"","version":"Next"},{"title":"GtCompoundIndexMetadataArgs.options property​","type":1,"pageTitle":"goosetyped.gtcompoundindexmetadataargs.options","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtcompoundindexmetadataargs.options#gtcompoundindexmetadataargsoptions-property","content":" Signature:  options?: GtIndexOptions;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtconnectoptions.compileat","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions.compileat","content":"","keywords":"","version":"Next"},{"title":"GtConnectOptions.compileAt property​","type":1,"pageTitle":"goosetyped.gtconnectoptions.compileat","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions.compileat#gtconnectoptionscompileat-property","content":" When to compile the model.  immediate: When the connection object is resolved from the factory function (which does not necessarily mean it is connected) - connected: When the connection status changes to connected (if the connection is already connected this is equivalent to &quot;immediate&quot;)  Signature:  compileAt?: 'immediate' | 'connected';  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtconnectoptions.beforecompile","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions.beforecompile","content":"","keywords":"","version":"Next"},{"title":"GtConnectOptions.beforeCompile property​","type":1,"pageTitle":"goosetyped.gtconnectoptions.beforecompile","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtconnectoptions.beforecompile#gtconnectoptionsbeforecompile-property","content":" A handler invoked before compiling the model, providing the schema so you can perform final adjustments.  Signature:  beforeCompile?: (handler: GtBeforeCompileModelHandler) =&gt; void;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdiscriminator","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdiscriminator","content":"","keywords":"","version":"Next"},{"title":"GtDiscriminator() function​","type":1,"pageTitle":"goosetyped.gtdiscriminator","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdiscriminator#gtdiscriminator-function","content":" Signature:  export declare function GtDiscriminator(): PropertyDecoratorOf&lt;string&gt;;   Returns:  PropertyDecoratorOf&lt;string&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocument","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocument","content":"","keywords":"","version":"Next"},{"title":"GtDocument() function​","type":1,"pageTitle":"goosetyped.gtdocument","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocument#gtdocument-function","content":" Signature:  export declare function GtDocument(metadata?: GtDocumentMetadataArgs): ClassDecoratorOf&lt;ExtModel&lt;any, any&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtdocument","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocument#parameters","content":" Parameter Type Description metadata GtDocumentMetadataArgs (Optional)  Returns:  ClassDecoratorOf&lt;ExtModel&lt;any, any&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdeleteonehook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdeleteonehook","content":"","keywords":"","version":"Next"},{"title":"GtDeleteOneHook() function​","type":1,"pageTitle":"goosetyped.gtdeleteonehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdeleteonehook#gtdeleteonehook-function","content":" Signature:  export declare function GtDeleteOneHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtdeleteonehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdeleteonehook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs#gtdocumentmetadataargs-interface","content":" Signature:  export interface GtDocumentMetadataArgs extends GtSchemaMetadataArgs   Extends: GtSchemaMetadataArgs  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs#properties","content":" Property Modifiers Type Description autoCreate? boolean (Optional) See https://mongoosejs.com/docs/guide.html\\#autoCreate autoIndex? boolean (Optional) See https://mongoosejs.com/docs/guide.html\\#autoIndex bufferCommands? boolean (Optional) See https://mongoosejs.com/docs/guide.html\\#bufferCommands capped? boolean | number | { size?: number; max?: number; autoIndexId?: boolean; } (Optional) See https://mongoosejs.com/docs/guide.html\\#capped collation? mongodb.CollationOptions (Optional) See https://mongoosejs.com/docs/guide.html\\#collation collection? string (Optional) The collection name in the database Optional: When not set, induced from model name connectionId? string (Optional) The connection id to use when registering the model. If a connection id is not defined (default behavior) then the model is registered using the default connection. Use addConnection to add a new connection to the connection pool available for models. If at the time of creating the model the connection does not exists, it will &quot;wait&quot; for the connection to be added. minimize? boolean (Optional) See https://mongoosejs.com/docs/guide.html\\#minimize ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.autocreate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.autocreate","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.autoCreate property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.autocreate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.autocreate#gtdocumentmetadataargsautocreate-property","content":" See https://mongoosejs.com/docs/guide.html\\#autoCreate  Signature:  autoCreate?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.autoindex","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.autoindex","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.autoIndex property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.autoindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.autoindex#gtdocumentmetadataargsautoindex-property","content":" See https://mongoosejs.com/docs/guide.html\\#autoIndex  Signature:  autoIndex?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.collection","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.collection","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.collection property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.collection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.collection#gtdocumentmetadataargscollection-property","content":" The collection name in the database Optional: When not set, induced from model name  Signature:  collection?: string;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.collation","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.collation","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.collation property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.collation","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.collation#gtdocumentmetadataargscollation-property","content":" See https://mongoosejs.com/docs/guide.html\\#collation  Signature:  collation?: mongodb.CollationOptions;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.capped","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.capped","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.capped property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.capped","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.capped#gtdocumentmetadataargscapped-property","content":" See https://mongoosejs.com/docs/guide.html\\#capped  Signature:  capped?: boolean | number | { size?: number; max?: number; autoIndexId?: boolean; };  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.buffercommands","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.buffercommands","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.bufferCommands property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.buffercommands","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.buffercommands#gtdocumentmetadataargsbuffercommands-property","content":" See https://mongoosejs.com/docs/guide.html\\#bufferCommands  Signature:  bufferCommands?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.minimize","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.minimize","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.minimize property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.minimize","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.minimize#gtdocumentmetadataargsminimize-property","content":" See https://mongoosejs.com/docs/guide.html\\#minimize  Signature:  minimize?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindex","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex","content":"","keywords":"","version":"Next"},{"title":"GtIndex() function​","type":1,"pageTitle":"goosetyped.gtindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex#gtindex-function","content":" Signature:  export declare function GtIndex(metadata?: GtSingleIndexMetadataArgs): PropertyDecorator;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex#parameters","content":" Parameter Type Description metadata GtSingleIndexMetadataArgs (Optional)  Returns:  PropertyDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindex_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex_1","content":"","keywords":"","version":"Next"},{"title":"GtIndex() function​","type":1,"pageTitle":"goosetyped.gtindex_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex_1#gtindex-function","content":" Signature:  export declare function GtIndex(metadata: GtCompoundIndexMetadataArgs): ClassDecorator;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtindex_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindex_1#parameters","content":" Parameter Type Description metadata GtCompoundIndexMetadataArgs   Returns:  ClassDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtdocumentmetadataargs.connectionid","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.connectionid","content":"","keywords":"","version":"Next"},{"title":"GtDocumentMetadataArgs.connectionId property​","type":1,"pageTitle":"goosetyped.gtdocumentmetadataargs.connectionid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtdocumentmetadataargs.connectionid#gtdocumentmetadataargsconnectionid-property","content":" The connection id to use when registering the model. If a connection id is not defined (default behavior) then the model is registered using the default connection.  Use addConnection to add a new connection to the connection pool available for models.  If at the time of creating the model the connection does not exists, it will &quot;wait&quot; for the connection to be added.  Signature:  connectionId?: string;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexoptions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions","content":"","keywords":"","version":"Next"},{"title":"GtIndexOptions interface​","type":1,"pageTitle":"goosetyped.gtindexoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions#gtindexoptions-interface","content":" Signature:  export interface GtIndexOptions   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtindexoptions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions#properties","content":" Property Modifiers Type Description background? boolean (Optional) Wether to run the indexing process in the background or not true sparse? boolean | any (Optional) Declares a sparse index. text? boolean | any (Optional) Declares a full text index. unique? boolean | any (Optional) Declares an unique index. ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexoptions.background","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.background","content":"","keywords":"","version":"Next"},{"title":"GtIndexOptions.background property​","type":1,"pageTitle":"goosetyped.gtindexoptions.background","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.background#gtindexoptionsbackground-property","content":" Wether to run the indexing process in the background or not true  Signature:  background?: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexoptions.sparse","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.sparse","content":"","keywords":"","version":"Next"},{"title":"GtIndexOptions.sparse property​","type":1,"pageTitle":"goosetyped.gtindexoptions.sparse","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.sparse#gtindexoptionssparse-property","content":" Declares a sparse index.  Signature:  sparse?: boolean | any;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexsortorder","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexsortorder","content":"","keywords":"","version":"Next"},{"title":"GtIndexSortOrder type​","type":1,"pageTitle":"goosetyped.gtindexsortorder","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexsortorder#gtindexsortorder-type","content":" Signature:  export type GtIndexSortOrder = 'asc' | 'desc';  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtinithook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinithook","content":"","keywords":"","version":"Next"},{"title":"GtInitHook() function​","type":1,"pageTitle":"goosetyped.gtinithook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinithook#gtinithook-function","content":" Signature:  export declare function GtInitHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, void&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtinithook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinithook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, void&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtinsertmanyhook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook","content":"","keywords":"","version":"Next"},{"title":"GtInsertManyHook() function​","type":1,"pageTitle":"goosetyped.gtinsertmanyhook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook#gtinsertmanyhook-function","content":" Signature:  export declare function GtInsertManyHook(stage: 'post'): StaticMethodDecoratorOf&lt;[any[]], any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtinsertmanyhook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook#parameters","content":" Parameter Type Description stage 'post'   Returns:  StaticMethodDecoratorOf&lt;[any[]], any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexoptions.text","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.text","content":"","keywords":"","version":"Next"},{"title":"GtIndexOptions.text property​","type":1,"pageTitle":"goosetyped.gtindexoptions.text","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.text#gtindexoptionstext-property","content":" Declares a full text index.  Signature:  text?: boolean | any;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtindexoptions.unique","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.unique","content":"","keywords":"","version":"Next"},{"title":"GtIndexOptions.unique property​","type":1,"pageTitle":"goosetyped.gtindexoptions.unique","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtindexoptions.unique#gtindexoptionsunique-property","content":" Declares an unique index.  Signature:  unique?: boolean | any;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtinsertmanyhook_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook_1","content":"","keywords":"","version":"Next"},{"title":"GtInsertManyHook() function​","type":1,"pageTitle":"goosetyped.gtinsertmanyhook_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook_1#gtinsertmanyhook-function","content":" Signature:  export declare function GtInsertManyHook(stage: 'pre'): StaticMethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtinsertmanyhook_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtinsertmanyhook_1#parameters","content":" Parameter Type Description stage 'pre'   Returns:  StaticMethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtmethod","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtmethod","content":"","keywords":"","version":"Next"},{"title":"GtMethod() function​","type":1,"pageTitle":"goosetyped.gtmethod","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtmethod#gtmethod-function","content":" Signature:  export declare function GtMethod(): MethodDecorator;   Returns:  MethodDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtlocalprop","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtlocalprop","content":"","keywords":"","version":"Next"},{"title":"GtLocalProp() function​","type":1,"pageTitle":"goosetyped.gtlocalprop","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtlocalprop#gtlocalprop-function","content":" Signature:  export declare function GtLocalProp(): PropertyDecorator;   Returns:  PropertyDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtplugin","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtplugin","content":"","keywords":"","version":"Next"},{"title":"GtPlugin() function​","type":1,"pageTitle":"goosetyped.gtplugin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtplugin#gtplugin-function","content":" Signature:  export declare function GtPlugin(metadata: GtPluginMetadataArgs): ClassDecorator;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtplugin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtplugin#parameters","content":" Parameter Type Description metadata GtPluginMetadataArgs   Returns:  ClassDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtpluginmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs","content":"","keywords":"","version":"Next"},{"title":"goosetyped.gtpluginmetadataargs.options","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.options","content":"","keywords":"","version":"Next"},{"title":"GtPluginMetadataArgs.options property​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.options","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.options#gtpluginmetadataargsoptions-property","content":" Signature:  options?: T;  ","version":"Next","tagName":"h2"},{"title":"GtPluginMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs#gtpluginmetadataargs-interface","content":" Signature:  export interface GtPluginMetadataArgs&lt;T = any&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs#properties","content":" Property Modifiers Type Description options? T (Optional)  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs#methods","content":" Method Description plugin(schema, options) plugin(schema)  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtmodel","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtmodel","content":"","keywords":"","version":"Next"},{"title":"GtModel() function​","type":1,"pageTitle":"goosetyped.gtmodel","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtmodel#gtmodel-function","content":" Signature:  export declare function GtModel&lt;T1, C1, T2, C2, T3, C3, T4, C4, T5, C5&gt;(m1?: C1 &amp; Ctor&lt;T1&gt;, m2?: C2 &amp; Ctor&lt;T2&gt;, m3?: C3 &amp; Ctor&lt;T3&gt;, m4?: C4 &amp; Ctor&lt;T4&gt;, m5?: C5 &amp; Ctor&lt;T5&gt;): ExtModel&lt;T1 &amp; T2 &amp; T3 &amp; T4 &amp; T5, C1 &amp; C2 &amp; C3 &amp; C4 &amp; C5&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtmodel","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtmodel#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt; (Optional) m2 C2 &amp; Ctor&lt;T2&gt; (Optional) m3 C3 &amp; Ctor&lt;T3&gt; (Optional) m4 C4 &amp; Ctor&lt;T4&gt; (Optional) m5 C5 &amp; Ctor&lt;T5&gt; (Optional)  Returns:  ExtModel&lt;T1 &amp; T2 &amp; T3 &amp; T4 &amp; T5, C1 &amp; C2 &amp; C3 &amp; C4 &amp; C5&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtquery","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery","content":"","keywords":"","version":"Next"},{"title":"GtQuery() function​","type":1,"pageTitle":"goosetyped.gtquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery#gtquery-function","content":" Signature:  export declare function GtQuery&lt;Q1&gt;(QH: Ctor&lt;Q1&gt;): &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtquery","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery#parameters","content":" Parameter Type Description QH Ctor&lt;Q1&gt;   Returns:  &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtpluginmetadataargs.plugin_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1","content":"","keywords":"","version":"Next"},{"title":"GtPluginMetadataArgs.plugin() method​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1#gtpluginmetadataargsplugin-method","content":" Signature:  plugin(schema: mongoose.Schema): void;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin_1#parameters","content":" Parameter Type Description schema mongoose.Schema   Returns:  void ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtpluginmetadataargs.plugin","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin","content":"","keywords":"","version":"Next"},{"title":"GtPluginMetadataArgs.plugin() method​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin#gtpluginmetadataargsplugin-method","content":" Signature:  plugin(schema: mongoose.Schema, options: T): void;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtpluginmetadataargs.plugin","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtpluginmetadataargs.plugin#parameters","content":" Parameter Type Description schema mongoose.Schema options T   Returns:  void ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtquery_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_2","content":"","keywords":"","version":"Next"},{"title":"GtQuery() function​","type":1,"pageTitle":"goosetyped.gtquery_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_2#gtquery-function","content":" Signature:  export declare function GtQuery&lt;Q1, Q2, Q3&gt;(Q1: Ctor&lt;Q1&gt;, Q2: Ctor&lt;Q2&gt;, Q3: Ctor&lt;Q3&gt;): &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2 &amp; Q3&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtquery_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_2#parameters","content":" Parameter Type Description Q1 Ctor&lt;Q1&gt; Q2 Ctor&lt;Q2&gt; Q3 Ctor&lt;Q3&gt;   Returns:  &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2 &amp; Q3&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtremovehook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtremovehook","content":"","keywords":"","version":"Next"},{"title":"GtRemoveHook() function​","type":1,"pageTitle":"goosetyped.gtremovehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtremovehook#gtremovehook-function","content":" Signature:  export declare function GtRemoveHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtremovehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtremovehook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtquery_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_3","content":"","keywords":"","version":"Next"},{"title":"GtQuery() function​","type":1,"pageTitle":"goosetyped.gtquery_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_3#gtquery-function","content":" Signature:  export declare function GtQuery&lt;Q1, Q2, Q3, Q4&gt;(Q1: Ctor&lt;Q1&gt;, Q2: Ctor&lt;Q2&gt;, Q3: Ctor&lt;Q3&gt;, Q4: Ctor&lt;Q4&gt;): &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2 &amp; Q3 &amp; Q4&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtquery_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_3#parameters","content":" Parameter Type Description Q1 Ctor&lt;Q1&gt; Q2 Ctor&lt;Q2&gt; Q3 Ctor&lt;Q3&gt; Q4 Ctor&lt;Q4&gt;   Returns:  &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2 &amp; Q3 &amp; Q4&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtquery_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_1","content":"","keywords":"","version":"Next"},{"title":"GtQuery() function​","type":1,"pageTitle":"goosetyped.gtquery_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_1#gtquery-function","content":" Signature:  export declare function GtQuery&lt;Q1, Q2&gt;(Q1: Ctor&lt;Q1&gt;, Q2: Ctor&lt;Q2&gt;): &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtquery_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtquery_1#parameters","content":" Parameter Type Description Q1 Ctor&lt;Q1&gt; Q2 Ctor&lt;Q2&gt;   Returns:  &lt;T, C&gt;(Cls: ExtModel&lt;T, C&gt; &amp; C) =&gt; Ctor&lt;Document &amp; T&gt; &amp; C &amp; ModelExtensions&lt;Q1 &amp; Q2&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtresource","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource","content":"","keywords":"","version":"Next"},{"title":"goosetyped.gtresource_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_2","content":"","keywords":"","version":"Next"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_2#gtresource-function","content":" Signature:  export declare function GtResource&lt;T1, C1, T2, C2&gt;(m1: C1 &amp; Ctor&lt;T1&gt;, m2: C2 &amp; Ctor&lt;T2&gt;): Ctor&lt;SubDocument &amp; T1 &amp; T2&gt; &amp; Resource &amp; C1 &amp; C2;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtresource_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_2#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt; m2 C2 &amp; Ctor&lt;T2&gt;   Returns:  Ctor&lt;SubDocument &amp; T1 &amp; T2&gt; &amp; Resource &amp; C1 &amp; C2 ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtresource_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_1","content":"","keywords":"","version":"Next"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_1#gtresource-function","content":" Signature:  export declare function GtResource&lt;T1, C1&gt;(m1: C1 &amp; Ctor&lt;T1&gt;): Ctor&lt;SubDocument &amp; T1&gt; &amp; Resource &amp; C1;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtresource_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_1#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt;   Returns:  Ctor&lt;SubDocument &amp; T1&gt; &amp; Resource &amp; C1 ","version":"Next","tagName":"h2"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource#gtresource-function","content":" Signature:  export declare function GtResource(): Ctor&lt;SubDocument&gt; &amp; Resource;   Returns:  Ctor&lt;SubDocument&gt; &amp; Resource ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtresource_5","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_5","content":"","keywords":"","version":"Next"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource_5","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_5#gtresource-function","content":" Signature:  export declare function GtResource&lt;T1, C1, T2, C2, T3, C3, T4, C4, T5, C5&gt;(m1: C1 &amp; Ctor&lt;T1&gt;, m2: C2 &amp; Ctor&lt;T2&gt;, m3: C3 &amp; Ctor&lt;T3&gt;, m4: C4 &amp; Ctor&lt;T4&gt;, m5: C5 &amp; Ctor&lt;T5&gt;): Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3 &amp; T4 &amp; T5&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3 &amp; C4 &amp; C5;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtresource_5","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_5#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt; m2 C2 &amp; Ctor&lt;T2&gt; m3 C3 &amp; Ctor&lt;T3&gt; m4 C4 &amp; Ctor&lt;T4&gt; m5 C5 &amp; Ctor&lt;T5&gt;   Returns:  Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3 &amp; T4 &amp; T5&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3 &amp; C4 &amp; C5 ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsavehook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsavehook","content":"","keywords":"","version":"Next"},{"title":"GtSaveHook() function​","type":1,"pageTitle":"goosetyped.gtsavehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsavehook#gtsavehook-function","content":" Signature:  export declare function GtSaveHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtresource_4","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_4","content":"","keywords":"","version":"Next"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_4#gtresource-function","content":" Signature:  export declare function GtResource&lt;T1, C1, T2, C2, T3, C3, T4, C4&gt;(m1: C1 &amp; Ctor&lt;T1&gt;, m2: C2 &amp; Ctor&lt;T2&gt;, m3: C3 &amp; Ctor&lt;T3&gt;, m4: C4 &amp; Ctor&lt;T4&gt;): Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3 &amp; T4&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3 &amp; C4;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtresource_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_4#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt; m2 C2 &amp; Ctor&lt;T2&gt; m3 C3 &amp; Ctor&lt;T3&gt; m4 C4 &amp; Ctor&lt;T4&gt;   Returns:  Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3 &amp; T4&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3 &amp; C4 ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtsavehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsavehook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtresource_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_3","content":"","keywords":"","version":"Next"},{"title":"GtResource() function​","type":1,"pageTitle":"goosetyped.gtresource_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_3#gtresource-function","content":" Signature:  export declare function GtResource&lt;T1, C1, T2, C2, T3, C3&gt;(m1: C1 &amp; Ctor&lt;T1&gt;, m2: C2 &amp; Ctor&lt;T2&gt;, m3: C3 &amp; Ctor&lt;T3&gt;): Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtresource_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtresource_3#parameters","content":" Parameter Type Description m1 C1 &amp; Ctor&lt;T1&gt; m2 C2 &amp; Ctor&lt;T2&gt; m3 C3 &amp; Ctor&lt;T3&gt;   Returns:  Ctor&lt;SubDocument &amp; T1 &amp; T2 &amp; T3&gt; &amp; Resource &amp; C1 &amp; C2 &amp; C3 ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtschematype","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtschematype","content":"","keywords":"","version":"Next"},{"title":"GtSchemaType() function​","type":1,"pageTitle":"goosetyped.gtschematype","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtschematype#gtschematype-function","content":" Signature:  export declare function GtSchemaType(metadata: GtSchemaTypeMetadataArgs): ClassDecorator;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtschematype","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtschematype#parameters","content":" Parameter Type Description metadata GtSchemaTypeMetadataArgs   Returns:  ClassDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsingleindexmetadataargs.sort","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs.sort","content":"","keywords":"","version":"Next"},{"title":"GtSingleIndexMetadataArgs.sort property​","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs.sort","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs.sort#gtsingleindexmetadataargssort-property","content":" Signature:  sort: GtIndexSortOrder;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsingleindexmetadataargs.options","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs.options","content":"","keywords":"","version":"Next"},{"title":"GtSingleIndexMetadataArgs.options property​","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs.options","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs.options#gtsingleindexmetadataargsoptions-property","content":" Signature:  options?: GtIndexOptions;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsingleindexmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtSingleIndexMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs#gtsingleindexmetadataargs-interface","content":" Signature:  export interface GtSingleIndexMetadataArgs   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtsingleindexmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsingleindexmetadataargs#properties","content":" Property Modifiers Type Description options? GtIndexOptions (Optional) sort GtIndexSortOrder  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtschematypemetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtschematypemetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtSchemaTypeMetadataArgs type​","type":1,"pageTitle":"goosetyped.gtschematypemetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtschematypemetadataargs#gtschematypemetadataargs-type","content":" Signature:  export type GtSchemaTypeMetadataArgs = GtSchemaTypeSingleMetadataArgs | GtSchemaTypeContainerMetadataArgs;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtskipversioning","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtskipversioning","content":"","keywords":"","version":"Next"},{"title":"GtSkipVersioning() function​","type":1,"pageTitle":"goosetyped.gtskipversioning","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtskipversioning#gtskipversioning-function","content":" Signature:  export declare function GtSkipVersioning(): PropertyDecorator;   Returns:  PropertyDecorator ","version":"Next","tagName":"h2"},{"title":"goosetyped.gttimestampcreated","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttimestampcreated","content":"","keywords":"","version":"Next"},{"title":"goosetyped.gtsubdocumentmetadataargs","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocumentmetadataargs","content":"","keywords":"","version":"Next"},{"title":"GtSubDocumentMetadataArgs interface​","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocumentmetadataargs#gtsubdocumentmetadataargs-interface","content":" Signature:  export interface GtSubDocumentMetadataArgs extends GtSchemaMetadataArgs   Extends: GtSchemaMetadataArgs  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocumentmetadataargs#properties","content":" Property Modifiers Type Description noId? boolean (Optional) When true, will not create and _id when creating a new object This is equivalent to setting the _id property to false in the Schema options. https://mongoosejs.com/docs/guide.html\\#\\_id ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsubdocumentmetadataargs.noid","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocumentmetadataargs.noid","content":"","keywords":"","version":"Next"},{"title":"GtSubDocumentMetadataArgs.noId property​","type":1,"pageTitle":"goosetyped.gtsubdocumentmetadataargs.noid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocumentmetadataargs.noid#gtsubdocumentmetadataargsnoid-property","content":" When true, will not create and _id when creating a new object This is equivalent to setting the _id property to false in the Schema options. https://mongoosejs.com/docs/guide.html\\#\\_id  Signature:  noId?: boolean;  ","version":"Next","tagName":"h2"},{"title":"GtTimestampCreated() function​","type":1,"pageTitle":"goosetyped.gttimestampcreated","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttimestampcreated#gttimestampcreated-function","content":" Signature:  export declare function GtTimestampCreated&lt;T = Date&gt;(): PropertyDecoratorOf&lt;T&gt;;   Returns:  PropertyDecoratorOf&lt;T&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtsubdocument","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocument","content":"","keywords":"","version":"Next"},{"title":"GtSubDocument() function​","type":1,"pageTitle":"goosetyped.gtsubdocument","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocument#gtsubdocument-function","content":" Signature:  export declare function GtSubDocument(metadata?: GtSubDocumentMetadataArgs): ClassDecoratorOf&lt;any, Resource&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtsubdocument","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtsubdocument#parameters","content":" Parameter Type Description metadata GtSubDocumentMetadataArgs (Optional)  Returns:  ClassDecoratorOf&lt;any, Resource&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gttimestampupdated","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttimestampupdated","content":"","keywords":"","version":"Next"},{"title":"GtTimestampUpdated() function​","type":1,"pageTitle":"goosetyped.gttimestampupdated","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttimestampupdated#gttimestampupdated-function","content":" Signature:  export declare function GtTimestampUpdated&lt;T = Date&gt;(): PropertyDecoratorOf&lt;T&gt;;   Returns:  PropertyDecoratorOf&lt;T&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gttoobject","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttoobject","content":"","keywords":"","version":"Next"},{"title":"GtToObject() function​","type":1,"pageTitle":"goosetyped.gttoobject","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttoobject#gttoobject-function","content":" A decorator for toObject with a prototype bound implementation for the transform function.  Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toObject. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer.  https://mongoosejs.com/docs/4.x/docs/guide.html\\#toObject  Signature:  export declare function GtToObject(config?: Omit&lt;mongoose.ToObjectOptions, 'transform'&gt;): MethodDecoratorOf&lt;[any, any]&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gttoobject","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttoobject#parameters","content":" Parameter Type Description config Omit&lt;mongoose.ToObjectOptions, 'transform'&gt; (Optional)  Returns:  MethodDecoratorOf&lt;[any, any]&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtupdateonehook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtupdateonehook","content":"","keywords":"","version":"Next"},{"title":"GtUpdateOneHook() function​","type":1,"pageTitle":"goosetyped.gtupdateonehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtupdateonehook#gtupdateonehook-function","content":" Signature:  export declare function GtUpdateOneHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtupdateonehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtupdateonehook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtvalidatehook","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtvalidatehook","content":"","keywords":"","version":"Next"},{"title":"GtValidateHook() function​","type":1,"pageTitle":"goosetyped.gtvalidatehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtvalidatehook#gtvalidatehook-function","content":" Signature:  export declare function GtValidateHook(stage: 'pre' | 'post'): MethodDecoratorOf&lt;never, any&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gtvalidatehook","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtvalidatehook#parameters","content":" Parameter Type Description stage 'pre' | 'post'   Returns:  MethodDecoratorOf&lt;never, any&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.gtversionkey","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtversionkey","content":"","keywords":"","version":"Next"},{"title":"GtVersionKey() function​","type":1,"pageTitle":"goosetyped.gtversionkey","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gtversionkey#gtversionkey-function","content":" Signature:  export declare function GtVersionKey&lt;T = number&gt;(): PropertyDecoratorOf&lt;T&gt;;   Returns:  PropertyDecoratorOf&lt;T&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.isdiscriminator","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.isdiscriminator","content":"","keywords":"","version":"Next"},{"title":"isDiscriminator() function​","type":1,"pageTitle":"goosetyped.isdiscriminator","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.isdiscriminator#isdiscriminator-function","content":" Signature:  export declare function isDiscriminator(modelClass: Ctor&lt;any&gt;): 'root' | 'child' | undefined;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.isdiscriminator","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.isdiscriminator#parameters","content":" Parameter Type Description modelClass Ctor&lt;any&gt;   Returns:  'root' | 'child' | undefined ","version":"Next","tagName":"h2"},{"title":"goosetyped.mapschematype","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.mapschematype","content":"","keywords":"","version":"Next"},{"title":"mapSchemaType() function​","type":1,"pageTitle":"goosetyped.mapschematype","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.mapschematype#mapschematype-function","content":" Signature:  export declare function mapSchemaType(runtimeType: any, metadata: GtSchemaTypeMetadataArgs): void;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.mapschematype","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.mapschematype#parameters","content":" Parameter Type Description runtimeType any metadata GtSchemaTypeMetadataArgs   Returns:  void ","version":"Next","tagName":"h2"},{"title":"goosetyped.gttojson","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttojson","content":"","keywords":"","version":"Next"},{"title":"GtToJSON() function​","type":1,"pageTitle":"goosetyped.gttojson","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttojson#gttojson-function","content":" A decorator for toJSON with a prototype bound implementation for the transform function.  Note that it recommended to avoid using a transform function (through schema options) or a transform method through this decorator and instead apply a transformation by overriding the toJSON. Call the super method and apply changed to the returned value, this is much better then using an out of context transformer.  https://mongoosejs.com/docs/4.x/docs/guide.html\\#toJSON  Signature:  export declare function GtToJSON(config?: Omit&lt;mongoose.ToObjectOptions, 'transform'&gt;): MethodDecoratorOf&lt;[any, any]&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.gttojson","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.gttojson#parameters","content":" Parameter Type Description config Omit&lt;mongoose.ToObjectOptions, 'transform'&gt; (Optional)  Returns:  MethodDecoratorOf&lt;[any, any]&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.methoddecoratorof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.methoddecoratorof","content":"","keywords":"","version":"Next"},{"title":"MethodDecoratorOf type​","type":1,"pageTitle":"goosetyped.methoddecoratorof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.methoddecoratorof#methoddecoratorof-type","content":" Signature:  export type MethodDecoratorOf&lt;TArgs extends [any] | [any, any] | [any, any, any] | [any, any, any, any] | [any, any, any, any, any] | [any, any, any, any, any, any] | [any, any, any, any, any, any, any] = never, TReturn = void&gt; = &lt;Z extends Partial&lt;Record&lt;K, (...args: TArgs) =&gt; TReturn&gt;&gt;, K extends string&gt;(target: Z, key: K, descriptor: TypedPropertyDescriptor&lt;(...args: TArgs) =&gt; TReturn&gt;) =&gt; TypedPropertyDescriptor&lt;(...args: TArgs) =&gt; TReturn&gt; | void;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.aggregate","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.aggregate() method​","type":1,"pageTitle":"goosetyped.modelextensions.aggregate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate#modelextensionsaggregate-method","content":" Signature:  aggregate&lt;T&gt;(this: Ctor&lt;T&gt;, options?: M.AggregateOptions): M.Aggregate&lt;Array&lt;T&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.aggregate","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; options M.AggregateOptions (Optional)  Returns:  M.Aggregate&lt;Array&lt;T&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions._where","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions._where","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.$where() method​","type":1,"pageTitle":"goosetyped.modelextensions._where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions._where#modelextensionswhere-method","content":" Adds a $where clause to this query  Signature:  $where&lt;T&gt;(this: Ctor&lt;T&gt;, argument: string | Function): DocumentQuery&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions._where","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions._where#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; argument string | Function   Returns:  DocumentQuery&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.aggregate_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.aggregate() method​","type":1,"pageTitle":"goosetyped.modelextensions.aggregate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate_1#modelextensionsaggregate-method","content":" Signature:  aggregate&lt;T = any&gt;(this: Ctor&lt;any&gt;, pipeline: M.PipelineStage[], options?: M.AggregateOptions): M.Aggregate&lt;Array&lt;T&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.aggregate_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.aggregate_1#parameters","content":" Parameter Type Description this Ctor&lt;any&gt; pipeline M.PipelineStage[] options M.AggregateOptions (Optional)  Returns:  M.Aggregate&lt;Array&lt;T&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions interface​","type":1,"pageTitle":"goosetyped.modelextensions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions#modelextensions-interface","content":" Signature:  export interface ModelExtensions&lt;TQueryHelpers = {}, TInstanceMethods = {}, TVirtuals = {}, TSchema = any&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.modelextensions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions#properties","content":" Property Modifiers Type Description collection M.Collection Collection the model uses. db M.Connection Connection the model uses.  ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"goosetyped.modelextensions","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions#methods","content":" Method Description $where(this, argument) Adds a $where clause to this query aggregate(this, options) aggregate(this, pipeline, options) bulkSave(this, documents, options) Sends multiple save() calls in a single bulkWrite(). This is faster than sending multiple save() calls because with bulkSave() there is only one network round trip to the MongoDB server. bulkWrite(this, writes, options) Sends multiple insertOne, updateOne, updateMany, replaceOne, deleteOne, and/or deleteMany operations to the MongoDB server in one command. This is faster than sending multiple independent operations (e.g. if you use create()) because with bulkWrite() there is only one network round trip to the MongoDB server. bulkWrite(this, writes, options) countDocuments(this, filter, options) Creates a countDocuments query: counts the number of documents that match filter. create(this, docs, options) create(this, docs, options) create(this, doc) create(this, doc1, doc2, docs) createCollection(this, options) Create the collection for this model. By default, if no indexes are specified, mongoose will not create the collection for the model until any documents are created. Use this method to create the collection explicitly. createSearchIndex(this, description) Create an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/). This function only works when connected to MongoDB Atlas. ctor(this, doc) Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class deleteMany(this, filter, options) Deletes all of the documents that match conditions from the collection. Behaves like remove(), but deletes all documents that match conditions regardless of the single option. deleteMany(this, filter) deleteOne(this, filter, options) Deletes the first document that matches conditions from the collection. Behaves like remove(), but deletes at most one document regardless of the single option. deleteOne(this, filter) dropSearchIndex(this, name) Delete an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) by name. This function only works when connected to MongoDB Atlas. find(this, filter, projection, options) Creates a find query: gets a list of documents that match filter. find(this, filter, projection, options) find(this, filter, projection) find(this, filter) find(this) findById(this, id, projection, options) Finds a single document by its _id field. findById(id) is almost* equivalent to findOne({ _id: id }). If you want to query by a document's _id, use findById() instead of findOne(). findById(this, id, projection, options) findById(this, id, projection) findOne(this, filter, projection, options) findOne(this, filter, projection, options) findOne(this, filter, projection) findOne(this, filter) init(this) insertMany(this, docs) Inserts one or more new documents as a single insertMany call to the MongoDB server. insertMany(this, docs, options) insertMany(this, doc, options) insertMany(this, docs, options) insertMany(this, docs, options) insertMany(this, doc, options) model(this)  ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.bulksave","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulksave","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.bulkSave() method​","type":1,"pageTitle":"goosetyped.modelextensions.bulksave","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulksave#modelextensionsbulksave-method","content":" Sends multiple save() calls in a single bulkWrite(). This is faster than sending multiple save() calls because with bulkSave() there is only one network round trip to the MongoDB server.  Signature:  bulkSave&lt;T&gt;(this: Ctor&lt;T&gt;, documents: Array&lt;M.Document&gt;, options?: M.MongooseBulkSaveOptions): Promise&lt;mongodb.BulkWriteResult&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.bulksave","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulksave#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; documents Array&lt;M.Document&gt; options M.MongooseBulkSaveOptions (Optional)  Returns:  Promise&lt;mongodb.BulkWriteResult&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.bulkwrite","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.bulkWrite() method​","type":1,"pageTitle":"goosetyped.modelextensions.bulkwrite","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite#modelextensionsbulkwrite-method","content":" Sends multiple insertOne, updateOne, updateMany, replaceOne, deleteOne, and/or deleteMany operations to the MongoDB server in one command. This is faster than sending multiple independent operations (e.g. if you use create()) because with bulkWrite() there is only one network round trip to the MongoDB server.  Signature:  bulkWrite&lt;T&gt;(this: Ctor&lt;T&gt;, writes: Array&lt;M.AnyBulkWriteOperation&lt;T extends M.Document ? any : (T extends {} ? T : any)&gt;&gt;, options: M.MongooseBulkWriteOptions &amp; { ordered: false; }): Promise&lt;mongodb.BulkWriteResult &amp; { mongoose?: { validationErrors: Error[]; }; }&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.bulkwrite","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; writes Array&lt;M.AnyBulkWriteOperation&lt;T extends M.Document ? any : (T extends {} ? T : any)&gt;&gt; options M.MongooseBulkWriteOptions &amp; { ordered: false; }   Returns:  Promise&lt;mongodb.BulkWriteResult &amp; { mongoose?: { validationErrors: Error[]; }; }&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.collection","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.collection","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.collection property​","type":1,"pageTitle":"goosetyped.modelextensions.collection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.collection#modelextensionscollection-property","content":" Collection the model uses.  Signature:  collection: M.Collection;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.create_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.create() method​","type":1,"pageTitle":"goosetyped.modelextensions.create_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_1#modelextensionscreate-method","content":" Signature:  create&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;Partial&lt;T&gt;&gt;, options: M.CreateOptions): Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;[]&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.create_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;Partial&lt;T&gt;&gt; options M.CreateOptions   Returns:  Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;[]&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.bulkwrite_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.bulkWrite() method​","type":1,"pageTitle":"goosetyped.modelextensions.bulkwrite_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite_1#modelextensionsbulkwrite-method","content":" Signature:  bulkWrite&lt;T&gt;(this: Ctor&lt;T&gt;, writes: Array&lt;M.AnyBulkWriteOperation&lt;T extends M.Document ? any : (T extends {} ? T : any)&gt;&gt;, options?: M.MongooseBulkWriteOptions): Promise&lt;mongodb.BulkWriteResult&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.bulkwrite_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.bulkwrite_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; writes Array&lt;M.AnyBulkWriteOperation&lt;T extends M.Document ? any : (T extends {} ? T : any)&gt;&gt; options M.MongooseBulkWriteOptions (Optional)  Returns:  Promise&lt;mongodb.BulkWriteResult&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.create","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.create() method​","type":1,"pageTitle":"goosetyped.modelextensions.create","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create#modelextensionscreate-method","content":" Signature:  create&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;Partial&lt;T&gt;&gt;, options: M.CreateOptions &amp; { aggregateErrors: true; }): Promise&lt;(M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt; | M.Error)[]&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.create","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;Partial&lt;T&gt;&gt; options M.CreateOptions &amp; { aggregateErrors: true; }   Returns:  Promise&lt;(M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt; | M.Error)[]&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.countdocuments","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.countdocuments","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.countDocuments() method​","type":1,"pageTitle":"goosetyped.modelextensions.countdocuments","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.countdocuments#modelextensionscountdocuments-method","content":" Creates a countDocuments query: counts the number of documents that match filter.  Signature:  countDocuments&lt;T&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;, options?: (mongodb.CountOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null): DocumentQuery&lt;number, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'countDocuments'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.countdocuments","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.countdocuments#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional) options (mongodb.CountOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null (Optional)  Returns:  DocumentQuery&lt;number, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'countDocuments'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.createcollection","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createcollection","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.createCollection() method​","type":1,"pageTitle":"goosetyped.modelextensions.createcollection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createcollection#modelextensionscreatecollection-method","content":" Create the collection for this model. By default, if no indexes are specified, mongoose will not create the collection for the model until any documents are created. Use this method to create the collection explicitly.  Signature:  createCollection&lt;T, D extends mongodb.Document&gt;(this: Ctor&lt;T&gt;, options?: mongodb.CreateCollectionOptions &amp; Pick&lt;M.SchemaOptions, 'expires'&gt;): Promise&lt;mongodb.Collection&lt;D&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.createcollection","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createcollection#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; options mongodb.CreateCollectionOptions &amp; Pick&lt;M.SchemaOptions, 'expires'&gt; (Optional)  Returns:  Promise&lt;mongodb.Collection&lt;D&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.create_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_2","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.create() method​","type":1,"pageTitle":"goosetyped.modelextensions.create_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_2#modelextensionscreate-method","content":" Signature:  create&lt;T&gt;(this: Ctor&lt;T&gt;, doc: Partial&lt;T&gt;): Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.create_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_2#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc Partial&lt;T&gt;   Returns:  Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.create_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_3","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.create() method​","type":1,"pageTitle":"goosetyped.modelextensions.create_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_3#modelextensionscreate-method","content":" Signature:  create&lt;T&gt;(this: Ctor&lt;T&gt;, doc1: Partial&lt;T&gt;, doc2: Partial&lt;T&gt;, ...docs: Array&lt;Partial&lt;T&gt;&gt;): Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;[]&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.create_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.create_3#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc1 Partial&lt;T&gt; doc2 Partial&lt;T&gt; docs Array&lt;Partial&lt;T&gt;&gt;   Returns:  Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;[]&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.createsearchindex","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createsearchindex","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.createSearchIndex() method​","type":1,"pageTitle":"goosetyped.modelextensions.createsearchindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createsearchindex#modelextensionscreatesearchindex-method","content":" Create an [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/). This function only works when connected to MongoDB Atlas.  Signature:  createSearchIndex&lt;T&gt;(this: Ctor&lt;T&gt;, description: M.SearchIndexDescription): Promise&lt;string&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.createsearchindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.createsearchindex#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; description M.SearchIndexDescription   Returns:  Promise&lt;string&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.ctor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.ctor","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.ctor() method​","type":1,"pageTitle":"goosetyped.modelextensions.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.ctor#modelextensionsctor-method","content":" Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class  Signature:  ctor&lt;T extends M.Document&gt;(this: Ctor&lt;T&gt;, doc?: Partial&lt;T&gt;): T;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.ctor#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc Partial&lt;T&gt; (Optional)  Returns:  T ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.db","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.db","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.db property​","type":1,"pageTitle":"goosetyped.modelextensions.db","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.db#modelextensionsdb-property","content":" Connection the model uses.  Signature:  db: M.Connection;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.deletemany_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.deleteMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.deletemany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany_1#modelextensionsdeletemany-method","content":" Signature:  deleteMany&lt;T&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;): DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteMany'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.deletemany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt;   Returns:  DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteMany'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.deletemany","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.deleteMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.deletemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany#modelextensionsdeletemany-method","content":" Deletes all of the documents that match conditions from the collection. Behaves like remove(), but deletes all documents that match conditions regardless of the single option.  Signature:  deleteMany&lt;T&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;, options?: (mongodb.DeleteOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null): DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteMany'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.deletemany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deletemany#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional) options (mongodb.DeleteOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null (Optional)  Returns:  DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteMany'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.deleteone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.deleteOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.deleteone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone#modelextensionsdeleteone-method","content":" Deletes the first document that matches conditions from the collection. Behaves like remove(), but deletes at most one document regardless of the single option.  Signature:  deleteOne&lt;T&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;, options?: (mongodb.DeleteOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null): DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.deleteone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional) options (mongodb.DeleteOptions &amp; M.MongooseBaseQueryOptions&lt;T&gt;) | null (Optional)  Returns:  DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.deleteone_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.deleteOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.deleteone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone_1#modelextensionsdeleteone-method","content":" Signature:  deleteOne&lt;T&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;): DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.deleteone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.deleteone_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt;   Returns:  DocumentQuery&lt;mongodb.DeleteResult, M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;, TQueryHelpers, T, 'deleteOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.dropsearchindex","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.dropsearchindex","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.dropSearchIndex() method​","type":1,"pageTitle":"goosetyped.modelextensions.dropsearchindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.dropsearchindex#modelextensionsdropsearchindex-method","content":" Delete an existing [Atlas search index](https://www.mongodb.com/docs/atlas/atlas-search/create-index/) by name. This function only works when connected to MongoDB Atlas.  Signature:  dropSearchIndex&lt;T&gt;(this: Ctor&lt;T&gt;, name: string): Promise&lt;void&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.dropsearchindex","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.dropsearchindex#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; name string   Returns:  Promise&lt;void&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.find","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.find() method​","type":1,"pageTitle":"goosetyped.modelextensions.find","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find#modelextensionsfind-method","content":" Creates a find query: gets a list of documents that match filter.  Signature:  find&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;, projection: M.ProjectionType&lt;T&gt; | null | undefined, options: M.QueryOptions&lt;T&gt; &amp; { lean: true; }): DocumentQuery&lt;M.GetLeanResultType&lt;T, T[], 'find'&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.find","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; projection M.ProjectionType&lt;T&gt; | null | undefined options M.QueryOptions&lt;T&gt; &amp; { lean: true; }   Returns:  DocumentQuery&lt;M.GetLeanResultType&lt;T, T[], 'find'&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.find_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_3","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.find() method​","type":1,"pageTitle":"goosetyped.modelextensions.find_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_3#modelextensionsfind-method","content":" Signature:  find&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;): DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.find_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_3#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt;   Returns:  DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.find_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.find() method​","type":1,"pageTitle":"goosetyped.modelextensions.find_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_1#modelextensionsfind-method","content":" Signature:  find&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;, projection?: M.ProjectionType&lt;T&gt; | null | undefined, options?: M.QueryOptions&lt;T&gt; | null | undefined): DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.find_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; projection M.ProjectionType&lt;T&gt; | null | undefined (Optional) options M.QueryOptions&lt;T&gt; | null | undefined (Optional)  Returns:  DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.find_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_2","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.find() method​","type":1,"pageTitle":"goosetyped.modelextensions.find_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_2#modelextensionsfind-method","content":" Signature:  find&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;, projection?: M.ProjectionType&lt;T&gt; | null | undefined): DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.find_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_2#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; projection M.ProjectionType&lt;T&gt; | null | undefined (Optional)  Returns:  DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.find_4","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_4","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.find() method​","type":1,"pageTitle":"goosetyped.modelextensions.find_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_4#modelextensionsfind-method","content":" Signature:  find&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;): DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.find_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.find_4#parameters","content":" Parameter Type Description this Ctor&lt;T&gt;   Returns:  DocumentQuery&lt;Array&lt;ResultDoc&gt;, ResultDoc, TQueryHelpers, T, 'find'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findbyid_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findById() method​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_1#modelextensionsfindbyid-method","content":" Signature:  findById&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, id: any, projection?: M.ProjectionType&lt;T&gt; | null, options?: M.QueryOptions&lt;T&gt; | null): DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; id any projection M.ProjectionType&lt;T&gt; | null (Optional) options M.QueryOptions&lt;T&gt; | null (Optional)  Returns:  DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findbyid_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_2","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findById() method​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_2#modelextensionsfindbyid-method","content":" Signature:  findById&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, id: any, projection?: M.ProjectionType&lt;T&gt; | null): DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid_2#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; id any projection M.ProjectionType&lt;T&gt; | null (Optional)  Returns:  DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findone","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.findone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone#modelextensionsfindone-method","content":" Signature:  findOne&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter: M.FilterQuery&lt;T&gt;, projection: M.ProjectionType&lt;T&gt; | null | undefined, options: M.QueryOptions&lt;T&gt; &amp; { lean: true; }): DocumentQuery&lt;M.GetLeanResultType&lt;T, T, 'findOne'&gt; | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findone","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; projection M.ProjectionType&lt;T&gt; | null | undefined options M.QueryOptions&lt;T&gt; &amp; { lean: true; }   Returns:  DocumentQuery&lt;M.GetLeanResultType&lt;T, T, 'findOne'&gt; | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findbyid","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findById() method​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid#modelextensionsfindbyid-method","content":" Finds a single document by its _id field. findById(id) is almost* equivalent to findOne({ _id: id }). If you want to query by a document's _id, use findById() instead of findOne().  Signature:  findById&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, id: any, projection: M.ProjectionType&lt;T&gt; | null | undefined, options: M.QueryOptions&lt;T&gt; &amp; { lean: true; }): DocumentQuery&lt;M.GetLeanResultType&lt;T, T, 'findOne'&gt; | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findbyid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findbyid#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; id any projection M.ProjectionType&lt;T&gt; | null | undefined options M.QueryOptions&lt;T&gt; &amp; { lean: true; }   Returns:  DocumentQuery&lt;M.GetLeanResultType&lt;T, T, 'findOne'&gt; | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findone_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.findone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_1#modelextensionsfindone-method","content":" Signature:  findOne&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;, projection?: M.ProjectionType&lt;T&gt; | null, options?: M.QueryOptions&lt;T&gt; | null): DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findone_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional) projection M.ProjectionType&lt;T&gt; | null (Optional) options M.QueryOptions&lt;T&gt; | null (Optional)  Returns:  DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findone_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_2","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.findone_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_2#modelextensionsfindone-method","content":" Signature:  findOne&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;, projection?: M.ProjectionType&lt;T&gt; | null): DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findone_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_2#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional) projection M.ProjectionType&lt;T&gt; | null (Optional)  Returns:  DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.init","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.init","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.init() method​","type":1,"pageTitle":"goosetyped.modelextensions.init","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.init#modelextensionsinit-method","content":" Signature:  init&lt;T&gt;(this: Ctor&lt;T&gt;): Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.init","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.init#parameters","content":" Parameter Type Description this Ctor&lt;T&gt;   Returns:  Promise&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.findone_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_3","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.findOne() method​","type":1,"pageTitle":"goosetyped.modelextensions.findone_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_3#modelextensionsfindone-method","content":" Signature:  findOne&lt;T, ResultDoc = M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;(this: Ctor&lt;T&gt;, filter?: M.FilterQuery&lt;T&gt;): DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.findone_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.findone_3#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; filter M.FilterQuery&lt;T&gt; (Optional)  Returns:  DocumentQuery&lt;ResultDoc | null, ResultDoc, TQueryHelpers, T, 'findOne'&gt; &amp; TQueryHelpers ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany_1","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_1","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_1#modelextensionsinsertmany-method","content":" Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;T&gt;, options: M.InsertManyOptions &amp; { lean: true; }): Promise&lt;Array&lt;M.Require_id&lt;T&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_1","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_1#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;T&gt; options M.InsertManyOptions &amp; { lean: true; }   Returns:  Promise&lt;Array&lt;M.Require_id&lt;T&gt;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany#modelextensionsinsertmany-method","content":" Inserts one or more new documents as a single insertMany call to the MongoDB server.  Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;T&gt;): Promise&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;T&gt;   Returns:  Promise&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany_3","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_3","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_3#modelextensionsinsertmany-method","content":" Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;T&gt;, options: M.InsertManyOptions &amp; { lean: true; rawResult: true; }): Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;T&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_3","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_3#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;T&gt; options M.InsertManyOptions &amp; { lean: true; rawResult: true; }   Returns:  Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;T&gt;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany_2","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_2","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_2#modelextensionsinsertmany-method","content":" Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, doc: Array&lt;T&gt;, options: M.InsertManyOptions &amp; { ordered: false; rawResult: true; }): Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;T&gt;&gt; &amp; { mongoose: { validationErrors: (M.CastError | M.Error.ValidatorError)[]; results: Array&lt;M.Error | Object | M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;; }; }&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_2","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_2#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc Array&lt;T&gt; options M.InsertManyOptions &amp; { ordered: false; rawResult: true; }   Returns:  Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;T&gt;&gt; &amp; { mongoose: { validationErrors: (M.CastError | M.Error.ValidatorError)[]; results: Array&lt;M.Error | Object | M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;; }; }&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany_4","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_4","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_4#modelextensionsinsertmany-method","content":" Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, docs: Array&lt;T&gt;, options: M.InsertManyOptions &amp; { rawResult: true; }): Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_4","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_4#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; docs Array&lt;T&gt; options M.InsertManyOptions &amp; { rawResult: true; }   Returns:  Promise&lt;mongodb.InsertManyResult&lt;M.Require_id&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.insertmany_5","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_5","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.insertMany() method​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_5","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_5#modelextensionsinsertmany-method","content":" Signature:  insertMany&lt;T&gt;(this: Ctor&lt;T&gt;, doc: Array&lt;T&gt;, options: M.InsertManyOptions): Promise&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.insertmany_5","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.insertmany_5#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc Array&lt;T&gt; options M.InsertManyOptions   Returns:  Promise&lt;Array&lt;M.HydratedDocument&lt;T, TVirtuals &amp; TInstanceMethods, TQueryHelpers&gt;&gt;&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.modelextensions.model","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.model","content":"","keywords":"","version":"Next"},{"title":"ModelExtensions.model() method​","type":1,"pageTitle":"goosetyped.modelextensions.model","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.model#modelextensionsmodel-method","content":" Signature:  model&lt;T&gt;(this: Ctor&lt;T&gt;): M.Model&lt;T, TQueryHelpers, TInstanceMethods, TVirtuals&gt;;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.modelextensions.model","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.modelextensions.model#parameters","content":" Parameter Type Description this Ctor&lt;T&gt;   Returns:  M.Model&lt;T, TQueryHelpers, TInstanceMethods, TVirtuals&gt; ","version":"Next","tagName":"h2"},{"title":"goosetyped.objectid","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.objectid","content":"","keywords":"","version":"Next"},{"title":"ObjectId class​","type":1,"pageTitle":"goosetyped.objectid","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.objectid#objectid-class","content":" Signature:  export declare class ObjectId extends String   Extends: String ","version":"Next","tagName":"h2"},{"title":"goosetyped.propertydecoratorof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.propertydecoratorof","content":"","keywords":"","version":"Next"},{"title":"PropertyDecoratorOf type​","type":1,"pageTitle":"goosetyped.propertydecoratorof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.propertydecoratorof#propertydecoratorof-type","content":" Signature:  export type PropertyDecoratorOf&lt;T&gt; = &lt;Z extends Partial&lt;Record&lt;K, T&gt;&gt;, K extends string&gt;(target: Z, key: K) =&gt; void;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource","content":"","keywords":"","version":"Next"},{"title":"Resource interface​","type":1,"pageTitle":"goosetyped.resource","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource#resource-interface","content":" Signature:  export interface Resource&lt;T = unknown&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.resource","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource#properties","content":" Property Modifiers Type Description [GT_SUB_DOCUMENT] boolean prototype SubDocument &amp; T schema M.Schema   ","version":"Next","tagName":"h2"},{"title":"Methods​","type":1,"pageTitle":"goosetyped.resource","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource#methods","content":" Method Description (new)(doc) ctor(this, doc) Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource._gt_sub_document_","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource._gt_sub_document_","content":"","keywords":"","version":"Next"},{"title":"Resource.[GT_SUB_DOCUMENT] property​","type":1,"pageTitle":"goosetyped.resource._gt_sub_document_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource._gt_sub_document_#resourcegt_sub_document-property","content":" Signature:  [GT_SUB_DOCUMENT]: boolean;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource._new_","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource._new_","content":"","keywords":"","version":"Next"},{"title":"Resource.(new)​","type":1,"pageTitle":"goosetyped.resource._new_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource._new_#resourcenew","content":" Signature:  new (doc?: any): SubDocument &amp; T;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.resource._new_","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource._new_#parameters","content":" Parameter Type Description doc any (Optional)  Returns:  SubDocument &amp; T ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource.prototype","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.prototype","content":"","keywords":"","version":"Next"},{"title":"Resource.prototype property​","type":1,"pageTitle":"goosetyped.resource.prototype","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.prototype#resourceprototype-property","content":" Signature:  prototype: SubDocument &amp; T;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource.ctor","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.ctor","content":"","keywords":"","version":"Next"},{"title":"Resource.ctor() method​","type":1,"pageTitle":"goosetyped.resource.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.ctor#resourcector-method","content":" Like create() but without the save, replaces the constructor. Useful when you want to create a new instance from a base discriminator class  Signature:  ctor&lt;T extends SubDocument&gt;(this: Ctor&lt;T&gt;, doc: Partial&lt;T&gt;): T;   ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"goosetyped.resource.ctor","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.ctor#parameters","content":" Parameter Type Description this Ctor&lt;T&gt; doc Partial&lt;T&gt;   Returns:  T ","version":"Next","tagName":"h2"},{"title":"goosetyped.resource.schema","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.schema","content":"","keywords":"","version":"Next"},{"title":"Resource.schema property​","type":1,"pageTitle":"goosetyped.resource.schema","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.resource.schema#resourceschema-property","content":" Signature:  schema: M.Schema;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.subdocument","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.subdocument","content":"","keywords":"","version":"Next"},{"title":"SubDocument interface​","type":1,"pageTitle":"goosetyped.subdocument","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.subdocument#subdocument-interface","content":" Signature:  export interface SubDocument  ","version":"Next","tagName":"h2"},{"title":"goosetyped.stripdoc","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdoc","content":"","keywords":"","version":"Next"},{"title":"StripDoc type​","type":1,"pageTitle":"goosetyped.stripdoc","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdoc#stripdoc-type","content":" A type helper that strips away all members of the mongoose Document instance from the type  Signature:  export type StripDoc&lt;T extends Document, TExcept extends keyof Document = never&gt; = Subtract&lt;T, Omit&lt;Document, TExcept&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"goosetyped.stripdoc","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdoc#example","content":" export class Message extends GtModel() { id: string; text: string; myMethod(): void { } } const msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model) const m: StripDoc&lt;Message&gt;; // now m has only &quot;myMethod&quot; &amp; &quot;text&quot; but not &quot;id&quot; // Since &quot;id&quot; also exists in Document, to include it we need to exclude it from the strip. const m: StripDoc&lt;Message, 'id'&gt;; // now m has &quot;id&quot;, &quot;myMethod&quot; &amp; &quot;text&quot;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.staticmethoddecoratorof","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.staticmethoddecoratorof","content":"","keywords":"","version":"Next"},{"title":"StaticMethodDecoratorOf type​","type":1,"pageTitle":"goosetyped.staticmethoddecoratorof","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.staticmethoddecoratorof#staticmethoddecoratorof-type","content":" Signature:  export type StaticMethodDecoratorOf&lt;TArgs extends [any] | [any, any] | [any, any, any] | [any, any, any, any] | [any, any, any, any, any] | [any, any, any, any, any, any] | [any, any, any, any, any, any, any] = never, TReturn = void&gt; = &lt;Z extends Function &amp; Partial&lt;Record&lt;K, (...args: TArgs) =&gt; TReturn&gt;&gt;, K extends string&gt;(target: Z, key: K, descriptor: TypedPropertyDescriptor&lt;(...args: TArgs) =&gt; TReturn&gt;) =&gt; TypedPropertyDescriptor&lt;(...args: TArgs) =&gt; TReturn&gt; | void;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.type","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.type","content":"","keywords":"","version":"Next"},{"title":"Type type​","type":1,"pageTitle":"goosetyped.type","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.type#type-type","content":" Signature:  export type Type&lt;TInstance, TStatic&gt; = Ctor&lt;TInstance&gt; &amp; TStatic;   References: Ctor ","version":"Next","tagName":"h2"},{"title":"goosetyped.stripdocolumns","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdocolumns","content":"","keywords":"","version":"Next"},{"title":"StripDoColumns type​","type":1,"pageTitle":"goosetyped.stripdocolumns","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdocolumns#stripdocolumns-type","content":" A type helper that strips away all members of the mongoose Document instance from the type as well as all methods.  Signature:  export type StripDoColumns&lt;T extends Document, TExcept extends keyof Document = never&gt; = Pick&lt;T, SetDifference&lt;NonFunctionKeys&lt;T&gt;, Exclude&lt;keyof Document, TExcept&gt;&gt;&gt;;   ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"goosetyped.stripdocolumns","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.stripdocolumns#example","content":" export class Message extends GtModel() { id: string; text: string; myMethod(): void { } } const msg = new Message(); // Not the msg instance has a lot of members from the Document type (The instance of Model) const m: StripDoColumns&lt;Message&gt;; // now m has only &quot;text&quot; but not &quot;id&quot; // Since &quot;id&quot; also exists in Document, to include it we need to exclude it from the strip. const m: StripDoColumns&lt;Message, 'id'&gt;; // now m has &quot;id&quot; &amp; &quot;text&quot;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validator","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validator","content":"","keywords":"","version":"Next"},{"title":"Validator type​","type":1,"pageTitle":"goosetyped.validator","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validator#validator-type","content":" https://mongoosejs.com/docs/api.html\\#schematype\\_SchemaType-validate  Signature:  export type Validator = RegExp | ValidatorFn | ValidatorOpts | ValidatorOpts[];   References: ValidatorFn, ValidatorOpts ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatorfn","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatorfn","content":"","keywords":"","version":"Next"},{"title":"ValidatorFn type​","type":1,"pageTitle":"goosetyped.validatorfn","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatorfn#validatorfn-type","content":" Signature:  export type ValidatorFn&lt;T = any&gt; = (value: T) =&gt; boolean | Promise&lt;boolean&gt;;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatormessagecontext","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext","content":"","keywords":"","version":"Next"},{"title":"ValidatorMessageContext interface​","type":1,"pageTitle":"goosetyped.validatormessagecontext","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext#validatormessagecontext-interface","content":" Signature:  export interface ValidatorMessageContext   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.validatormessagecontext","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext#properties","content":" Property Modifiers Type Description path string reason string | Error value any  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatormessagecontext.path","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.path","content":"","keywords":"","version":"Next"},{"title":"ValidatorMessageContext.path property​","type":1,"pageTitle":"goosetyped.validatormessagecontext.path","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.path#validatormessagecontextpath-property","content":" Signature:  path: string;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatormessagecontext.value","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.value","content":"","keywords":"","version":"Next"},{"title":"ValidatorMessageContext.value property​","type":1,"pageTitle":"goosetyped.validatormessagecontext.value","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.value#validatormessagecontextvalue-property","content":" Signature:  value: any;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatormessagecontext.reason","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.reason","content":"","keywords":"","version":"Next"},{"title":"ValidatorMessageContext.reason property​","type":1,"pageTitle":"goosetyped.validatormessagecontext.reason","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatormessagecontext.reason#validatormessagecontextreason-property","content":" Signature:  reason: string | Error;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatoropts","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts","content":"","keywords":"","version":"Next"},{"title":"ValidatorOpts interface​","type":1,"pageTitle":"goosetyped.validatoropts","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts#validatoropts-interface","content":" Signature:  export interface ValidatorOpts&lt;T = any&gt;   ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"goosetyped.validatoropts","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts#properties","content":" Property Modifiers Type Description message? string | ((props: ValidatorMessageContext) =&gt; string) (Optional) validator ValidatorFn&lt;T&gt;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatoropts.validator","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts.validator","content":"","keywords":"","version":"Next"},{"title":"ValidatorOpts.validator property​","type":1,"pageTitle":"goosetyped.validatoropts.validator","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts.validator#validatoroptsvalidator-property","content":" Signature:  validator: ValidatorFn&lt;T&gt;;  ","version":"Next","tagName":"h2"},{"title":"goosetyped.validatoropts.message","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts.message","content":"","keywords":"","version":"Next"},{"title":"ValidatorOpts.message property​","type":1,"pageTitle":"goosetyped.validatoropts.message","url":"/node/docs-goosetyped/docs/api-docs/goosetyped.validatoropts.message#validatoroptsmessage-property","content":" Signature:  message?: string | ((props: ValidatorMessageContext) =&gt; string);  ","version":"Next","tagName":"h2"},{"title":"Metadata","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/basics/metadata","content":"","keywords":"","version":"Next"},{"title":"Mongoose metadata​","type":1,"pageTitle":"Metadata","url":"/node/docs-goosetyped/docs/basics/metadata#mongoose-metadata","content":" In mongoose we define all the metadata in the Schema class.  Column metadata is defined by providing a SchemaDefinition object.Metadata about the model is defined by providing a SchemaOptions.  import { SchemaDefinition, SchemaOptions, Schema } from 'mongoose'; const columnMetadata: SchemaDefinition = { name: Schema.Types.String, }; const modelMetadata: SchemaOptions = { collection: 'data', }; var dataSchema = new Schema(columnMetadata, modelMetadata);   ","version":"Next","tagName":"h2"},{"title":"GooseTyped metadata​","type":1,"pageTitle":"Metadata","url":"/node/docs-goosetyped/docs/basics/metadata#goosetyped-metadata","content":" In GooseTyped metadata is defined as part of the class definition, as an additional parameter sent to decorators.  In most cases the decorators does not require additional metadata and provide a default behavior that will usually suffice, however if you wish to change it you can.  You'll notice that some metadata options will match directly to mongoose options and some will not. GooseTyped goal is to simplify how models are defined and it abstracts away some of the options to reduce the complexity.  For example, the skipVersioning option is set on the model options in mongoose but in GooseTyped it is set per column and GooseTyped will created the proper definition for the entire model from all of the column. ","version":"Next","tagName":"h2"},{"title":"Documents And SubDocuments","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/basics/documents-and-sub-documents","content":"","keywords":"","version":"Next"},{"title":"Document Options (metadata)​","type":1,"pageTitle":"Documents And SubDocuments","url":"/node/docs-goosetyped/docs/basics/documents-and-sub-documents#document-options-metadata","content":" Most of the metadata options are straight-forward and well documented in the Api Docs.  For depp inspection check GtDocumentMetadataArgs &amp; GtSubDocumentMetadataArgs  We will cover some of them here:  GtSubDocumentMetadataArgs.noId​  This will disable the automatic _id set for every sub document. Read more here...  caution Since Document model must have an id, this is only valid for SubDocuments  GtDocumentMetadataArgs.connectionId​  The connection id to use when creating the model.  When not set, GooseTyped will use the default connection. When set, GooseTyped will use the registered connection to compile the model at the defined stage in the connections life.  import mongoose from 'mongoose'; import { GtDocument, GtModel, GtColumn, addConnection } from '@pebula/goosetyped'; @GtDocument({ connectionId: 'myConnection', }) export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; }   At this point the model class is available, but it is not connect to mongoose so no point of creating new instances of it...  const connection = mongoose.createConnection('localhost',{ /* ...*/ }); const ready = addConnection('myConnection', () =&gt; connection); await ready;   Once ready resolves we have a guarantee that all models are compiled and bound to the connection.  note Deffered model compilation is explained in more detail in the Async Model Compilation. ","version":"Next","tagName":"h2"},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/getting-started/basic-example","content":"Basic Usage Let's start with a simple model: import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; } Here we have a Customer class with a name and age columns. We decorate each column with the @GtColumn decorator to declare that the property is mapped to a column in the DB.We decorate each model with the @GtDocument decorator to declare that this is a model.We extend the Customer class with the expression GtModel() which is extending mongoose's Model class with a bit of GooseTyped flavor. To qualify as a model a class must be decorated with @GtDocument and extend GtModel(). GooseTyped distinguish between documents and sub-documents. This is","keywords":"","version":"Next"},{"title":"Mixins","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/basics/mixins","content":"Mixins Mixins are the perfect tools to apply functionality and are very similar to mongoose plugins. Let's say we want to add createDate and updateDate columns to our Customer model: The straight-forward approach would ne to use the @GtTimestampCreated &amp; @GtTimestampUpdated decorators in the class: import { GtDocument, GtModel, GtTimestampCreated, GtTimestampUpdated } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; @GtTimestampCreated() createDate: Date; @GtTimestampUpdated() updateDate: Date; } tip @GtTimestampCreated &amp; @GtTimestampUpdated are utility decorators that expose mongoose's built-in timestamps This is ok but we most probably want to add this capability to other models in our application but not all of them. We can use inheritance but this will limit our possibility of composing capabilities together... Instead, we define a class (does not have to be a document or sub-document...) with the capability we want: export class TimestampMixin { @GtTimestampCreated() createDate: Date; @GtTimestampUpdated() updateDate: Date; } Now we can mix it into our models where needed: @GtDocument() export class Customer extends GtModel(TimestampMixin) { @GtColumn() name: string; @GtColumn() age: number; updateDate: Date; } Ohh, we forgot, the Customer model also needs an Owner mixin: export class OwnerMixin { @GtColumn() owner: string; } Now we can mix it into our models where needed: @GtDocument() export class Customer extends GtModel(TimestampMixin, OwnerMixin) { @GtColumn() name: string; @GtColumn() age: number; updateDate: Date; } ","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/getting-started/installation","content":"Installation To get started install the package: YarnNPM $ yarn add @pebula/goosetyped info GooseTyped requires mongoose and it's pre-requisites installed, it does not install them for you. Now, just start defining models using the tools provided by GooseTyped. By default, all models are attached to the default mongoose connection but you can assign models to a specific connection which is also how you can implement deffered model compilation, more on this in future chapters...","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/getting-started/introduction","content":"","keywords":"","version":"Next"},{"title":"One Model One Schema​","type":1,"pageTitle":"Introduction","url":"/node/docs-goosetyped/docs/getting-started/introduction#one-model-one-schema","content":" With GooseTyped you no longer need to define a schema and then create a model class from it, everything is streamlined into one single class.  import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn() name: string; @GtColumn() age: number; }   This is very powerful when working in TypeScript as no sorcery is required to properly export your model class types.  ","version":"Next","tagName":"h2"},{"title":"Not an ORM​","type":1,"pageTitle":"Introduction","url":"/node/docs-goosetyped/docs/getting-started/introduction#not-an-orm","content":" GooseTyped is not an ORM by itself and does not provide additional functionality on-top of mongoose. It is a wrapper around mongoose which provide modern tools to define and and configure the DB schema which is more adapted to TypeScript and modern ORM libraries. ","version":"Next","tagName":"h2"},{"title":"Utilities","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/utilities/","content":"","keywords":"","version":"Next"},{"title":"getSchemaOf​","type":1,"pageTitle":"Utilities","url":"/node/docs-goosetyped/docs/utilities/#getschemaof","content":" Returns the mongoose schema for the provided Model / Resource. [Link]  ","version":"Next","tagName":"h2"},{"title":"getDiscriminatorKeyFor​","type":1,"pageTitle":"Utilities","url":"/node/docs-goosetyped/docs/utilities/#getdiscriminatorkeyfor","content":" Returns the discriminator key for the provided Model / Resource. Only valid for discriminator implementation, thr base class will not yield a value. [Link]  ","version":"Next","tagName":"h2"},{"title":"getDiscriminatorKeysOf​","type":1,"pageTitle":"Utilities","url":"/node/docs-goosetyped/docs/utilities/#getdiscriminatorkeysof","content":" Returns the discriminator keys for the provided Model / Resource. [Link]  ","version":"Next","tagName":"h2"},{"title":"findModels​","type":1,"pageTitle":"Utilities","url":"/node/docs-goosetyped/docs/utilities/#findmodels","content":" Return all Models / Resources registered in GooseTyped. [Link]  ","version":"Next","tagName":"h2"},{"title":"getEnum​","type":1,"pageTitle":"Utilities","url":"/node/docs-goosetyped/docs/utilities/#getenum","content":" Returns the list of enums registered for a path in a Model / Resource. [Link] ","version":"Next","tagName":"h2"},{"title":"Columns","type":0,"sectionRef":"#","url":"/node/docs-goosetyped/docs/basics/columns","content":"","keywords":"","version":"Next"},{"title":"Column Options (metadata)​","type":1,"pageTitle":"Columns","url":"/node/docs-goosetyped/docs/basics/columns#column-options-metadata","content":" We can add additional metadata to columns:  import { GtDocument, GtModel } from '@pebula/goosetyped'; @GtDocument() export class Customer extends GtModel() { @GtColumn({ required: true, }) name: string; @GtColumn({ validate: value =&gt; value &gt; 0, }) age: number; @GtColumn({ enum: ['male', 'female', 'other'], default: 'other' }) gender: 'male' | 'female' | 'other'; }   You can review all of the metadata options in the API docs for GtColumnMetadataArgs&lt;T&gt;.  ","version":"Next","tagName":"h2"},{"title":"Column Type​","type":1,"pageTitle":"Columns","url":"/node/docs-goosetyped/docs/basics/columns#column-type","content":" TypeScript emits the type used for every column so GooseType can use that to automatically define the proper type with mongoose.  export class Customer { @GtColumn() age: number; }   In the example above GooseType will identify that the type is a number and will use mongoose.Schema.Types.Number as the type for the column.  ","version":"Next","tagName":"h2"},{"title":"Explicit type definition​","type":1,"pageTitle":"Columns","url":"/node/docs-goosetyped/docs/basics/columns#explicit-type-definition","content":" There are some scenarios in which typescript's type system is not able to provide a type definition and an explicit type definition is required.  This usually happen when:  Generics is used to define the type (e.g. Array&lt;string&gt;, Map&lt;number&gt;, etc...)The type is unknown at the time it is defined (usually due to cyclic reference)  warning GooseType will throw an error when these scenarios occur and are not handled.  Additionally, it might be that would want to customize the type defined.  To define a custom type we use GtColumnMetadataArgs.typewhich accepts one of:  Schematypeof SchemaType (e.g mongoose.Schema.Types.Number)A function that returns a GooseTyped model or resource (the classes of a document or sub-document).  We will not go into depth on the first two options, they are straight forward and we recommend not to use them unless there is really no solution to your problem.  The last option is nothing but a simple arrow function that returns the type for this column, let's review some examples:  Array​  This covers the 1st scenario which TS can not resolve the type for us:  export class Person { @GtColumn({ type: () =&gt; String, }) friends: string[]; @GtColumn({ type: () =&gt; Date, }) importantDates: Array&lt;Date&gt;; }   tip We return the actual generic type, String and not Array&lt;string&gt;. TypeScript already resolves the type to Array we only need the internal type.  Map​  Again, same as Array above, TS can not resolve the subject type of the Map, it will only resolve Map.  export class Person { @GtColumn({ type: () =&gt; Number, }) map: Map&lt;number&gt;; }   Circular or Undefined​  // module: person.ts export class Person { @GtColumn({ type: () =&gt; Address, }) address: Address; } // module: address.ts export class Address { @GtColumn({ type: () =&gt; Person, }) resident: Person; }   At the time when the class is defined both modules (person &amp; address) refer to each other. This means that the type will be undefined and will get populated later once both classes are exported.  TypeScript does not account for that and will mark the type for the property as undefined. To solve this we use the function that returns the type. We will resolve the type after both classes are resolved so we will get the proper value.  note Circular reference types requires deffered model initialization described in the advanced section. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}