(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{104:function(e,t,n){"use strict";n(0),n(96)},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(8),i=(n(0),n(98)),o=(n(104),{id:"schema",title:"Schema",sidebar_label:"2. Schema"}),s={unversionedId:"basics/schema",id:"basics/schema",isDocsHomePage:!1,title:"Schema",description:"A schema is a collection of metadata objects that describe the structure of a type/class/object.",source:"@site/docs/basics/schema.md",slug:"/basics/schema",permalink:"/node/tom/docs/basics/schema",editUrl:"https://github.com/pebula/node/tree/master/apps/docs/tom/docs/docs/basics/schema.md",version:"current",sidebar_label:"2. Schema",sidebar:"someSidebar",previous:{title:"Core Module",permalink:"/node/tom/docs/basics/core-module"},next:{title:"Modules",permalink:"/node/tom/docs/basics/modules"}},c=[{value:"Decorators",id:"decorators",children:[{value:"Special Type Information",id:"special-type-information",children:[]}]}],l={toc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A schema is a collection of metadata objects that describe the structure of a type/class/object."),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"interface X {\n  y?: string;\n}\n")),Object(i.b)("p",null,"For the above interface, we can build a schema that describe the interface ",Object(i.b)("inlineCode",{parentName:"p"},"X"),".",Object(i.b)("br",{parentName:"p"}),"\n","It will have a metadata item that describes the property ",Object(i.b)("inlineCode",{parentName:"p"},"y")," and that metadata item will also describe that it is ",Object(i.b)("strong",{parentName:"p"},"optional")," and it is of type ",Object(i.b)("strong",{parentName:"p"},"string"),"."),Object(i.b)("p",null,"This is the basic idea with simple metadata we can quickly understand. From here lot's of information is added and based on this information we can do different things."),Object(i.b)("h2",{id:"decorators"},"Decorators"),Object(i.b)("p",null,"To obtain metadata we need to allow the user to express it.",Object(i.b)("br",{parentName:"p"}),"\n","One simple way is to have the user provide a schema object which is not natural, verbose and most importantly not type-safe."),Object(i.b)("p",null,"We want to allow the user to define it's own classes and while doing it express the metadata required based on the domain logic.",Object(i.b)("br",{parentName:"p"}),"\n","We achieve this via decorators:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"class Order {\n  @P id: number;\n  @P date: Date;\n  @P shipped: boolean;\n  @P.enum(OrderStatus) status: OrderStatus;\n  @P.asArray('string') coupons: string[];\n}\n")),Object(i.b)("p",null,"In the example above, we used the decorator ",Object(i.b)("inlineCode",{parentName:"p"},"P")," to mark the properties we want to be part of the schema for the class ",Object(i.b)("inlineCode",{parentName:"p"},"Order"),".",Object(i.b)("br",{parentName:"p"}),"\n","By doing so, typescript automatically provide us runtime information about the type.",Object(i.b)("br",{parentName:"p"}),"\n","I.E. ",Object(i.b)("strong",{parentName:"p"},"TOM")," knows that:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"There is a class ",Object(i.b)("inlineCode",{parentName:"li"},"Order")),Object(i.b)("li",{parentName:"ul"},"It is made out of 5 properties (id, date, shipped, status, coupons)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"id")," is a ",Object(i.b)("strong",{parentName:"li"},"number"),", ",Object(i.b)("inlineCode",{parentName:"li"},"date")," is a ",Object(i.b)("strong",{parentName:"li"},"Date")," and so on...")),Object(i.b)("h3",{id:"special-type-information"},"Special Type Information"),Object(i.b)("p",null,"Typescript decorators can provide a limited runtime reflection of the types."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It can not reflect enums"),Object(i.b)("li",{parentName:"ul"},"It can not reflect unresolved objects (circular reference classes)"),Object(i.b)("li",{parentName:"ul"},"It can not reflect generics",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Array","<","string> will reflect as ",Object(i.b)("inlineCode",{parentName:"li"},"Array")),Object(i.b)("li",{parentName:"ul"},"Set","<","string> will reflect as ",Object(i.b)("inlineCode",{parentName:"li"},"Set")),Object(i.b)("li",{parentName:"ul"},"Map","<","string, string> will reflect as ",Object(i.b)("inlineCode",{parentName:"li"},"Map")),Object(i.b)("li",{parentName:"ul"},"Etc...")))),Object(i.b)("p",null,"To workaround these limitations several decorators are used."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"\nclass PreTest {\n  @P v: number;\n}\n\nclass Test {\n\n  @P.enum(MyEnum) v1: MyEnum;\n  @P.asArray('string') v2: string[];\n  @P.asSet('string') v3: Set<string>;\n  @P.asMap('string', 'date') v4: Map<Date, string>;  // 2nd type param (data) is optional\n  @P.asObjectMap('date') v5: Record<string, Date>;  // 2nd type param (data) is optional\n  @P.asTuple('string', 'number', 'boolean') v6: [string, number, boolean];\n  @P.literal('xyz') v7: 'xyz';\n  @P.union('string', 'date', @P.literal(99), P.asArray('number')) v8: string | Date | 99 | number[];\n \n  @P v9: PreTest; // This will work cause `PreTest` is already defined\n  @P.as(() => PostTest) v10: PostTest; // This must be wrapped in a function, as reference to the type, because it is still undefined when the decorator is invoked.\n}\n\nclass PostTest {\n  @P v: number;\n}\n\n")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Decorators are only valid on a class, a class method or a class property."))))}b.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return o}));var a=n(16),r=n(97);function i(){var e=Object(a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,o=i.forcePrependBaseUrl,s=void 0!==o&&o,c=i.absolute,l=void 0!==c&&c;if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(s)return t+n;var b=n.startsWith(t)?n:t+n.replace(/^\//,"");return l?e+b:b}(i,n,e,t)}}}function o(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},97:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))},98:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);