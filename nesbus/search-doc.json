[{"title":"index","type":0,"sectionRef":"#","url":"docs/api-docs/index","content":"","keywords":""},{"title":"API Reference","type":1,"pageTitle":"index","url":"docs/api-docs/index#api-reference","content":""},{"title":"Packages","type":1,"pageTitle":"index","url":"docs/api-docs/index#packages","content":"Package\tDescription@pebula/nesbus\t "},{"title":"nesbus","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus","content":"","keywords":""},{"title":"nesbus package","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#nesbus-package","content":""},{"title":"Classes","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#classes","content":"Class\tDescriptionSbContext SbErrorEvent SbErrorHandler SbMessageErrorEvent ServiceBusModule\t "},{"title":"Functions","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#functions","content":"Function\tDescriptioncreateSbServer(serverId)\tCreate or returns and existing server.This is for use on the strategy property option when creating a microservice. Queue(metadata)\tSubscribes to incoming events from a queue SbIntercept(interceptors) Subscription(metadata)\tSubscribes to incoming events from a topic "},{"title":"Interfaces","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#interfaces","content":"Interface\tDescriptionSbEmitterImp\tRepresents an object that can emit service bus message. (I.E a service bus Sender) SbEmitterMetadataOptions SbInterceptor SbManagementClientAtomOptions SbManagementClientOptions SbManagementDefaultsAdapter SbModuleRegisterOptions SbQueueEmitterMetadataOptions SbQueueEntityProvision SbQueueMetadataOptions SbRuleEntityProvision SbServerOptions SbSubscriberMetadataOptions SbSubscriptionMetadataOptions SbTopicEntityProvision SbTopicMetadataOptions SbTopicSubscriptionEntityProvision ServiceBusAadTokenCredentials ServiceBusConnectionStringCredentials ServiceBusManagementAadTokenCredentials ServiceBusTokenProviderCredentials\t "},{"title":"Variables","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#variables","content":"Variable\tDescriptionQueueEmitter\tSubscribes to incoming events from a queue Topic\tSubscribes to incoming events from a topic "},{"title":"Type Aliases","type":1,"pageTitle":"nesbus","url":"docs/api-docs/nesbus#type-aliases","content":"Type Alias\tDescriptionMetaOrMetaFactory SbContextArgs SbCorrelationFilter SbEmitterRef\tA Reference to an existing client emitter. This is basically a query to get the service bus Sender instance for the client registered at the queue / topic name.Note that if you're using unique client name you can also provide the specific client id to target.Type (topic/queue) is irrelevant because in any case two identical entities can not share the same name event if they are of different type. SbEntityProvisionOption SbMessageEmitter\tRepresents an object that can be used (directly or indirectly) to emit messages to service bus. This can be either a directly emitting object or a reference that is used to resolve a directly emitting object. SbQueue SbRule SbSqlFilter SbSubscription SbTopic\t "},{"title":"nesbus.createsbserver","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.createsbserver","content":"","keywords":""},{"title":"createSbServer() function","type":1,"pageTitle":"nesbus.createsbserver","url":"docs/api-docs/nesbus.createsbserver#createsbserver-function","content":"Create or returns and existing server. This is for use on the strategy property option when creating a microservice. Signature: export declare function createSbServer(serverId?: string): SbServer; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.createsbserver","url":"docs/api-docs/nesbus.createsbserver#parameters","content":"Parameter\tType\tDescriptionserverId\tstring\t Returns: SbServer "},{"title":"nesbus.metaormetafactory","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.metaormetafactory","content":"","keywords":""},{"title":"MetaOrMetaFactory type","type":1,"pageTitle":"nesbus.metaormetafactory","url":"docs/api-docs/nesbus.metaormetafactory#metaormetafactory-type","content":"Signature: export declare type MetaOrMetaFactory<T> = T | ((helper?: any) => (T | Promise<T>)); Copy "},{"title":"nesbus.queueemitter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.queueemitter","content":"","keywords":""},{"title":"QueueEmitter variable","type":1,"pageTitle":"nesbus.queueemitter","url":"docs/api-docs/nesbus.queueemitter#queueemitter-variable","content":"Subscribes to incoming events from a queue Signature: QueueEmitter: (metadata: MetaOrMetaFactory<SbQueueEmitterMetadataOptions>) => PropertyDecorator Copy "},{"title":"nesbus.queue","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.queue","content":"","keywords":""},{"title":"Queue() function","type":1,"pageTitle":"nesbus.queue","url":"docs/api-docs/nesbus.queue#queue-function","content":"Subscribes to incoming events from a queue Signature: export declare function Queue<T = false>(metadata: MetaOrMetaFactory<SbQueueMetadataOptions>): PropOrMethodDecorator<T, MethodDecorator>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.queue","url":"docs/api-docs/nesbus.queue#parameters","content":"Parameter\tType\tDescriptionmetadata\tMetaOrMetaFactory<SbQueueMetadataOptions>\t Returns: PropOrMethodDecorator<T, MethodDecorator> "},{"title":"nesbus.sbcontext","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext","content":"","keywords":""},{"title":"SbContext class","type":1,"pageTitle":"nesbus.sbcontext","url":"docs/api-docs/nesbus.sbcontext#sbcontext-class","content":"Signature: export declare class SbContext<T extends keyof SbSubscriberTypeMap = keyof SbSubscriberTypeMap> extends BaseRpcContext<SbContextArgs<T>> Copy Extends: BaseRpcContext<[SbContextArgs](/node/nesbus/docs/api-docs/nesbus.sbcontextargs)<T>> "},{"title":"Constructors","type":1,"pageTitle":"nesbus.sbcontext","url":"docs/api-docs/nesbus.sbcontext#constructors","content":"Constructor\tModifiers\tDescription(constructor)(args) Constructs a new instance of the SbContext class "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbcontext","url":"docs/api-docs/nesbus.sbcontext#properties","content":"Property\tModifiers\tType\tDescriptiontype T\t "},{"title":"Methods","type":1,"pageTitle":"nesbus.sbcontext","url":"docs/api-docs/nesbus.sbcontext#methods","content":"Method\tModifiers\tDescriptionentityName() The entity name used to identify subscription/queue in service bus getData() getMessage() resolveClient(emitterReference) Try to resolves a client (queue or topic emitter/sender) based on the entity name.If an entity reference is not provided, the default reference is the entity used to emit messages to this subscriber. If this is a queue subscriber, it will be a queue emitter. If this is a subscription, it will be the topic of the subscription.> You can also provide a clientId to look the entity in. "},{"title":"nesbus.sbcontext._constructor_","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext._constructor_","content":"","keywords":""},{"title":"SbContext.(constructor)","type":1,"pageTitle":"nesbus.sbcontext._constructor_","url":"docs/api-docs/nesbus.sbcontext._constructor_#sbcontextconstructor","content":"Constructs a new instance of the SbContext class Signature: constructor(args: SbContextArgs<T>); Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbcontext._constructor_","url":"docs/api-docs/nesbus.sbcontext._constructor_#parameters","content":"Parameter\tType\tDescriptionargs\tSbContextArgs<T>\t "},{"title":"nesbus.sbcontext.getdata","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext.getdata","content":"","keywords":""},{"title":"SbContext.getData() method","type":1,"pageTitle":"nesbus.sbcontext.getdata","url":"docs/api-docs/nesbus.sbcontext.getdata#sbcontextgetdata-method","content":"Signature: getData<TBody = any>(): TBody; Copy Returns: TBody "},{"title":"nesbus.sbcontext.entityname","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext.entityname","content":"","keywords":""},{"title":"SbContext.entityName() method","type":1,"pageTitle":"nesbus.sbcontext.entityname","url":"docs/api-docs/nesbus.sbcontext.entityname#sbcontextentityname-method","content":"The entity name used to identify subscription/queue in service bus Signature: entityName(): string; Copy Returns: string "},{"title":"nesbus.sbcontext.getmessage","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext.getmessage","content":"","keywords":""},{"title":"SbContext.getMessage() method","type":1,"pageTitle":"nesbus.sbcontext.getmessage","url":"docs/api-docs/nesbus.sbcontext.getmessage#sbcontextgetmessage-method","content":"Signature: getMessage(): ServiceBusMessage; Copy Returns: ServiceBusMessage "},{"title":"nesbus.sbcontext.resolveclient","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext.resolveclient","content":"","keywords":""},{"title":"SbContext.resolveClient() method","type":1,"pageTitle":"nesbus.sbcontext.resolveclient","url":"docs/api-docs/nesbus.sbcontext.resolveclient#sbcontextresolveclient-method","content":"Try to resolves a client (queue or topic emitter/sender) based on the entity name. If an entity reference is not provided, the default reference is the entity used to emit messages to this subscriber. If this is a queue subscriber, it will be a queue emitter. If this is a subscription, it will be the topic of the subscription. > You can also provide a clientId to look the entity in. Signature: resolveClient(emitterReference?: SbEmitterRef): SbEmitterImp | undefined; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbcontext.resolveclient","url":"docs/api-docs/nesbus.sbcontext.resolveclient#parameters","content":"Parameter\tType\tDescriptionemitterReference\tSbEmitterRef\t Returns: SbEmitterImp | undefined "},{"title":"nesbus.sbcontext.type","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontext.type","content":"","keywords":""},{"title":"SbContext.type property","type":1,"pageTitle":"nesbus.sbcontext.type","url":"docs/api-docs/nesbus.sbcontext.type#sbcontexttype-property","content":"Signature: get type(): T; Copy "},{"title":"nesbus.sbcontextargs","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcontextargs","content":"","keywords":""},{"title":"SbContextArgs type","type":1,"pageTitle":"nesbus.sbcontextargs","url":"docs/api-docs/nesbus.sbcontextargs#sbcontextargs-type","content":"Signature: export declare type SbContextArgs<T extends keyof SbSubscriberTypeMap = keyof SbSubscriberTypeMap> = [SbSubscriberMetadata<T>, ServiceBusMessage]; Copy "},{"title":"nesbus.sbcorrelationfilter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbcorrelationfilter","content":"","keywords":""},{"title":"SbCorrelationFilter type","type":1,"pageTitle":"nesbus.sbcorrelationfilter","url":"docs/api-docs/nesbus.sbcorrelationfilter#sbcorrelationfilter-type","content":"Signature: export declare type SbCorrelationFilter = Partial<CorrelationFilter>; Copy "},{"title":"nesbus.sbemitterimp","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemitterimp","content":"","keywords":""},{"title":"SbEmitterImp interface","type":1,"pageTitle":"nesbus.sbemitterimp","url":"docs/api-docs/nesbus.sbemitterimp#sbemitterimp-interface","content":"Represents an object that can emit service bus message. (I.E a service bus Sender) Signature: export interface SbEmitterImp Copy "},{"title":"Methods","type":1,"pageTitle":"nesbus.sbemitterimp","url":"docs/api-docs/nesbus.sbemitterimp#methods","content":"Method\tDescriptionsend(message)\t "},{"title":"nesbus.sbemitterimp.send","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemitterimp.send","content":"","keywords":""},{"title":"SbEmitterImp.send() method","type":1,"pageTitle":"nesbus.sbemitterimp.send","url":"docs/api-docs/nesbus.sbemitterimp.send#sbemitterimpsend-method","content":"Signature: send(message: SendableMessageInfo): Promise<void>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbemitterimp.send","url":"docs/api-docs/nesbus.sbemitterimp.send#parameters","content":"Parameter\tType\tDescriptionmessage\tSendableMessageInfo\t Returns: Promise<void> "},{"title":"nesbus.sbemittermetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemittermetadataoptions","content":"","keywords":""},{"title":"SbEmitterMetadataOptions interface","type":1,"pageTitle":"nesbus.sbemittermetadataoptions","url":"docs/api-docs/nesbus.sbemittermetadataoptions#sbemittermetadataoptions-interface","content":"Signature: export interface SbEmitterMetadataOptions Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbemittermetadataoptions","url":"docs/api-docs/nesbus.sbemittermetadataoptions#properties","content":"Property\tType\tDescriptionclientId\tstring\tThe unique id of the client that this emitter should use as the underlying emitter. This should match the client name defined in SgClientOptions.name.By default SgClientOptions.name is not set, which is the identifier for the default client. A multi-client environment is not required in most of the scenarios, if that is the case do not set this value. name\tstring\t "},{"title":"nesbus.sbemittermetadataoptions.clientid","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemittermetadataoptions.clientid","content":"","keywords":""},{"title":"SbEmitterMetadataOptions.clientId property","type":1,"pageTitle":"nesbus.sbemittermetadataoptions.clientid","url":"docs/api-docs/nesbus.sbemittermetadataoptions.clientid#sbemittermetadataoptionsclientid-property","content":"The unique id of the client that this emitter should use as the underlying emitter. This should match the client name defined in SgClientOptions.name. By default SgClientOptions.name is not set, which is the identifier for the default client. A multi-client environment is not required in most of the scenarios, if that is the case do not set this value. Signature: clientId?: string; Copy "},{"title":"nesbus.sbemitterref","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemitterref","content":"","keywords":""},{"title":"SbEmitterRef type","type":1,"pageTitle":"nesbus.sbemitterref","url":"docs/api-docs/nesbus.sbemitterref#sbemitterref-type","content":"A Reference to an existing client emitter. This is basically a query to get the service bus Sender instance for the client registered at the queue / topic name. Note that if you're using unique client name you can also provide the specific client id to target. Type (topic/queue) is irrelevant because in any case two identical entities can not share the same name event if they are of different type. Signature: export declare type SbEmitterRef = SbEmitterMetadataOptions; Copy References: [SbEmitterMetadataOptions](/node/nesbus/docs/api-docs/nesbus.sbemittermetadataoptions) "},{"title":"nesbus.sbemittermetadataoptions.name","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbemittermetadataoptions.name","content":"","keywords":""},{"title":"SbEmitterMetadataOptions.name property","type":1,"pageTitle":"nesbus.sbemittermetadataoptions.name","url":"docs/api-docs/nesbus.sbemittermetadataoptions.name#sbemittermetadataoptionsname-property","content":"Signature: name: string; Copy "},{"title":"nesbus.sbentityprovisionoption","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbentityprovisionoption","content":"","keywords":""},{"title":"SbEntityProvisionOption type","type":1,"pageTitle":"nesbus.sbentityprovisionoption","url":"docs/api-docs/nesbus.sbentityprovisionoption#sbentityprovisionoption-type","content":"Signature: export declare type SbEntityProvisionOption<T extends SbEntityProvision<any>> = SgEntityProvisionType | T; Copy "},{"title":"nesbus.sberrorevent","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorevent","content":"","keywords":""},{"title":"SbErrorEvent class","type":1,"pageTitle":"nesbus.sberrorevent","url":"docs/api-docs/nesbus.sberrorevent#sberrorevent-class","content":"Signature: export declare class SbErrorEvent Copy "},{"title":"Constructors","type":1,"pageTitle":"nesbus.sberrorevent","url":"docs/api-docs/nesbus.sberrorevent#constructors","content":"Constructor\tModifiers\tDescription(constructor)(phase, options, error) Constructs a new instance of the SbErrorEvent class "},{"title":"Properties","type":1,"pageTitle":"nesbus.sberrorevent","url":"docs/api-docs/nesbus.sberrorevent#properties","content":"Property\tModifiers\tType\tDescriptionerror Error | MessagingError options SbQueueMetadataOptions | SbSubscriptionMetadataOptions phase 'verify' | 'register' | 'listening'\t "},{"title":"nesbus.sberrorevent._constructor_","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorevent._constructor_","content":"","keywords":""},{"title":"SbErrorEvent.(constructor)","type":1,"pageTitle":"nesbus.sberrorevent._constructor_","url":"docs/api-docs/nesbus.sberrorevent._constructor_#sberroreventconstructor","content":"Constructs a new instance of the SbErrorEvent class Signature: constructor(phase: 'verify' | 'register' | 'listening', options: SbQueueMetadataOptions | SbSubscriptionMetadataOptions, error: Error | MessagingError); Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sberrorevent._constructor_","url":"docs/api-docs/nesbus.sberrorevent._constructor_#parameters","content":"Parameter\tType\tDescriptionphase\t'verify' | 'register' | 'listening' options\tSbQueueMetadataOptions | SbSubscriptionMetadataOptions error\tError | MessagingError\t "},{"title":"nesbus.sberrorevent.error","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorevent.error","content":"","keywords":""},{"title":"SbErrorEvent.error property","type":1,"pageTitle":"nesbus.sberrorevent.error","url":"docs/api-docs/nesbus.sberrorevent.error#sberroreventerror-property","content":"Signature: readonly error: Error | MessagingError; Copy "},{"title":"nesbus.sberrorevent.options","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorevent.options","content":"","keywords":""},{"title":"SbErrorEvent.options property","type":1,"pageTitle":"nesbus.sberrorevent.options","url":"docs/api-docs/nesbus.sberrorevent.options#sberroreventoptions-property","content":"Signature: readonly options: SbQueueMetadataOptions | SbSubscriptionMetadataOptions; Copy "},{"title":"nesbus.sberrorevent.phase","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorevent.phase","content":"","keywords":""},{"title":"SbErrorEvent.phase property","type":1,"pageTitle":"nesbus.sberrorevent.phase","url":"docs/api-docs/nesbus.sberrorevent.phase#sberroreventphase-property","content":"Signature: readonly phase: 'verify' | 'register' | 'listening'; Copy "},{"title":"nesbus.sberrorhandler.onerror","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorhandler.onerror","content":"","keywords":""},{"title":"SbErrorHandler.onError() method","type":1,"pageTitle":"nesbus.sberrorhandler.onerror","url":"docs/api-docs/nesbus.sberrorhandler.onerror#sberrorhandleronerror-method","content":"Signature: abstract onError(event: SbErrorEvent): Promise<void>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sberrorhandler.onerror","url":"docs/api-docs/nesbus.sberrorhandler.onerror#parameters","content":"Parameter\tType\tDescriptionevent\tSbErrorEvent\t Returns: Promise<void> "},{"title":"nesbus.sberrorhandler","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorhandler","content":"","keywords":""},{"title":"SbErrorHandler class","type":1,"pageTitle":"nesbus.sberrorhandler","url":"docs/api-docs/nesbus.sberrorhandler#sberrorhandler-class","content":"Signature: export declare abstract class SbErrorHandler Copy "},{"title":"Methods","type":1,"pageTitle":"nesbus.sberrorhandler","url":"docs/api-docs/nesbus.sberrorhandler#methods","content":"Method\tModifiers\tDescriptiononError(event) onMessageError(event)  "},{"title":"nesbus.sberrorhandler.onmessageerror","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sberrorhandler.onmessageerror","content":"","keywords":""},{"title":"SbErrorHandler.onMessageError() method","type":1,"pageTitle":"nesbus.sberrorhandler.onmessageerror","url":"docs/api-docs/nesbus.sberrorhandler.onmessageerror#sberrorhandleronmessageerror-method","content":"Signature: abstract onMessageError(event: SbMessageErrorEvent): Promise<void>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sberrorhandler.onmessageerror","url":"docs/api-docs/nesbus.sberrorhandler.onmessageerror#parameters","content":"Parameter\tType\tDescriptionevent\tSbMessageErrorEvent\t Returns: Promise<void> "},{"title":"nesbus.sbintercept","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbintercept","content":"","keywords":""},{"title":"SbIntercept() function","type":1,"pageTitle":"nesbus.sbintercept","url":"docs/api-docs/nesbus.sbintercept#sbintercept-function","content":"Signature: export declare function SbIntercept(...interceptors: Array<SbInterceptor | Type<SbInterceptor>>): <T extends Record<K, OperatorFunction<SbContext<keyof import(\"../interfaces\").SbSubscriberTypeMap>, any>>, K extends string>(target: T, key: K) => void; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbintercept","url":"docs/api-docs/nesbus.sbintercept#parameters","content":"Parameter\tType\tDescriptioninterceptors\tArray<SbInterceptor | Type<SbInterceptor>>\t Returns: <T extends Record<K, OperatorFunction<SbContext<keyof import(\"../interfaces\").SbSubscriberTypeMap>, any>>, K extends string>(target: T, key: K) => void "},{"title":"nesbus.sbinterceptor.intercept","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbinterceptor.intercept","content":"","keywords":""},{"title":"SbInterceptor.intercept() method","type":1,"pageTitle":"nesbus.sbinterceptor.intercept","url":"docs/api-docs/nesbus.sbinterceptor.intercept#sbinterceptorintercept-method","content":"Signature: intercept(context: SbContext, next: CallHandler<T>): Observable<R> | Promise<Observable<R>>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbinterceptor.intercept","url":"docs/api-docs/nesbus.sbinterceptor.intercept#parameters","content":"Parameter\tType\tDescriptioncontext\tSbContext next\tCallHandler<T>\t Returns: Observable<R> | Promise<Observable<R>> "},{"title":"nesbus.sbinterceptor","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbinterceptor","content":"","keywords":""},{"title":"SbInterceptor interface","type":1,"pageTitle":"nesbus.sbinterceptor","url":"docs/api-docs/nesbus.sbinterceptor#sbinterceptor-interface","content":"Signature: export interface SbInterceptor<T = any, R = any> Copy "},{"title":"Methods","type":1,"pageTitle":"nesbus.sbinterceptor","url":"docs/api-docs/nesbus.sbinterceptor#methods","content":"Method\tDescriptionintercept(context, next)\t "},{"title":"nesbus.sbmanagementclientatomoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementclientatomoptions","content":"","keywords":""},{"title":"SbManagementClientAtomOptions interface","type":1,"pageTitle":"nesbus.sbmanagementclientatomoptions","url":"docs/api-docs/nesbus.sbmanagementclientatomoptions#sbmanagementclientatomoptions-interface","content":"Signature: export interface SbManagementClientAtomOptions extends SbConnectionOptions<ServiceBusConnectionStringCredentials, ServiceBusAtomManagementClientOptions> Copy Extends: SbConnectionOptions<[ServiceBusConnectionStringCredentials](/node/nesbus/docs/api-docs/nesbus.servicebusconnectionstringcredentials), ServiceBusAtomManagementClientOptions> "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbmanagementclientatomoptions","url":"docs/api-docs/nesbus.sbmanagementclientatomoptions#properties","content":"Property\tType\tDescriptiondefaults\tSbManagementDefaultsAdapter\t "},{"title":"nesbus.sbmanagementclientatomoptions.defaults","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementclientatomoptions.defaults","content":"","keywords":""},{"title":"SbManagementClientAtomOptions.defaults property","type":1,"pageTitle":"nesbus.sbmanagementclientatomoptions.defaults","url":"docs/api-docs/nesbus.sbmanagementclientatomoptions.defaults#sbmanagementclientatomoptionsdefaults-property","content":"Signature: defaults?: SbManagementDefaultsAdapter; Copy "},{"title":"nesbus.sbmanagementdefaultsadapter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter","content":"","keywords":""},{"title":"SbManagementDefaultsAdapter interface","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter#sbmanagementdefaultsadapter-interface","content":"Signature: export interface SbManagementDefaultsAdapter Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter#properties","content":"Property\tType\tDescriptionentities\t{ queue?: SbQueue; topic?: SbTopic; subscription?: SbSubscription; }\t "},{"title":"Methods","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter#methods","content":"Method\tDescriptiononNewSubscriptionRules(topicName, subscriptionName, providedRules, subscriptionProvision)\tA function that can be used to create default set of rules that will be added when a new subscription is created. This function, when set, is fired at all time even if the user defined a static array or a dynamic function for the rules.If the user provision defines a function for the rules it will be fired first and after that the default rules function will fire.The rules from the user's provision is passed to this function and the result from this function will be used as the resolved rules for the subscription. I.E., for pass-through make sure you return the `providedRules array. "},{"title":"nesbus.sbmanagementclientoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementclientoptions","content":"","keywords":""},{"title":"SbManagementClientOptions interface","type":1,"pageTitle":"nesbus.sbmanagementclientoptions","url":"docs/api-docs/nesbus.sbmanagementclientoptions#sbmanagementclientoptions-interface","content":"Signature: export interface SbManagementClientOptions Copy "},{"title":"nesbus.sbmanagementdefaultsadapter.entities","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter.entities","content":"","keywords":""},{"title":"SbManagementDefaultsAdapter.entities property","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter.entities","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter.entities#sbmanagementdefaultsadapterentities-property","content":"Signature: entities?: { queue?: SbQueue; topic?: SbTopic; subscription?: SbSubscription; }; Copy "},{"title":"nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules","content":"","keywords":""},{"title":"SbManagementDefaultsAdapter.onNewSubscriptionRules() method","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules#sbmanagementdefaultsadapteronnewsubscriptionrules-method","content":"A function that can be used to create default set of rules that will be added when a new subscription is created. This function, when set, is fired at all time even if the user defined a static array or a dynamic function for the rules. If the user provision defines a function for the rules it will be fired first and after that the default rules function will fire. The rules from the user's provision is passed to this function and the result from this function will be used as the resolved rules for the subscription. I.E., for pass-through make sure you return the `providedRules array. Signature: onNewSubscriptionRules?(topicName: string, subscriptionName: string, providedRules: SbRuleEntityProvision[], subscriptionProvision: SbTopicSubscriptionEntityProvision): SbRuleEntityProvision[]; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules","url":"docs/api-docs/nesbus.sbmanagementdefaultsadapter.onnewsubscriptionrules#parameters","content":"Parameter\tType\tDescriptiontopicName\tstring\tThe name of the topic grandparent subscriptionName\tstring\tThe name of subscription parent providedRules\tSbRuleEntityProvision[]\tThe list of rules defined by the user subscriptionProvision\tSbTopicSubscriptionEntityProvision\tThe provision of the subscription created Returns: SbRuleEntityProvision[] "},{"title":"nesbus.sbmessageemitter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmessageemitter","content":"","keywords":""},{"title":"SbMessageEmitter type","type":1,"pageTitle":"nesbus.sbmessageemitter","url":"docs/api-docs/nesbus.sbmessageemitter#sbmessageemitter-type","content":"Represents an object that can be used (directly or indirectly) to emit messages to service bus. This can be either a directly emitting object or a reference that is used to resolve a directly emitting object. Signature: export declare type SbMessageEmitter = SbEmitterRef | SbEmitterImp; Copy References: [SbEmitterRef](/node/nesbus/docs/api-docs/nesbus.sbemitterref), [SbEmitterImp](/node/nesbus/docs/api-docs/nesbus.sbemitterimp) "},{"title":"nesbus.sbmessageerrorevent._constructor_","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmessageerrorevent._constructor_","content":"","keywords":""},{"title":"SbMessageErrorEvent.(constructor)","type":1,"pageTitle":"nesbus.sbmessageerrorevent._constructor_","url":"docs/api-docs/nesbus.sbmessageerrorevent._constructor_#sbmessageerroreventconstructor","content":"Constructs a new instance of the SbMessageErrorEvent class Signature: constructor(options: SbQueueMetadataOptions | SbSubscriptionMetadataOptions, error: Error); Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.sbmessageerrorevent._constructor_","url":"docs/api-docs/nesbus.sbmessageerrorevent._constructor_#parameters","content":"Parameter\tType\tDescriptionoptions\tSbQueueMetadataOptions | SbSubscriptionMetadataOptions error\tError\t "},{"title":"nesbus.sbmessageerrorevent","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmessageerrorevent","content":"","keywords":""},{"title":"SbMessageErrorEvent class","type":1,"pageTitle":"nesbus.sbmessageerrorevent","url":"docs/api-docs/nesbus.sbmessageerrorevent#sbmessageerrorevent-class","content":"Signature: export declare class SbMessageErrorEvent Copy "},{"title":"Constructors","type":1,"pageTitle":"nesbus.sbmessageerrorevent","url":"docs/api-docs/nesbus.sbmessageerrorevent#constructors","content":"Constructor\tModifiers\tDescription(constructor)(options, error) Constructs a new instance of the SbMessageErrorEvent class "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbmessageerrorevent","url":"docs/api-docs/nesbus.sbmessageerrorevent#properties","content":"Property\tModifiers\tType\tDescriptionerror Error options SbQueueMetadataOptions | SbSubscriptionMetadataOptions\t "},{"title":"nesbus.sbmessageerrorevent.error","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmessageerrorevent.error","content":"","keywords":""},{"title":"SbMessageErrorEvent.error property","type":1,"pageTitle":"nesbus.sbmessageerrorevent.error","url":"docs/api-docs/nesbus.sbmessageerrorevent.error#sbmessageerroreventerror-property","content":"Signature: readonly error: Error; Copy "},{"title":"nesbus.sbmessageerrorevent.options","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmessageerrorevent.options","content":"","keywords":""},{"title":"SbMessageErrorEvent.options property","type":1,"pageTitle":"nesbus.sbmessageerrorevent.options","url":"docs/api-docs/nesbus.sbmessageerrorevent.options#sbmessageerroreventoptions-property","content":"Signature: readonly options: SbQueueMetadataOptions | SbSubscriptionMetadataOptions; Copy "},{"title":"nesbus.sbmoduleregisteroptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmoduleregisteroptions","content":"","keywords":""},{"title":"SbModuleRegisterOptions interface","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions","url":"docs/api-docs/nesbus.sbmoduleregisteroptions#sbmoduleregisteroptions-interface","content":"Signature: export interface SbModuleRegisterOptions Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions","url":"docs/api-docs/nesbus.sbmoduleregisteroptions#properties","content":"Property\tType\tDescriptionclients\tSbClientOptions[] | Omit<ValueProvider, 'provide'> | Omit<FactoryProvider, 'provide'>\tA list of client configuration objects or a NestJS ValueProvider/FactoryProvider that resolves to a list of client configuration objects. metaFactoryProvider\tOmit<Exclude<Provider, Type<any>>, 'provide'> | Type<any>\tAn optional providers that when set resolves to the value injected to the metadata factory function, when used. providers\tProvider[] servers\tSbServerOptions[] | Omit<ValueProvider, 'provide'> | Omit<FactoryProvider, 'provide'>\tA list of server configuration objects or a NestJS ValueProvider/FactoryProvider that resolves to a list of server configuration objects. "},{"title":"nesbus.sbmoduleregisteroptions.clients","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.clients","content":"","keywords":""},{"title":"SbModuleRegisterOptions.clients property","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions.clients","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.clients#sbmoduleregisteroptionsclients-property","content":"A list of client configuration objects or a NestJS ValueProvider/FactoryProvider that resolves to a list of client configuration objects. Signature: clients?: SbClientOptions[] | Omit<ValueProvider, 'provide'> | Omit<FactoryProvider, 'provide'>; Copy "},{"title":"nesbus.sbmoduleregisteroptions.providers","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.providers","content":"","keywords":""},{"title":"SbModuleRegisterOptions.providers property","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions.providers","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.providers#sbmoduleregisteroptionsproviders-property","content":"Signature: providers?: Provider[]; Copy "},{"title":"nesbus.sbmoduleregisteroptions.metafactoryprovider","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.metafactoryprovider","content":"","keywords":""},{"title":"SbModuleRegisterOptions.metaFactoryProvider property","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions.metafactoryprovider","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.metafactoryprovider#sbmoduleregisteroptionsmetafactoryprovider-property","content":"An optional providers that when set resolves to the value injected to the metadata factory function, when used. Signature: metaFactoryProvider?: Omit<Exclude<Provider, Type<any>>, 'provide'> | Type<any>; Copy "},{"title":"nesbus.sbmoduleregisteroptions.servers","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.servers","content":"","keywords":""},{"title":"SbModuleRegisterOptions.servers property","type":1,"pageTitle":"nesbus.sbmoduleregisteroptions.servers","url":"docs/api-docs/nesbus.sbmoduleregisteroptions.servers#sbmoduleregisteroptionsservers-property","content":"A list of server configuration objects or a NestJS ValueProvider/FactoryProvider that resolves to a list of server configuration objects. Signature: servers: SbServerOptions[] | Omit<ValueProvider, 'provide'> | Omit<FactoryProvider, 'provide'>; Copy "},{"title":"nesbus.sbqueue","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueue","content":"","keywords":""},{"title":"SbQueue type","type":1,"pageTitle":"nesbus.sbqueue","url":"docs/api-docs/nesbus.sbqueue#sbqueue-type","content":"Signature: export declare type SbQueue = Partial<Omit<QueueDetails, 'queueName'>>; Copy "},{"title":"nesbus.sbqueueemittermetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueueemittermetadataoptions","content":"","keywords":""},{"title":"SbQueueEmitterMetadataOptions interface","type":1,"pageTitle":"nesbus.sbqueueemittermetadataoptions","url":"docs/api-docs/nesbus.sbqueueemittermetadataoptions#sbqueueemittermetadataoptions-interface","content":"Signature: export interface SbQueueEmitterMetadataOptions extends SbEmitterMetadataOptions Copy Extends: [SbEmitterMetadataOptions](/node/nesbus/docs/api-docs/nesbus.sbemittermetadataoptions) "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbqueueemittermetadataoptions","url":"docs/api-docs/nesbus.sbqueueemittermetadataoptions#properties","content":"Property\tType\tDescriptionprovision\tSbEntityProvisionOption<SbQueueEntityProvision>\t "},{"title":"nesbus.sbqueueemittermetadataoptions.provision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueueemittermetadataoptions.provision","content":"","keywords":""},{"title":"SbQueueEmitterMetadataOptions.provision property","type":1,"pageTitle":"nesbus.sbqueueemittermetadataoptions.provision","url":"docs/api-docs/nesbus.sbqueueemittermetadataoptions.provision#sbqueueemittermetadataoptionsprovision-property","content":"Signature: provision?: SbEntityProvisionOption<SbQueueEntityProvision>; Copy "},{"title":"nesbus.sbqueueentityprovision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueueentityprovision","content":"","keywords":""},{"title":"SbQueueEntityProvision interface","type":1,"pageTitle":"nesbus.sbqueueentityprovision","url":"docs/api-docs/nesbus.sbqueueentityprovision#sbqueueentityprovision-interface","content":"Signature: export interface SbQueueEntityProvision extends SbEntityProvision<SbQueue> Copy Extends: SbEntityProvision<[SbQueue](/node/nesbus/docs/api-docs/nesbus.sbqueue)> "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbqueueentityprovision","url":"docs/api-docs/nesbus.sbqueueentityprovision#properties","content":"Property\tType\tDescriptiondeadLetter\tSbLinkedEntityProvisionOption\tDefine how the dead letter queue/topic is provisioned (\"forwardDeadLetteredMessagesTo\") > Relevant only when \"forwardDeadLetteredMessagesTo\" has a value. forward\tSbLinkedEntityProvisionOption\tDefine how the forward queue/topic is provisioned (\"forwardTo\") > Relevant only when \"forwardTo\" has a value. "},{"title":"nesbus.sbqueueentityprovision.deadletter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueueentityprovision.deadletter","content":"","keywords":""},{"title":"SbQueueEntityProvision.deadLetter property","type":1,"pageTitle":"nesbus.sbqueueentityprovision.deadletter","url":"docs/api-docs/nesbus.sbqueueentityprovision.deadletter#sbqueueentityprovisiondeadletter-property","content":"Define how the dead letter queue/topic is provisioned (\"forwardDeadLetteredMessagesTo\") > Relevant only when \"forwardDeadLetteredMessagesTo\" has a value. Signature: deadLetter?: SbLinkedEntityProvisionOption; Copy "},{"title":"nesbus.sbqueueentityprovision.forward","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueueentityprovision.forward","content":"","keywords":""},{"title":"SbQueueEntityProvision.forward property","type":1,"pageTitle":"nesbus.sbqueueentityprovision.forward","url":"docs/api-docs/nesbus.sbqueueentityprovision.forward#sbqueueentityprovisionforward-property","content":"Define how the forward queue/topic is provisioned (\"forwardTo\") > Relevant only when \"forwardTo\" has a value. Signature: forward?: SbLinkedEntityProvisionOption; Copy "},{"title":"nesbus.sbqueuemetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueuemetadataoptions","content":"","keywords":""},{"title":"SbQueueMetadataOptions interface","type":1,"pageTitle":"nesbus.sbqueuemetadataoptions","url":"docs/api-docs/nesbus.sbqueuemetadataoptions#sbqueuemetadataoptions-interface","content":"Signature: export interface SbQueueMetadataOptions extends SbSubscriberMetadataOptions Copy Extends: [SbSubscriberMetadataOptions](/node/nesbus/docs/api-docs/nesbus.sbsubscribermetadataoptions) "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbqueuemetadataoptions","url":"docs/api-docs/nesbus.sbqueuemetadataoptions#properties","content":"Property\tType\tDescriptionprovision\tSbEntityProvisionOption<SbQueueEntityProvision>\t "},{"title":"nesbus.sbqueuemetadataoptions.provision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbqueuemetadataoptions.provision","content":"","keywords":""},{"title":"SbQueueMetadataOptions.provision property","type":1,"pageTitle":"nesbus.sbqueuemetadataoptions.provision","url":"docs/api-docs/nesbus.sbqueuemetadataoptions.provision#sbqueuemetadataoptionsprovision-property","content":"Signature: provision?: SbEntityProvisionOption<SbQueueEntityProvision>; Copy "},{"title":"nesbus.sbrule","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbrule","content":"","keywords":""},{"title":"SbRule type","type":1,"pageTitle":"nesbus.sbrule","url":"docs/api-docs/nesbus.sbrule#sbrule-type","content":"Signature: export declare type SbRule = Partial<Omit<RuleDetails, 'createdOn'>>; Copy "},{"title":"nesbus.sbruleentityprovision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbruleentityprovision","content":"","keywords":""},{"title":"SbRuleEntityProvision interface","type":1,"pageTitle":"nesbus.sbruleentityprovision","url":"docs/api-docs/nesbus.sbruleentityprovision#sbruleentityprovision-interface","content":"Signature: export interface SbRuleEntityProvision extends SbEntityProvision<SbRule> Copy Extends: SbEntityProvision<[SbRule](/node/nesbus/docs/api-docs/nesbus.sbrule)> "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbruleentityprovision","url":"docs/api-docs/nesbus.sbruleentityprovision#properties","content":"Property\tType\tDescriptionparams\tSbRule ruleName\tstring\t "},{"title":"nesbus.sbruleentityprovision.params","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbruleentityprovision.params","content":"","keywords":""},{"title":"SbRuleEntityProvision.params property","type":1,"pageTitle":"nesbus.sbruleentityprovision.params","url":"docs/api-docs/nesbus.sbruleentityprovision.params#sbruleentityprovisionparams-property","content":"Signature: params: SbRule; Copy "},{"title":"nesbus.sbruleentityprovision.rulename","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbruleentityprovision.rulename","content":"","keywords":""},{"title":"SbRuleEntityProvision.ruleName property","type":1,"pageTitle":"nesbus.sbruleentityprovision.rulename","url":"docs/api-docs/nesbus.sbruleentityprovision.rulename#sbruleentityprovisionrulename-property","content":"Signature: ruleName: string; Copy "},{"title":"nesbus.sbserveroptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions","content":"","keywords":""},{"title":"SbServerOptions interface","type":1,"pageTitle":"nesbus.sbserveroptions","url":"docs/api-docs/nesbus.sbserveroptions#sbserveroptions-interface","content":"Signature: export interface SbServerOptions Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbserveroptions","url":"docs/api-docs/nesbus.sbserveroptions#properties","content":"Property\tType\tDescriptionclient\tSbConnectionOptions<SbCredentials, ServiceBusClientOptions> logger\tLoggerService management\tSbManagementClientOptions[keyof SbManagementClientOptions] name\tstring\tA unique name given to this server which allow subscriber filter and other paring capabilities. When not set, the server is defined as the default server used for all events defined without filtering.Additionally, the name is used to pair server & client together to allow sharing of resources (connections/senders/receivers). Since by default all names are empty, all servers & clients are shared.Note that the name most be unique across all running instances (runtime scoped, not NestJS application scope) This means that only one default (empty name) server is allowed.If a duplicate name is detected the process will throw. registerHandlers\t'sequence' | 'parallel'\tHow handlers are registers in service bus. - sequence: register one after the other - parallel: register all at onceThe default value is parallel "},{"title":"nesbus.sbserveroptions.client","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions.client","content":"","keywords":""},{"title":"SbServerOptions.client property","type":1,"pageTitle":"nesbus.sbserveroptions.client","url":"docs/api-docs/nesbus.sbserveroptions.client#sbserveroptionsclient-property","content":"Signature: client: SbConnectionOptions<SbCredentials, ServiceBusClientOptions>; Copy "},{"title":"nesbus.sbserveroptions.logger","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions.logger","content":"","keywords":""},{"title":"SbServerOptions.logger property","type":1,"pageTitle":"nesbus.sbserveroptions.logger","url":"docs/api-docs/nesbus.sbserveroptions.logger#sbserveroptionslogger-property","content":"Signature: logger?: LoggerService; Copy "},{"title":"nesbus.sbserveroptions.name","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions.name","content":"","keywords":""},{"title":"SbServerOptions.name property","type":1,"pageTitle":"nesbus.sbserveroptions.name","url":"docs/api-docs/nesbus.sbserveroptions.name#sbserveroptionsname-property","content":"A unique name given to this server which allow subscriber filter and other paring capabilities. When not set, the server is defined as the default server used for all events defined without filtering. Additionally, the name is used to pair server & client together to allow sharing of resources (connections/senders/receivers). Since by default all names are empty, all servers & clients are shared. Note that the name most be unique across all running instances (runtime scoped, not NestJS application scope) This means that only one default (empty name) server is allowed. If a duplicate name is detected the process will throw. Signature: name?: string; Copy "},{"title":"nesbus.sbserveroptions.management","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions.management","content":"","keywords":""},{"title":"SbServerOptions.management property","type":1,"pageTitle":"nesbus.sbserveroptions.management","url":"docs/api-docs/nesbus.sbserveroptions.management#sbserveroptionsmanagement-property","content":"Signature: management?: SbManagementClientOptions[keyof SbManagementClientOptions]; Copy "},{"title":"nesbus.sbsqlfilter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsqlfilter","content":"","keywords":""},{"title":"SbSqlFilter type","type":1,"pageTitle":"nesbus.sbsqlfilter","url":"docs/api-docs/nesbus.sbsqlfilter#sbsqlfilter-type","content":"Signature: export declare type SbSqlFilter = Partial<Omit<SqlFilter, 'sqlParameters'>>; Copy "},{"title":"nesbus.sbserveroptions.registerhandlers","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbserveroptions.registerhandlers","content":"","keywords":""},{"title":"SbServerOptions.registerHandlers property","type":1,"pageTitle":"nesbus.sbserveroptions.registerhandlers","url":"docs/api-docs/nesbus.sbserveroptions.registerhandlers#sbserveroptionsregisterhandlers-property","content":"How handlers are registers in service bus. - sequence: register one after the other - parallel: register all at once The default value is parallel Signature: registerHandlers?: 'sequence' | 'parallel'; Copy "},{"title":"nesbus.sbsubscribermetadataoptions.handleroptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.handleroptions","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions.handlerOptions property","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions.handleroptions","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.handleroptions#sbsubscribermetadataoptionshandleroptions-property","content":"Signature: handlerOptions?: MessageHandlerOptions; Copy "},{"title":"nesbus.sbsubscribermetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions interface","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions#sbsubscribermetadataoptions-interface","content":"Signature: export interface SbSubscriberMetadataOptions Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions#properties","content":"Property\tType\tDescriptionhandlerOptions\tMessageHandlerOptions name\tstring receiveMode\tReceiveMode serverId\tstring\tThe unique id of the server that this emitter should use as the underlying listener. This should match the server name defined in SgServerOptions.name.By default SgServerOptions.name is not set, which is the identifier for the default server. A multi-server environment is not required in most of the scenarios, if that is the case do not set this value. sessionOptions\tSessionReceiverOptions\t "},{"title":"nesbus.sbsubscribermetadataoptions.receivemode","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.receivemode","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions.receiveMode property","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions.receivemode","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.receivemode#sbsubscribermetadataoptionsreceivemode-property","content":"Signature: receiveMode: ReceiveMode; Copy "},{"title":"nesbus.sbsubscribermetadataoptions.name","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.name","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions.name property","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions.name","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.name#sbsubscribermetadataoptionsname-property","content":"Signature: name: string; Copy "},{"title":"nesbus.sbsubscribermetadataoptions.serverid","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.serverid","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions.serverId property","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions.serverid","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.serverid#sbsubscribermetadataoptionsserverid-property","content":"The unique id of the server that this emitter should use as the underlying listener. This should match the server name defined in SgServerOptions.name. By default SgServerOptions.name is not set, which is the identifier for the default server. A multi-server environment is not required in most of the scenarios, if that is the case do not set this value. Signature: serverId?: string; Copy "},{"title":"nesbus.sbsubscribermetadataoptions.sessionoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.sessionoptions","content":"","keywords":""},{"title":"SbSubscriberMetadataOptions.sessionOptions property","type":1,"pageTitle":"nesbus.sbsubscribermetadataoptions.sessionoptions","url":"docs/api-docs/nesbus.sbsubscribermetadataoptions.sessionoptions#sbsubscribermetadataoptionssessionoptions-property","content":"Signature: sessionOptions?: SessionReceiverOptions; Copy "},{"title":"nesbus.sbsubscriptionmetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions","content":"","keywords":""},{"title":"SbSubscriptionMetadataOptions interface","type":1,"pageTitle":"nesbus.sbsubscriptionmetadataoptions","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions#sbsubscriptionmetadataoptions-interface","content":"Signature: export interface SbSubscriptionMetadataOptions extends SbSubscriberMetadataOptions Copy Extends: [SbSubscriberMetadataOptions](/node/nesbus/docs/api-docs/nesbus.sbsubscribermetadataoptions) "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbsubscriptionmetadataoptions","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions#properties","content":"Property\tType\tDescriptionprovision\tSbEntityProvisionOption<SbTopicSubscriptionEntityProvision> topicName\tstring\t "},{"title":"nesbus.sbsubscription","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscription","content":"","keywords":""},{"title":"SbSubscription type","type":1,"pageTitle":"nesbus.sbsubscription","url":"docs/api-docs/nesbus.sbsubscription#sbsubscription-type","content":"Signature: export declare type SbSubscription = Partial<Omit<SubscriptionDetails, 'subscriptionName' | 'topicName'>>; Copy "},{"title":"nesbus.sbsubscriptionmetadataoptions.topicname","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions.topicname","content":"","keywords":""},{"title":"SbSubscriptionMetadataOptions.topicName property","type":1,"pageTitle":"nesbus.sbsubscriptionmetadataoptions.topicname","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions.topicname#sbsubscriptionmetadataoptionstopicname-property","content":"Signature: topicName: string; Copy "},{"title":"nesbus.sbsubscriptionmetadataoptions.provision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions.provision","content":"","keywords":""},{"title":"SbSubscriptionMetadataOptions.provision property","type":1,"pageTitle":"nesbus.sbsubscriptionmetadataoptions.provision","url":"docs/api-docs/nesbus.sbsubscriptionmetadataoptions.provision#sbsubscriptionmetadataoptionsprovision-property","content":"Signature: provision?: SbEntityProvisionOption<SbTopicSubscriptionEntityProvision>; Copy "},{"title":"nesbus.sbtopic","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopic","content":"","keywords":""},{"title":"SbTopic type","type":1,"pageTitle":"nesbus.sbtopic","url":"docs/api-docs/nesbus.sbtopic#sbtopic-type","content":"Signature: export declare type SbTopic = Partial<Omit<TopicDetails, 'topicName'>>; Copy "},{"title":"nesbus.sbtopicentityprovision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicentityprovision","content":"","keywords":""},{"title":"SbTopicEntityProvision interface","type":1,"pageTitle":"nesbus.sbtopicentityprovision","url":"docs/api-docs/nesbus.sbtopicentityprovision#sbtopicentityprovision-interface","content":"Signature: export interface SbTopicEntityProvision extends SbEntityProvision<SbTopic> Copy Extends: SbEntityProvision<[SbTopic](/node/nesbus/docs/api-docs/nesbus.sbtopic)> "},{"title":"nesbus.sbtopicmetadataoptions","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicmetadataoptions","content":"","keywords":""},{"title":"SbTopicMetadataOptions interface","type":1,"pageTitle":"nesbus.sbtopicmetadataoptions","url":"docs/api-docs/nesbus.sbtopicmetadataoptions#sbtopicmetadataoptions-interface","content":"Signature: export interface SbTopicMetadataOptions extends SbEmitterMetadataOptions Copy Extends: [SbEmitterMetadataOptions](/node/nesbus/docs/api-docs/nesbus.sbemittermetadataoptions) "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbtopicmetadataoptions","url":"docs/api-docs/nesbus.sbtopicmetadataoptions#properties","content":"Property\tType\tDescriptionprovision\tSbEntityProvisionOption<SbTopicEntityProvision>\t "},{"title":"nesbus.sbtopicmetadataoptions.provision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicmetadataoptions.provision","content":"","keywords":""},{"title":"SbTopicMetadataOptions.provision property","type":1,"pageTitle":"nesbus.sbtopicmetadataoptions.provision","url":"docs/api-docs/nesbus.sbtopicmetadataoptions.provision#sbtopicmetadataoptionsprovision-property","content":"Signature: provision?: SbEntityProvisionOption<SbTopicEntityProvision>; Copy "},{"title":"nesbus.sbtopicsubscriptionentityprovision","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision","content":"","keywords":""},{"title":"SbTopicSubscriptionEntityProvision interface","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision#sbtopicsubscriptionentityprovision-interface","content":"Signature: export interface SbTopicSubscriptionEntityProvision extends SbEntityProvision<SbSubscription> Copy Extends: SbEntityProvision<[SbSubscription](/node/nesbus/docs/api-docs/nesbus.sbsubscription)> "},{"title":"Properties","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision#properties","content":"Property\tType\tDescriptiondeadLetter\tSbLinkedEntityProvisionOption\tDefine how the dead letter topic is provisioned (\"forwardDeadLetteredMessagesTo\") > Relevant only when \"forwardDeadLetteredMessagesTo\" has a value. forward\tSbLinkedEntityProvisionOption\tDefine how the forward queue/topic is provisioned (\"forwardTo\") > Relevant only when \"forwardTo\" has a value. rules\tSbRuleEntityProvision[] | ((topicName: string, subscriptionName: string) => SbRuleEntityProvision[])\tA list of rules (actions/filters) to apply to the subscription or, a function that results a list of rules dynamically. topic\tSbEntityProvisionOption<SbTopicEntityProvision>\tDefine how the topic for this subscription is provisioned. Unlike \"deadLetter\", the default behavior is \"skip\" as it is usually the role of the topic's owner to create it. "},{"title":"nesbus.sbtopicsubscriptionentityprovision.deadletter","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.deadletter","content":"","keywords":""},{"title":"SbTopicSubscriptionEntityProvision.deadLetter property","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision.deadletter","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.deadletter#sbtopicsubscriptionentityprovisiondeadletter-property","content":"Define how the dead letter topic is provisioned (\"forwardDeadLetteredMessagesTo\") > Relevant only when \"forwardDeadLetteredMessagesTo\" has a value. Signature: deadLetter?: SbLinkedEntityProvisionOption; Copy "},{"title":"nesbus.sbtopicsubscriptionentityprovision.forward","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.forward","content":"","keywords":""},{"title":"SbTopicSubscriptionEntityProvision.forward property","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision.forward","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.forward#sbtopicsubscriptionentityprovisionforward-property","content":"Define how the forward queue/topic is provisioned (\"forwardTo\") > Relevant only when \"forwardTo\" has a value. Signature: forward?: SbLinkedEntityProvisionOption; Copy "},{"title":"nesbus.sbtopicsubscriptionentityprovision.rules","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.rules","content":"","keywords":""},{"title":"SbTopicSubscriptionEntityProvision.rules property","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision.rules","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.rules#sbtopicsubscriptionentityprovisionrules-property","content":"A list of rules (actions/filters) to apply to the subscription or, a function that results a list of rules dynamically. Signature: rules?: SbRuleEntityProvision[] | ((topicName: string, subscriptionName: string) => SbRuleEntityProvision[]); Copy "},{"title":"nesbus.servicebusaadtokencredentials","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusaadtokencredentials","content":"","keywords":""},{"title":"ServiceBusAadTokenCredentials interface","type":1,"pageTitle":"nesbus.servicebusaadtokencredentials","url":"docs/api-docs/nesbus.servicebusaadtokencredentials#servicebusaadtokencredentials-interface","content":"Signature: export interface ServiceBusAadTokenCredentials Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.servicebusaadtokencredentials","url":"docs/api-docs/nesbus.servicebusaadtokencredentials#properties","content":"Property\tType\tDescriptioncredentials\tParameters<typeof ServiceBusClient['createFromAadTokenCredentials']>[1]\tThe Token credentials generated by using the * @azure/ms-rest-nodeauth library. It can be one of the following: - ApplicationTokenCredentials - UserTokenCredentials - DeviceTokenCredentials - MSITokenCredentials Token audience (or resource in case of MSI based credentials) to use when creating the credentials is https://servicebus.azure.net/ host\tstring\tFully qualified domain name for ServiceBus. Most likely, {yournamespace}.servicebus.windows.net "},{"title":"nesbus.sbtopicsubscriptionentityprovision.topic","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.topic","content":"","keywords":""},{"title":"SbTopicSubscriptionEntityProvision.topic property","type":1,"pageTitle":"nesbus.sbtopicsubscriptionentityprovision.topic","url":"docs/api-docs/nesbus.sbtopicsubscriptionentityprovision.topic#sbtopicsubscriptionentityprovisiontopic-property","content":"Define how the topic for this subscription is provisioned. Unlike \"deadLetter\", the default behavior is \"skip\" as it is usually the role of the topic's owner to create it. Signature: topic?: SbEntityProvisionOption<SbTopicEntityProvision>; Copy "},{"title":"nesbus.servicebusaadtokencredentials.host","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusaadtokencredentials.host","content":"","keywords":""},{"title":"ServiceBusAadTokenCredentials.host property","type":1,"pageTitle":"nesbus.servicebusaadtokencredentials.host","url":"docs/api-docs/nesbus.servicebusaadtokencredentials.host#servicebusaadtokencredentialshost-property","content":"Fully qualified domain name for ServiceBus. Most likely, {yournamespace}.servicebus.windows.net Signature: host: string; Copy "},{"title":"nesbus.servicebusaadtokencredentials.credentials","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusaadtokencredentials.credentials","content":"","keywords":""},{"title":"ServiceBusAadTokenCredentials.credentials property","type":1,"pageTitle":"nesbus.servicebusaadtokencredentials.credentials","url":"docs/api-docs/nesbus.servicebusaadtokencredentials.credentials#servicebusaadtokencredentialscredentials-property","content":"The Token credentials generated by using the * @azure/ms-rest-nodeauth library. It can be one of the following: - ApplicationTokenCredentials - UserTokenCredentials - DeviceTokenCredentials - MSITokenCredentials Token audience (or resource in case of MSI based credentials) to use when creating the credentials is https://servicebus.azure.net/ Signature: credentials: Parameters<typeof ServiceBusClient['createFromAadTokenCredentials']>[1]; Copy "},{"title":"nesbus.servicebusconnectionstringcredentials.connectionstring","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusconnectionstringcredentials.connectionstring","content":"","keywords":""},{"title":"ServiceBusConnectionStringCredentials.connectionString property","type":1,"pageTitle":"nesbus.servicebusconnectionstringcredentials.connectionstring","url":"docs/api-docs/nesbus.servicebusconnectionstringcredentials.connectionstring#servicebusconnectionstringcredentialsconnectionstring-property","content":"Signature: connectionString: string; Copy "},{"title":"nesbus.servicebusconnectionstringcredentials","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusconnectionstringcredentials","content":"","keywords":""},{"title":"ServiceBusConnectionStringCredentials interface","type":1,"pageTitle":"nesbus.servicebusconnectionstringcredentials","url":"docs/api-docs/nesbus.servicebusconnectionstringcredentials#servicebusconnectionstringcredentials-interface","content":"Signature: export interface ServiceBusConnectionStringCredentials Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.servicebusconnectionstringcredentials","url":"docs/api-docs/nesbus.servicebusconnectionstringcredentials#properties","content":"Property\tType\tDescriptionconnectionString\tstring\t "},{"title":"nesbus.servicebusmanagementaadtokencredentials","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials","content":"","keywords":""},{"title":"ServiceBusManagementAadTokenCredentials interface","type":1,"pageTitle":"nesbus.servicebusmanagementaadtokencredentials","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials#servicebusmanagementaadtokencredentials-interface","content":"Signature: export interface ServiceBusManagementAadTokenCredentials extends ServiceBusAadTokenCredentials Copy Extends: [ServiceBusAadTokenCredentials](/node/nesbus/docs/api-docs/nesbus.servicebusaadtokencredentials) "},{"title":"Properties","type":1,"pageTitle":"nesbus.servicebusmanagementaadtokencredentials","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials#properties","content":"Property\tType\tDescriptionnamespace\tstring resourceGroupName\tstring subscriptionId\tstring\t "},{"title":"nesbus.servicebusmanagementaadtokencredentials.namespace","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.namespace","content":"","keywords":""},{"title":"ServiceBusManagementAadTokenCredentials.namespace property","type":1,"pageTitle":"nesbus.servicebusmanagementaadtokencredentials.namespace","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.namespace#servicebusmanagementaadtokencredentialsnamespace-property","content":"Signature: namespace: string; Copy "},{"title":"nesbus.servicebusmanagementaadtokencredentials.subscriptionid","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.subscriptionid","content":"","keywords":""},{"title":"ServiceBusManagementAadTokenCredentials.subscriptionId property","type":1,"pageTitle":"nesbus.servicebusmanagementaadtokencredentials.subscriptionid","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.subscriptionid#servicebusmanagementaadtokencredentialssubscriptionid-property","content":"Signature: subscriptionId: string; Copy "},{"title":"nesbus.servicebusmanagementaadtokencredentials.resourcegroupname","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.resourcegroupname","content":"","keywords":""},{"title":"ServiceBusManagementAadTokenCredentials.resourceGroupName property","type":1,"pageTitle":"nesbus.servicebusmanagementaadtokencredentials.resourcegroupname","url":"docs/api-docs/nesbus.servicebusmanagementaadtokencredentials.resourcegroupname#servicebusmanagementaadtokencredentialsresourcegroupname-property","content":"Signature: resourceGroupName: string; Copy "},{"title":"nesbus.servicebusmodule","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmodule","content":"","keywords":""},{"title":"ServiceBusModule class","type":1,"pageTitle":"nesbus.servicebusmodule","url":"docs/api-docs/nesbus.servicebusmodule#servicebusmodule-class","content":"Signature: export declare class ServiceBusModule implements OnModuleInit, OnModuleDestroy Copy Implements: OnModuleInit, OnModuleDestroy "},{"title":"Constructors","type":1,"pageTitle":"nesbus.servicebusmodule","url":"docs/api-docs/nesbus.servicebusmodule#constructors","content":"Constructor\tModifiers\tDescription(constructor)(discoveryFactory, errorHandler, metadataHelper, clientOptions, serverOptions) Constructs a new instance of the ServiceBusModule class "},{"title":"Methods","type":1,"pageTitle":"nesbus.servicebusmodule","url":"docs/api-docs/nesbus.servicebusmodule#methods","content":"Method\tModifiers\tDescriptiononModuleDestroy() onModuleInit() register(options)\tstatic\tRegister a service bus server/s that will be used as the underlying resources to generate Queue & Subscription listeners.You can provide multiple server configurations, however make sure that each of them has a unique name. Note that not setting a name is a unique name by itself. "},{"title":"nesbus.servicebusmodule._constructor_","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmodule._constructor_","content":"","keywords":""},{"title":"nesbus.servicebusmodule.onmoduledestroy","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmodule.onmoduledestroy","content":"","keywords":""},{"title":"ServiceBusModule.onModuleDestroy() method","type":1,"pageTitle":"nesbus.servicebusmodule.onmoduledestroy","url":"docs/api-docs/nesbus.servicebusmodule.onmoduledestroy#servicebusmoduleonmoduledestroy-method","content":"Signature: onModuleDestroy(): Promise<void>; Copy Returns: Promise<void> "},{"title":"ServiceBusModule.(constructor)","type":1,"pageTitle":"nesbus.servicebusmodule._constructor_","url":"docs/api-docs/nesbus.servicebusmodule._constructor_#servicebusmoduleconstructor","content":"Constructs a new instance of the ServiceBusModule class Signature: constructor(discoveryFactory: SbDiscoveryFactoryService, errorHandler?: SbErrorHandler, metadataHelper?: any, clientOptions?: SbClientOptions[], serverOptions?: SbServerOptions[]); Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.servicebusmodule._constructor_","url":"docs/api-docs/nesbus.servicebusmodule._constructor_#parameters","content":"Parameter\tType\tDescriptiondiscoveryFactory\tSbDiscoveryFactoryService errorHandler\tSbErrorHandler metadataHelper\tany clientOptions\tSbClientOptions[] serverOptions\tSbServerOptions[]\t "},{"title":"nesbus.servicebusmodule.onmoduleinit","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmodule.onmoduleinit","content":"","keywords":""},{"title":"ServiceBusModule.onModuleInit() method","type":1,"pageTitle":"nesbus.servicebusmodule.onmoduleinit","url":"docs/api-docs/nesbus.servicebusmodule.onmoduleinit#servicebusmoduleonmoduleinit-method","content":"Signature: onModuleInit(): Promise<void>; Copy Returns: Promise<void> "},{"title":"nesbus.servicebustokenprovidercredentials","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials","content":"","keywords":""},{"title":"ServiceBusTokenProviderCredentials interface","type":1,"pageTitle":"nesbus.servicebustokenprovidercredentials","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials#servicebustokenprovidercredentials-interface","content":"Signature: export interface ServiceBusTokenProviderCredentials Copy "},{"title":"Properties","type":1,"pageTitle":"nesbus.servicebustokenprovidercredentials","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials#properties","content":"Property\tType\tDescriptionhost\tstring tokenProvider\tTokenProvider\t "},{"title":"nesbus.servicebusmodule.register","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebusmodule.register","content":"","keywords":""},{"title":"ServiceBusModule.register() method","type":1,"pageTitle":"nesbus.servicebusmodule.register","url":"docs/api-docs/nesbus.servicebusmodule.register#servicebusmoduleregister-method","content":"Register a service bus server/s that will be used as the underlying resources to generate Queue & Subscription listeners. You can provide multiple server configurations, however make sure that each of them has a unique name. Note that not setting a name is a unique name by itself. Signature: static register(options: SbModuleRegisterOptions): DynamicModule; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.servicebusmodule.register","url":"docs/api-docs/nesbus.servicebusmodule.register#parameters","content":"Parameter\tType\tDescriptionoptions\tSbModuleRegisterOptions\t Returns: DynamicModule "},{"title":"nesbus.servicebustokenprovidercredentials.host","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials.host","content":"","keywords":""},{"title":"ServiceBusTokenProviderCredentials.host property","type":1,"pageTitle":"nesbus.servicebustokenprovidercredentials.host","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials.host#servicebustokenprovidercredentialshost-property","content":"Signature: host: string; Copy "},{"title":"nesbus.subscription","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.subscription","content":"","keywords":""},{"title":"Subscription() function","type":1,"pageTitle":"nesbus.subscription","url":"docs/api-docs/nesbus.subscription#subscription-function","content":"Subscribes to incoming events from a topic Signature: export declare function Subscription<T = false>(metadata: MetaOrMetaFactory<SbSubscriptionMetadataOptions>): PropOrMethodDecorator<T, MethodDecorator>; Copy "},{"title":"Parameters","type":1,"pageTitle":"nesbus.subscription","url":"docs/api-docs/nesbus.subscription#parameters","content":"Parameter\tType\tDescriptionmetadata\tMetaOrMetaFactory<SbSubscriptionMetadataOptions>\t Returns: PropOrMethodDecorator<T, MethodDecorator> "},{"title":"nesbus.servicebustokenprovidercredentials.tokenprovider","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials.tokenprovider","content":"","keywords":""},{"title":"ServiceBusTokenProviderCredentials.tokenProvider property","type":1,"pageTitle":"nesbus.servicebustokenprovidercredentials.tokenprovider","url":"docs/api-docs/nesbus.servicebustokenprovidercredentials.tokenprovider#servicebustokenprovidercredentialstokenprovider-property","content":"Signature: tokenProvider: TokenProvider; Copy "},{"title":"nesbus.topic","type":0,"sectionRef":"#","url":"docs/api-docs/nesbus.topic","content":"","keywords":""},{"title":"Topic variable","type":1,"pageTitle":"nesbus.topic","url":"docs/api-docs/nesbus.topic#topic-variable","content":"Subscribes to incoming events from a topic Signature: Topic: (metadata: MetaOrMetaFactory<SbTopicMetadataOptions>) => PropertyDecorator Copy "},{"title":"Installation","type":0,"sectionRef":"#","url":"docs/getting-started/installation","content":"To get started install the package: YarnNPM $ yarn add @pebula/nesbus Copy Now we need to configure the register the library with NestJS and start binding to Service Bus entities...","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/getting-started/introduction","content":"","keywords":""},{"title":"Message Handling","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#message-handling","content":"Handling incoming service bus message is now as easy as handling incoming REST requests. @Controller() export class ServiceBusController { @Queue<MethodDecorator>(({ name: 'nesbus-queue.demo' }) async myQueueEntity(@Ctx() context: SbContext) { } } Copy "},{"title":"Client Emitters","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#client-emitters","content":"Defining service bus emitters (Sender) requires no logic, you can compose a client emitter in seconds: @Injectable() export class ServiceBusEmitClient { @QueueEmitter({ name: 'nesbus-queue.demo' }) myQueueEntity: Sender; } Copy "},{"title":"Easy Setup","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#easy-setup","content":"The library also helps with service bus entity management through a declarative API for automatic creation of service bus entities based on the entities we define in the controllers / services in our application. We call it provision. [Read more...] This allows a code-first approach for service bus management and architecture. "},{"title":"Leverage Advanced Architecture Patterns","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#leverage-advanced-architecture-patterns","content":"By simplifying the work with service bus, Nesbus enables the use of more advanced architecture patterns that you can use to manage the flow of your application. Using Observables you can now implement a CQRS or Event Sourcing models out of the box. In addition, Observables along with Interceptors allow us to use plugins that encapsulate behaviors for us. For example, the SbBackoffRetry plugin wraps incoming service bus messages and handles them when their handler throws. It will perform a retry to handle them again but with a delay between each try. The delay is not constant and it is based on an algorithm (linear / exponential) so the effect of periodic stress on you server is reduced. "},{"title":"NOTE: @azure/service-bus@7","type":1,"pageTitle":"Introduction","url":"docs/getting-started/introduction#note-azureservice-bus7","content":"info @pebula/nesbus supports @azure/service-bus@1.1.6. The azure team is currently working on a re-redesigned library, currently in preview (7.0.0-preview.2). Once version 7 becomes official, @pebula/nesbus will support it, with limited backward compatibility to v1 (critical bugs only). Since version 7 comes with significant breaking changes you should expect some changes in nesbus as well while some will not get noticed due to the abstraction. "},{"title":"Configuration","type":0,"sectionRef":"#","url":"docs/guide/configuration","content":"","keywords":""},{"title":"Declaration","type":0,"sectionRef":"#","url":"docs/guide/declaration","content":"","keywords":""},{"title":"Emitters","type":0,"sectionRef":"#","url":"docs/guide/emitters","content":"","keywords":""},{"title":"Basic Usage","type":0,"sectionRef":"#","url":"docs/getting-started/basic-example","content":"","keywords":""},{"title":"Configuration","type":1,"pageTitle":"Basic Usage","url":"docs/getting-started/basic-example#configuration","content":"main.tsapp.module.ts \"main.ts import { createSbServer } from '@pebula/nesbus'; import { NestFactory } from '@nestjs/core'; import { AppModule } from './app.module'; async function bootstrap() { const app = await NestFactory.create(AppModule); app.connectMicroservice({ strategy: createSbServer() }); await app.startAllMicroservicesAsync(); await app.listen(3000); } bootstrap(); Copy "},{"title":"Client (emitting)","type":1,"pageTitle":"Basic Usage","url":"docs/getting-started/basic-example#client-emitting","content":"import { Injectable } from '@nestjs/common'; import { Sender } from '@azure/service-bus'; import { QueueEmitter, Topic } from '@pebula/nesbus'; @Injectable() export class ServiceBusEmitClient { @QueueEmitter({ name: 'nesbus-queue.demo' }) myQueueEntity: Sender; @Topic({ name: 'nesbus-topic.demo' }) myTopicEntity: Sender; } Copy After you add this to your module providers list you can import it anywhere in your app and start emitting to service bus. "},{"title":"Server (receiving)","type":1,"pageTitle":"Basic Usage","url":"docs/getting-started/basic-example#server-receiving","content":"import { Controller } from '@nestjs/common'; import { Queue, Subscription, Ctx, SbContext } from '@pebula/nesbus'; @Controller() export class ServiceBusController { @Queue<MethodDecorator>({ name: 'nesbus-queue.demo', handlerOptions: { autoComplete: false, }, }) async myQueueEntity(@Ctx() context: SbContext) { await context.getMessage().complete(); } @Subscription<MethodDecorator>(({ name: 'nesbus-topic.demo' }) async myTopicEntity(@Ctx() context: SbContext) { } } Copy Same way you define your REST routes... Bind a handler function to an incoming channel. "},{"title":"Using Reactive Handlers","type":1,"pageTitle":"Basic Usage","url":"docs/getting-started/basic-example#using-reactive-handlers","content":"import { Observable } from 'rxjs'; import { switchMap, tap } from 'rxjs/operators'; import { Controller } from '@nestjs/common'; import { Queue, Subscription, SbContext } from '@pebula/nesbus'; @Controller() export class ServiceBusController { @Queue({ name: 'nesbus-queue.demo', handlerOptions: { autoComplete: false, }, }) myQueueEntity = (source: Observable<SbContext>) => source .pipe( switchMap( async context => { await context.getMessage().complete(); }), ) @Subscription(({ name: 'nesbus-topic.demo' }) myTopicEntity = (source: Observable<SbContext>) => source .pipe( tap( async context => { }), ) } Copy Using reactive handlers to chain the logic of your application. This design allows using nesbus interceptors which act as plugins and can add a lot of functionality to your code with little effort. tip The reactive handler pattern works great with the @nestjs/cqrs module and in general most of the event driven designs out there. You can easily implement event sourcing with it. "},{"title":"Interceptors","type":0,"sectionRef":"#","url":"docs/guide/interceptors","content":"","keywords":""},{"title":"Receivers","type":0,"sectionRef":"#","url":"docs/guide/receivers","content":"","keywords":""},{"title":"Method Handlers (old-school)","type":1,"pageTitle":"Receivers","url":"docs/guide/receivers#method-handlers-old-school","content":""},{"title":"Reactive Handlers","type":1,"pageTitle":"Receivers","url":"docs/guide/receivers#reactive-handlers","content":""},{"title":"The Context","type":0,"sectionRef":"#","url":"docs/guide/the-context","content":"","keywords":""},{"title":"Dynamic Entity Configuration","type":0,"sectionRef":"#","url":"docs/recipes/dynamic-entity-configuration","content":"","keywords":""},{"title":"Provisioning","type":0,"sectionRef":"#","url":"docs/guide/provisioning","content":"","keywords":""},{"title":"Basic Provisioning","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#basic-provisioning","content":"The most basic provision configuration is to decide what level of provisioning are we doing: skip [default] - provision is disabledverify - verify entity exists when the server bootstraps, throw if it does not exist (eager check)verifyCreate - verify entity exists when the server bootstraps, create the entity if it does not exists @Controller() export class ServiceBusController { @Queue<MethodDecorator>(({ name: 'nesbus-queue.demo', provision: 'verifyCreate' // or 'skip' or 'verify' }) async myQueueEntity(@Ctx() context: SbContext) { } } Copy This is a valid configuration but it is not enough by itself. What happens when the library detects that an entity does not exist and it needs to create it? Creating a new service bus entity require additional configuration. Moreover, the configuration we need is based on the type of the entity, i.e. creating a subscription is different than creating a queue. info That being said, setting provision: 'verifyCreate' is a valid definition with the help of a small adapter, more on this in a couple of paragraphs. "},{"title":"Management Clients","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#management-clients","content":"Verifying and/or creating entities requires management capabilities so we can create/update entities in service bus. To enable provisioning we must provide a management configuration otherwise it is disabled. There are currently 2 management clients available: "},{"title":"ARM Client","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#arm-client","content":"The official service bus management package offered by azure, when using this client you must install the package: YarnNPM $ yarn add @azure/arm-servicebus Copy Then configure the management client when registering the module we need to provide the management configuration SbManagementClientArmOptions: import { ApplicationTokenCredentials } from '@azure/ms-rest-nodeauth'; import { Module } from '@nestjs/common'; import { ServiceBusModule, SbServerOptions } from '@pebula/nesbus'; const sbServerOptions: SbServerOptions[] = [ { client: { /* Client configuration options... */ }, management: { credentials: { host: 'my-service-bus.servicebus.windows.net, resourceGroupName: 'NorthEurope', namespace: 'my-service-bus', subscriptionId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', credentials: new ApplicationTokenCredentials( 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', // clientId, 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', // tenantId, 'K2.329cnlw3293:#@Mc2EK#)CKE', // clientSecret, ), }, }, }, ]; @Module({ imports: [ ServiceBusModule.register({ servers: sbServerOptions }), ], }) export class AppModule {} Copy tip In this example, the credentials used are ApplicationTokenCredentials but you can use any token credentials object which implements the getToken() interface. In most cases, one of the following from the @azure/ms-rest-nodeauth package: ApplicationTokenCredentialsUserTokenCredentialsDeviceTokenCredentialsMSITokenCredentials Token audience (or resource in case of MSI based credentials) to use when creating the credentials is https://servicebus.azure.net/ For more details see the API Docs for ServiceBusManagementAadTokenCredentials warning @azure/arm-servicebus supports authentication & authorization through azure active directory. This has 2 limitations: You will need to manage permissions through azure's role based authorization model.You can not use connection strings to connect to service bus. "},{"title":"ATOM Client (experimental)","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#atom-client-experimental","content":"The ATOM Client is a management client the uses and authentication and authorization model based on a connection string, which is not possible when using the @azure/arm-servicebus library. The client is in development by the @azure/service-bus team and is planned to release with the @azure/service-bus pacakge. The client itself is operational but not publicly exposed. To allow using it today, nesbus includes a copy of the ATOM client from the @azure/service-bus repository, with no changes. Once officially released the copy will be removed and the original ATOM client will be used instead. If things go as planned this will go unnoticed, without breaking changes. import { Module } from '@nestjs/common'; import { ServiceBusModule, SbServerOptions } from '@pebula/nesbus'; const sbServerOptions: SbServerOptions[] = [ { client: { /* Client configuration options... */ }, management: { credentials: { connectionString: 'MY-SAS-CONNECTION-STRING', }, }, }, ]; @Module({ imports: [ ServiceBusModule.register({ servers: sbServerOptions }), ], }) export class AppModule {} Copy "},{"title":"Entity Creation Configuration","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#entity-creation-configuration","content":"Instead of setting provision: 'verifyCreate' we can set provision to an object that contains the configuration required when creating an entity: @Controller() export class ServiceBusController { @Queue<MethodDecorator>(({ name: 'nesbus-queue.demo', provision: { type: 'verifyCreate', params: { /* Default, entity specific, values */ deadLetteringOnMessageExpiration: true, maxSizeInMegabytes: 1024, defaultMessageTtl: 'P14D', lockDuration: 'PT5M', } /* ... Additional, entity specific, provisioning values */ } }) async myQueueEntity(@Ctx() context: SbContext) { } } Copy "},{"title":"Params","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#params","content":"The params property is an object that defines the default values that each entity instance will have when created. This type differs based on the provision context, i.e. the decorator used. For Queue see SBQueueFor Topic see SBTopicFor Subscription see SBSubscription "},{"title":"Additional Provision Configuration","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#additional-provision-configuration","content":"The additional provision configuration also depends on the entity being provisioned. For example, a Subscription is a child entity of Topic, you can create a nested provision option to also run a provision to make sure that the topic exists. See the API docs for more details: SbQueueEntityProvisionSbTopicEntityProvisionSbTopicSubscriptionEntityProvisionSbRuleEntityProvision "},{"title":"Entity Configuration Adapter","type":1,"pageTitle":"Provisioning","url":"docs/guide/provisioning#entity-configuration-adapter","content":"We've started with a simple provision definition: provision: 'verifyCreate'. In most cases, our entities will have the same setup, wouldn't it be great to have all of this set from one place and use the simple definition? We can do this by providing an special adapter that the management client will use, when creating new entities. We register the adapter along with the management options we provide when registering a management client: import { Module } from '@nestjs/common'; import { ServiceBusModule, SbServerOptions, SbManagementDefaultsAdapter } from '@pebula/nesbus'; const defaults: SbManagementDefaultsAdapter = { /* ... */ }; const sbServerOptions: SbServerOptions[] = [ { client: { /* Client configuration options... */ }, management: { credentials: { connectionString: 'MY-SAS-CONNECTION-STRING', }, defaults, // Here we register the default configuration for entities. }, }, ]; @Module({ imports: [ ServiceBusModule.register({ servers: sbServerOptions }), ], }) export class AppModule {} Copy The adapter contains an entities property, with a definition for each type of entity:  entities?: { queue?: SbQueue; topic?: SbTopic; subscription?: SbSubscription; }; Copy These values will go to the params property in the provision definition. In addition, an optional handler can be set to handle the creation of new rules when a new subscription is created. For more information, read the API Docs for SbManagementDefaultsAdapter "},{"title":"Backoff And Retry","type":0,"sectionRef":"#","url":"docs/tasks/back-off","content":"","keywords":""},{"title":"Why","type":1,"pageTitle":"Backoff And Retry","url":"docs/tasks/back-off#why","content":"Sometimes the server might be overwhelmed by a large number of message being processed at the same time. This can cause processing errors in various areas such as database, file system, network connection, etc... Once a message fails, it will go back to service bus which will re-emit it immediately or throw it to a dead-letter pool. Re-emitting the message is not good because our server is still stressed out, it is best to retry it laster, but how much later? If we delay 5 seconds and we have multiple failed message we will hit the same scenario again, if we delay with the same static interval on every failed attempt we might sync our retries with another process running in cycle. What we need is chaos, re-emitting the messages at an increasing interval with each level getting a little distortion so it becomes a bit unpredictable. "},{"title":"SbBackoffRetry","type":1,"pageTitle":"Backoff And Retry","url":"docs/tasks/back-off#sbbackoffretry","content":"This is where the SbBackoffRetry plugin comes in. It wraps the the incoming bus message handling and wait's for errors. When error is thrown it will re-emit the message but with a certain delay, calculated based on your configuration. "},{"title":"Backoff Algorithm","type":1,"pageTitle":"Backoff And Retry","url":"docs/tasks/back-off#backoff-algorithm","content":"The calculated delay is effected by 2 values: The current retry iteration (e.g. 1st try, 2nd try, 3rd try, nth try);The plugin configuration The configuration is defined in SbBackoffRetryOptions: delay: the baseline interval(ms) to wait between each attemptdelayType: 'linear' for linear increments in the delay between each retry. 'exponential' for exponential increments in the delay between each retryfactor: a multiplier for the delay (mostly effective in exponential delay)distortFactor: how much randomness to introduce into the interval (higher value === more randomness). For example, with a distortFactor of 10, the final delay will be multiplied by a value between 0.9 to 1.1 @Controller() export class ServiceBusController { @Queue<MethodDecorator>(({ name: 'nesbus-queue.demo' }) @SbIntercept(new SbBackoffRetry({ retryCount: 3, factor: 1, delayType: 'linear' })) testQueue3 = (source: Observable<SbContext>) => source .pipe( tap( context => { const msg = context.getMessage(); throw new Error(`backoff ${msg.messageId}`); }), ) } Copy warning Because Transactions are not yet supported by @azure/service-bus usingSbBackoffRetry comes with a little risk. SbBackoffRetry will emit a clone the original message and emit the cloned message upon retry, after then it will complete the failed message. If emitting the closed message succeed but completing the failed message fails there will be 2 messages (with the same id) in the system. This can be solved by enabling duplication checks but in any case once Transactions are out they will be used to eliminate this issue "},{"title":"Idempotent Subscriber","type":0,"sectionRef":"#","url":"docs/tasks/idempotent-subscriber","content":"","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/tasks/introduction","content":"","keywords":""}]