"use strict";(self.webpackChunkdocs_touchstone=self.webpackChunkdocs_touchstone||[]).push([[3621],{8726:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(6870),o=t(5569);const i={id:"suite-container",title:"Suite Container",sidebar_label:"1. Suite Container"},r=void 0,a={id:"using-touchstone/suite-container",title:"Suite Container",description:"A configuration container allows sharing benchmark execution configuration, reporters and other settings between suites.",source:"@site/docs/using-touchstone/suite-container.md",sourceDirName:"using-touchstone",slug:"/using-touchstone/suite-container",permalink:"/node/touchstone/docs/using-touchstone/suite-container",draft:!1,unlisted:!1,editUrl:"https://github.com/pebula/node/tree/main/apps/docs/touchstone/docs/docs/using-touchstone/suite-container.md",tags:[],version:"current",frontMatter:{id:"suite-container",title:"Suite Container",sidebar_label:"1. Suite Container"},sidebar:"sidebar",previous:{title:"3. Basic Usage",permalink:"/node/touchstone/docs/getting-started/basic-example"},next:{title:"2. Suites & Cases",permalink:"/node/touchstone/docs/using-touchstone/suites-and-cases"}},c={},d=[{value:"Benchmark options",id:"benchmark-options",level:2},{value:"Manual Run",id:"manual-run",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"A configuration container allows sharing benchmark execution configuration, reporters and other settings between suites."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { TouchStone, SimpleConsoleReporter } from '@pebula/touchstone';\nimport './suites'; // make sure all suites are loaded\n\n@TouchStone()\nclass MyPerformanceTest extends Mixin(SimpleConsoleReporter) {\n  benchmarkOptions = {\n    delay: 0.5,\n    initCount: 5,\n  };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here we assume that suites are defined in the ",(0,s.jsx)(n.code,{children:"./suites"})," folder, we import them and the container will automatically detect them."]}),"\n",(0,s.jsx)(n.p,{children:"Benchmarking will automatically start on the next JS tick."}),"\n",(0,s.jsx)(n.h2,{id:"benchmark-options",children:"Benchmark options"}),"\n",(0,s.jsxs)(n.p,{children:["We can define the default benchmark options (",(0,s.jsx)(n.code,{children:"benchmarkOptions"}),") which will apply to all suites and cases."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can define the ",(0,s.jsx)(n.code,{children:"benchmarkOptions"})," per ",(0,s.jsx)(n.strong,{children:"Suite"})," and/or per ",(0,s.jsx)(n.strong,{children:"Case"}),", at each level the options from the parent level are cloned and the new\noptions are merged into them (overridden)."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Note that the container ",(0,s.jsx)(n.code,{children:"MyPerformanceTest"})," get instantiated and the instance is used as the context (",(0,s.jsx)(n.code,{children:"this"}),") for all life cycle events by default.\nThis is also true for classes decorated with ",(0,s.jsx)(n.strong,{children:"Suite"}),", i.e. life cycle events defined on the ",(0,s.jsx)(n.strong,{children:"Suite"})," share a context (",(0,s.jsx)(n.code,{children:"this"}),")."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["By default, ",(0,s.jsx)(n.strong,{children:"@Case()"})," methods are ",(0,s.jsx)(n.strong,{children:"NOT"})," invoked with a context, even though they are class members.\nThis is done to prevent any impact on the benchmark results."]}),(0,s.jsxs)(n.p,{children:["If you wish to provide the suite's instance to the case method, same as done for life cycle methods you need to set\nthe ",(0,s.jsx)(n.code,{children:"caseInvokeType"})," property in the ",(0,s.jsx)(n.code,{children:"@Suite()"})," metadata argument parameter."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"@Suite({ caseInvokeType: 'method' })\nclass MyCase {\n  private myProp: number;\n\n  @OnStart()\n  start() {\n    this.myProp = 99; // can also be done in the constructor\n  }\n\n  @Case()\n  validate() {\n    const oneHundred = this.myProp + 1;\n    // oneHundred -> 100\n  }\n}\n"})}),(0,s.jsxs)(n.p,{children:["It is recommended to initialize suite's in the ",(0,s.jsx)(n.code,{children:"@OnStart"})," life cycle event and not in the constructor.\nThis way you will never define a constructor in a mixin class, which in the case of mixins never run!"]})]}),"\n",(0,s.jsx)(n.h2,{id:"manual-run",children:"Manual Run"}),"\n",(0,s.jsx)(n.p,{children:"You can disable the automatic benchmark execution by enabling manual run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"\n@TouchStone({ manualRun: true })\nclass MyPerformanceTest extends Mixin(SimpleConsoleReporter) {\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5569:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6326);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);